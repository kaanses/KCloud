// KCloud.FileStorage/Features/Storage/Commands/UploadFileCommandHandler.csusing Ardalis.Result;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileStorage.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using KCloud.FileStorage.Services;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Commands;public class UploadFileCommandHandler : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    private readonly IFileStorageService _fileStorageService;    private readonly IValidator<UploadFileCommand> _validator;    private readonly ILogger<UploadFileCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public UploadFileCommandHandler(        IFileStorageService fileStorageService,        IValidator<UploadFileCommand> validator,        ILogger<UploadFileCommandHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _fileStorageService = fileStorageService;        _validator = validator;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            // Validate the request using FluentValidation            var validationResult = await ValidationHelper.ValidateAsync(_validator, request, _logger);            if (!validationResult.IsSuccess)            {                return Result<UploadResponseDTO>.Error(validationResult.Errors.FirstOrDefault());            }            // Get current user            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result<UploadResponseDTO>.Unauthorized();            }            // Validate file using helper            var (isValid, errorMessage) = FileValidationHelper.ValidateFile(request.File, _localizer);            if (!isValid)            {                return Result<UploadResponseDTO>.Error(errorMessage!);            }            // Generate file ID and storage path using helpers            var fileId = Guid.NewGuid();            var storagePath = StoragePathHelper.GenerateStoragePath(currentUserId.Value, fileId, request.File.FileName);            var guidFileName = StoragePathHelper.GenerateGuidFileName(fileId, request.File.FileName);            _logger.LogInformation("Starting file upload: Original: {OriginalName}, GUID: {GuidName}, Size: {Size} bytes, User: {UserId}",                 request.File.FileName, guidFileName, request.File.Length, currentUserId);            // Store the file            var saveResult = await _fileStorageService.SaveFileAsync(request.File, storagePath, cancellationToken);            if (!saveResult.IsSuccess)            {                return Result<UploadResponseDTO>.Error(saveResult.Errors.FirstOrDefault() ?? _localizer["FileUploadFailed"]);            }            // Build response            var uploadResponseDto = new UploadResponseDTO            {                Id = fileId,                FileName = request.File.FileName,                ContentType = request.File.ContentType,                FileSizeBytes = request.File.Length,                StoragePath = storagePath,                UserId = currentUserId.Value,                FolderId = request.FolderId            };            _logger.LogInformation("File upload completed successfully: {FileId}", fileId);            return Result<UploadResponseDTO>.Success(uploadResponseDto);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error uploading file: {FileName}", request.File?.FileName);            return Result<UploadResponseDTO>.Error(_localizer["FileUploadFailed"]);        }    }}