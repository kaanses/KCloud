using Ardalis.Result;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileStorage.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Commands;public class UploadFileCommandHandler(    IFileStorageService fileStorageService,    IValidator<UploadFileCommand> validator,    ILogger<UploadFileCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);            if (!validationResult.IsSuccess)            {                return Result<UploadResponseDTO>.Error(validationResult.Errors.FirstOrDefault());            }                        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result<UploadResponseDTO>.Unauthorized();            }                        var (isValid, errorMessage) = FileValidationHelper.ValidateFile(request.File, localizer);            if (!isValid)            {                return Result<UploadResponseDTO>.Error(errorMessage!);            }                        var fileId = Guid.NewGuid();            var storagePath = StoragePathHelper.GenerateStoragePath(currentUserId.Value, fileId, request.File.FileName);            var guidFileName = StoragePathHelper.GenerateGuidFileName(fileId, request.File.FileName);            logger.LogInformation("Starting file upload: Original: {OriginalName}, GUID: {GuidName}, Size: {Size} bytes, User: {UserId}",                 request.File.FileName, guidFileName, request.File.Length, currentUserId);                        var saveResult = await fileStorageService.SaveFileAsync(request.File, storagePath, cancellationToken);            if (!saveResult.IsSuccess)            {                return Result<UploadResponseDTO>.Error(saveResult.Errors.FirstOrDefault() ?? localizer["FileUploadFailed"]);            }                        var uploadResponseDto = new UploadResponseDTO            {                Id = fileId,                FileName = request.File.FileName,                ContentType = request.File.ContentType,                FileSizeBytes = request.File.Length,                StoragePath = storagePath,                UserId = currentUserId.Value,                FolderId = request.FolderId            };            logger.LogInformation("File upload completed successfully: {FileId}", fileId);            return Result<UploadResponseDTO>.Success(uploadResponseDto);        }        catch (Exception ex)        {            logger.LogError(ex, "Error uploading file: {FileName}", request.File?.FileName);            return Result<UploadResponseDTO>.Error(localizer["FileUploadFailed"]);        }    }}