using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Commands;public class DeleteFileCommandHandler : IRequestHandler<DeleteFileCommand, Result>{    private readonly IFileStorageService _fileStorageService;    private readonly ILogger<DeleteFileCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public DeleteFileCommandHandler(        IFileStorageService fileStorageService,        ILogger<DeleteFileCommandHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _fileStorageService = fileStorageService;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken)    {        try        {            // Get current user for security            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized();            }            // Validate fileId            if (request.FileId == Guid.Empty)            {                return Result.Error(_localizer["InvalidFileId"]);            }            _logger.LogInformation("Starting file deletion: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId);            // Find the file in user's flat directory            var storagePath = await _fileStorageService.FindFileByIdAsync(currentUserId.Value, request.FileId);                        if (string.IsNullOrEmpty(storagePath))            {                // File doesn't exist, but deletion is idempotent - this is fine                _logger.LogInformation("File already deleted or doesn't exist: FileId: {FileId}, User: {UserId}",                     request.FileId, currentUserId);                return Result.Success();            }            // Delete the physical file            var deleteResult = await _fileStorageService.DeleteFileAsync(storagePath, cancellationToken);            if (!deleteResult.IsSuccess)            {                _logger.LogError("Failed to delete file: FileId: {FileId}, Error: {Error}",                     request.FileId, deleteResult.Errors.FirstOrDefault());                return Result.Error(deleteResult.Errors.FirstOrDefault() ?? _localizer["FileDeletionFailed"]);            }            _logger.LogInformation("File deleted successfully: FileId: {FileId}, StoragePath: {StoragePath}, User: {UserId}",                 request.FileId, storagePath, currentUserId);            return Result.Success();        }        catch (Exception ex)        {            _logger.LogError(ex, "Error deleting file: FileId: {FileId}", request.FileId);            return Result.Error(_localizer["FileDeletionFailed"]);        }    }    }