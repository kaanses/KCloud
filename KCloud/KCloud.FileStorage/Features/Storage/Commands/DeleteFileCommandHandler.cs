using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Commands;public class DeleteFileCommandHandler(    IFileStorageService fileStorageService,    ILogger<DeleteFileCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<DeleteFileCommand, Result>{    public Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken)    {        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);                try        {            if (currentUserId == null)            {                logger.LogWarning("Unauthenticated user attempted to delete file {FileId}", request.FileId);                return Task.FromResult(Result.Unauthorized());            }                        if (request.FileId == Guid.Empty)            {                logger.LogWarning("Invalid file ID provided for deletion by user {UserId}", currentUserId);                return Task.FromResult(Result.Error(localizer["InvalidFileId"]));            }            logger.LogInformation("Starting file deletion: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId);            var storagePath = fileStorageService.FindFileById(currentUserId.Value, request.FileId);                        if (string.IsNullOrEmpty(storagePath))            {                logger.LogInformation("File already deleted or doesn't exist: FileId: {FileId}, User: {UserId}",                     request.FileId, currentUserId);                return Task.FromResult(Result.Success());            }                        var deleteResult = fileStorageService.DeleteFile(storagePath);            if (!deleteResult.IsSuccess)            {                logger.LogError("Failed to delete file: FileId: {FileId}, StoragePath: {StoragePath}, Error: {Error}",                     request.FileId, storagePath, deleteResult.Errors.FirstOrDefault());                return Task.FromResult(Result.Error(localizer["PhysicalFileDeletionFailed"]));            }            logger.LogInformation("File deleted successfully: FileId: {FileId}, StoragePath: {StoragePath}, User: {UserId}",                 request.FileId, storagePath, currentUserId);            return Task.FromResult(Result.Success());        }        catch (Exception ex)        {            logger.LogError(ex, "Error deleting file: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId?.ToString() ?? "Unknown");            return Task.FromResult(Result.Error(localizer["FileDeletionFailed"]));        }    }}