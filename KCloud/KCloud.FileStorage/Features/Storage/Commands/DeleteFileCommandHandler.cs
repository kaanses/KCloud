using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Commands;public class DeleteFileCommandHandler(    IFileStorageService fileStorageService,    ILogger<DeleteFileCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<DeleteFileCommand, Result>{    public async Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken)    {        try        {                     var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized();            }                        if (request.FileId == Guid.Empty)            {                return Result.Error(localizer["InvalidFileId"]);            }            logger.LogInformation("Starting file deletion: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId);                       var storagePath = await fileStorageService.FindFileByIdAsync(currentUserId.Value, request.FileId);                        if (string.IsNullOrEmpty(storagePath))            {                logger.LogInformation("File already deleted or doesn't exist: FileId: {FileId}, User: {UserId}",                     request.FileId, currentUserId);                return Result.Success();            }                        var deleteResult = await fileStorageService.DeleteFileAsync(storagePath, cancellationToken);            if (!deleteResult.IsSuccess)            {                logger.LogError("Failed to delete file: FileId: {FileId}, Error: {Error}",                     request.FileId, deleteResult.Errors.FirstOrDefault());                return Result.Error(deleteResult.Errors.FirstOrDefault() ?? localizer["FileDeletionFailed"]);            }            logger.LogInformation("File deleted successfully: FileId: {FileId}, StoragePath: {StoragePath}, User: {UserId}",                 request.FileId, storagePath, currentUserId);            return Result.Success();        }        catch (Exception ex)        {            logger.LogError(ex, "Error deleting file: FileId: {FileId}", request.FileId);            return Result.Error(localizer["FileDeletionFailed"]);        }    }    }