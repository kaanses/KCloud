using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Queries;public class DownloadFileQueryHandler : IRequestHandler<DownloadFileQuery, Result<DownloadFileResponseDTO>>{    private readonly IFileStorageService _fileStorageService;    private readonly ILogger<DownloadFileQueryHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public DownloadFileQueryHandler(        IFileStorageService fileStorageService,        ILogger<DownloadFileQueryHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _fileStorageService = fileStorageService;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result<DownloadFileResponseDTO>> Handle(DownloadFileQuery request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result<DownloadFileResponseDTO>.Unauthorized();            }            if (request.FileId == Guid.Empty)            {                return Result<DownloadFileResponseDTO>.Error(_localizer["InvalidFileId"]);            }                        var storagePath = await _fileStorageService.FindFileByIdAsync(currentUserId.Value, request.FileId);            if (string.IsNullOrEmpty(storagePath))            {                return Result<DownloadFileResponseDTO>.NotFound(_localizer["FileNotFound"]);            }                        var fileResult = await _fileStorageService.GetFileAsync(storagePath, cancellationToken);            if (!fileResult.IsSuccess)            {                return Result<DownloadFileResponseDTO>.Error(fileResult.Errors.FirstOrDefault() ?? _localizer["FileRetrievalFailed"]);            }                        var response = new DownloadFileResponseDTO            {                FileStream = fileResult.Value            };            _logger.LogInformation("File download successful: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId);            return Result<DownloadFileResponseDTO>.Success(response);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error downloading file: {FileId}", request.FileId);            return Result<DownloadFileResponseDTO>.Error(_localizer["FileDownloadFailed"]);        }    }}