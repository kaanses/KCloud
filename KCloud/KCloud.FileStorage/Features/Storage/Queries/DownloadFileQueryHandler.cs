using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Queries;public class DownloadFileQueryHandler : IRequestHandler<DownloadFileQuery, Result<DownloadFileResponse>>{    private readonly IFileStorageService _fileStorageService;    private readonly ILogger<DownloadFileQueryHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public DownloadFileQueryHandler(        IFileStorageService fileStorageService,        ILogger<DownloadFileQueryHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _fileStorageService = fileStorageService;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result<DownloadFileResponse>> Handle(DownloadFileQuery request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result<DownloadFileResponse>.Unauthorized();            }            if (request.FileId == Guid.Empty)            {                return Result<DownloadFileResponse>.Error(_localizer["InvalidFileId"]);            }            // Use helper to find file            var storagePath = await _fileStorageService.FindFileByIdAsync(currentUserId.Value, request.FileId);            if (string.IsNullOrEmpty(storagePath))            {                return Result<DownloadFileResponse>.NotFound(_localizer["FileNotFound"]);            }            // Get file stream            var fileResult = await _fileStorageService.GetFileAsync(storagePath, cancellationToken);            if (!fileResult.IsSuccess)            {                return Result<DownloadFileResponse>.Error(fileResult.Errors.FirstOrDefault() ?? _localizer["FileRetrievalFailed"]);            }            // Build response using helpers            var fileName = Path.GetFileName(storagePath);            var contentType = ContentTypeHelper.GetContentType(fileName);            var fileSize = fileResult.Value.Length;            var response = new DownloadFileResponse            {                FileStream = fileResult.Value,                FileName = fileName,                ContentType = contentType,                FileSize = fileSize            };            _logger.LogInformation("File download successful: FileId: {FileId}, User: {UserId}",                 request.FileId, currentUserId);            return Result<DownloadFileResponse>.Success(response);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error downloading file: {FileId}", request.FileId);            return Result<DownloadFileResponse>.Error(_localizer["FileDownloadFailed"]);        }    }}