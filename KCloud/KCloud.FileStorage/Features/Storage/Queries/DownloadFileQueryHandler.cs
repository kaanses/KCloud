using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Queries;public class DownloadFileQueryHandler : IRequestHandler<DownloadFileQuery, Result<DownloadFileResponseDTO>>{    private readonly IFileStorageService _fileStorageService;    private readonly ILogger<DownloadFileQueryHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public DownloadFileQueryHandler(        IFileStorageService fileStorageService,        ILogger<DownloadFileQueryHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _fileStorageService = fileStorageService;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public Task<Result<DownloadFileResponseDTO>> Handle(DownloadFileQuery request, CancellationToken cancellationToken)    {        try        {            if (request.FileId == Guid.Empty)            {                return Task.FromResult(Result<DownloadFileResponseDTO>.Error(_localizer["InvalidFileId"]));            }                        var storagePath =  _fileStorageService.FindFileById(request.UserId, request.FileId);            if (string.IsNullOrEmpty(storagePath))            {                return Task.FromResult(Result<DownloadFileResponseDTO>.NotFound(_localizer["FileNotFound"]));            }                        var fileResult =  _fileStorageService.GetFile(storagePath);            if (!fileResult.IsSuccess)            {                return Task.FromResult(Result<DownloadFileResponseDTO>.Error(fileResult.Errors.FirstOrDefault() ?? _localizer["FileRetrievalFailed"]));            }                        var response = new DownloadFileResponseDTO            {                FileStream = fileResult.Value            };            _logger.LogInformation("File download successful: FileId: {FileId}, User: {UserId}",                 request.FileId, request.UserId);            return Task.FromResult(Result<DownloadFileResponseDTO>.Success(response));        }        catch (Exception ex)        {            _logger.LogError(ex, "Error downloading file: {FileId}", request.FileId);            return Task.FromResult(Result<DownloadFileResponseDTO>.Error(_localizer["FileDownloadFailed"]));        }    }}