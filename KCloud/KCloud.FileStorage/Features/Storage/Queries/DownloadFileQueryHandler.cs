using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Features.Storage.Queries;public class DownloadFileQueryHandler(    IFileStorageService fileStorageService,    ILogger<DownloadFileQueryHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<DownloadFileQuery, Result<DownloadFileResponseDTO>>{    public Task<Result<DownloadFileResponseDTO>> Handle(DownloadFileQuery request, CancellationToken cancellationToken)    {        try        {            if (request.FileId == Guid.Empty)            {                logger.LogWarning("Invalid file ID provided for download: {FileId}", request.FileId);                return Task.FromResult(Result<DownloadFileResponseDTO>.Error(localizer["InvalidFileId"]));            }                        logger.LogInformation("Starting file download: FileId: {FileId}, RequestedByUser: {UserId}",                 request.FileId, request.UserId);                        var storagePath = fileStorageService.FindFileById(request.UserId, request.FileId);            if (string.IsNullOrEmpty(storagePath))            {                logger.LogWarning("File not found in storage: FileId: {FileId}, User: {UserId}",                     request.FileId, request.UserId);                return Task.FromResult(Result<DownloadFileResponseDTO>.Error(localizer["FileNotFoundInStorage"]));            }                        var fileResult = fileStorageService.GetFile(storagePath);            if (!fileResult.IsSuccess)            {                logger.LogError("Failed to retrieve file from storage: FileId: {FileId}, StoragePath: {StoragePath}, Error: {Error}",                     request.FileId, storagePath, fileResult.Errors.FirstOrDefault());                return Task.FromResult(Result<DownloadFileResponseDTO>.Error(localizer["PhysicalFileRetrievalFailed"]));            }            var response = new DownloadFileResponseDTO            {                FileStream = fileResult.Value            };            logger.LogInformation("File download successful: FileId: {FileId}, User: {UserId}, StoragePath: {StoragePath}",                 request.FileId, request.UserId, storagePath);            return Task.FromResult(Result<DownloadFileResponseDTO>.Success(response));        }        catch (Exception ex)        {            logger.LogError(ex, "Error downloading file: FileId: {FileId}, User: {UserId}",                 request.FileId, request.UserId);            return Task.FromResult(Result<DownloadFileResponseDTO>.Error(localizer["FileDownloadFailed"]));        }    }}