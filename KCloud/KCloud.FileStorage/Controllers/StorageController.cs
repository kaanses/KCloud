using KCloud.Common.Controllers;using KCloud.FileStorage.Features.Storage.Commands;using KCloud.FileStorage.Features.Storage.Queries;using MediatR;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;namespace KCloud.FileStorage.Controllers;[ApiController][Route("api/[controller]")][Authorize]public class StorageController : BaseController{    private readonly IMediator _mediator;    public StorageController(IMediator mediator)    {        _mediator = mediator;    }    [HttpPost("upload")]    public async Task<IActionResult> UploadFile([FromForm] UploadFileCommand command, CancellationToken cancellationToken)    {        var result = await _mediator.Send(command, cancellationToken);        return HandleResult(result);    }    [HttpGet("download/{id}")]    public async Task<IActionResult> DownloadFile(Guid id, CancellationToken cancellationToken)    {        var query = new DownloadFileQuery { FileId = id };        var result = await _mediator.Send(query, cancellationToken);        if (!result.IsSuccess)        {            return HandleResult(result);        }        var fileResponse = result.Value;                return File(            fileResponse.FileStream,             fileResponse.ContentType,             fileResponse.FileName,            enableRangeProcessing: true        );    }    [HttpDelete("delete/{id}")]    public async Task<IActionResult> DeleteFile(Guid id, CancellationToken cancellationToken)    {        var command = new DeleteFileCommand { FileId = id };        var result = await _mediator.Send(command, cancellationToken);        return HandleResult(result);    }}