using KCloud.FileStorage.Features.Storage.Commands;using KCloud.FileStorage.Features.Storage.Queries;using MediatR;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Controllers;[ApiController][Route("storage")][Authorize]public class StorageController(IMediator mediator, ILogger<StorageController> logger, IStringLocalizer localizer) : ControllerBase{    [HttpPost("upload")]    public async Task<IActionResult> UploadFile([FromForm] UploadFileCommand command,        CancellationToken cancellationToken)    {        var result = await mediator.Send(command, cancellationToken);        if (!result.IsSuccess)        {            logger.LogWarning("Upload failed - Status: {Status}, ErrorCount: {ErrorCount}",                result.Status, result.Errors?.ToArray().Count() ?? 0);            if (result.Errors?.Any() == true)            {                logger.LogWarning("Upload errors: {Errors}", string.Join(", ", result.Errors));            }            if (result.ValidationErrors?.Any() == true)            {                logger.LogWarning("Upload validation errors: {ValidationErrors}",                    string.Join(", ", result.ValidationErrors.Select(e => $"{e.Identifier}: {e.ErrorMessage}")));            }            logger.LogWarning("BadRequest response: message={Message}, errors={Errors}, validationErrors={ValidationErrors}",                "Upload failed",                string.Join(", ", result.Errors ?? Array.Empty<string>()),                string.Join(", ", result.ValidationErrors?.Select(e => $"{e.Identifier}: {e.ErrorMessage}") ?? Array.Empty<string>()));                        return BadRequest(new            {                message = "Upload failed",                errors = result.Errors?.ToArray() ?? Array.Empty<string>(),                validationErrors = result.ValidationErrors?.Select(e => new                {                    field = e.Identifier,                    message = e.ErrorMessage                }).ToArray() ?? Array.Empty<object>()            });        }        logger.LogInformation("Upload successful - FileId: {FileId}", result.Value?.Id);        return Ok(result.Value);    }    [AllowAnonymous]    [HttpGet("download/{userId}/{id}")]    public async Task<IActionResult> DownloadFile(Guid userId, Guid id, CancellationToken cancellationToken)    {        var query = new DownloadFileQuery(id, userId);        var result = await mediator.Send(query, cancellationToken);        if (!result.IsSuccess)            return BadRequest(new { errors = result.Errors });        var fileResponse = result.Value;        return File(            fileResponse.FileStream,            "application/octet-stream"        );    }    [HttpDelete("delete/{id}")]    public async Task<IActionResult> DeleteFile(Guid id, CancellationToken cancellationToken)    {        var command = new DeleteFileCommand { FileId = id };        var result = await mediator.Send(command, cancellationToken);        if (!result.IsSuccess)            return BadRequest(new { errors = result.Errors });        return Ok();    }    }