using System.Globalization;using System.Reflection;using System.Text;using FluentValidation;using KCloud.Common.Resources;using KCloud.FileStorage.Features.Storage.Commands;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Services;using KCloud.FileStorage.Validators;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Localization;using Microsoft.Extensions.Localization;using Microsoft.IdentityModel.Tokens;using Serilog;var builder = WebApplication.CreateBuilder(args);Log.Logger = new LoggerConfiguration()    .ReadFrom.Configuration(builder.Configuration)    .CreateLogger();builder.Host.UseSerilog();try{    builder.Services.AddControllers();    builder.Services.AddEndpointsApiExplorer();    builder.Services.AddSwaggerGen();        builder.Services.AddLocalization(options => options.ResourcesPath = "");        builder.Services.Configure<RequestLocalizationOptions>(options =>    {        var supportedCultures = new[]        {            new CultureInfo("en-US"),             new CultureInfo("tr-TR")          };            options.DefaultRequestCulture = new RequestCulture("en-US");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;                options.RequestCultureProviders.Add(new CookieRequestCultureProvider());        options.RequestCultureProviders.Add(new QueryStringRequestCultureProvider());        options.RequestCultureProviders.Add(new AcceptLanguageHeaderRequestCultureProvider());    });            builder.Services.AddHttpContextAccessor();        builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));        builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)        .AddJwtBearer(options =>        {            var jwtKey = builder.Configuration["Jwt:Key"];            var key = Encoding.UTF8.GetBytes(jwtKey);                options.TokenValidationParameters = new TokenValidationParameters            {                ValidateIssuerSigningKey = true,                IssuerSigningKey = new SymmetricSecurityKey(key),                ValidateIssuer = true,                ValidIssuer = builder.Configuration["Jwt:Issuer"],                ValidateAudience = true,                ValidAudience = builder.Configuration["Jwt:Audience"],                ValidateLifetime = true,                ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetValue<double>("Jwt:ClockSkew"))            };                    });    builder.Services.AddScoped<IValidator<UploadFileCommand>, UploadFileCommandValidator>();            builder.Services.AddScoped<IFileStorageService, FileStorageService>();       builder.Services.AddTransient<IStringLocalizer>(sp =>         sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));        builder.WebHost.ConfigureKestrel(options =>    {        options.Limits.MaxRequestBodySize = 80_000_000;     });        var app = builder.Build();        if (app.Environment.IsDevelopment())    {        app.UseSwagger();        app.UseSwaggerUI();    }        app.UseRequestLocalization();    app.UseSerilogRequestLogging();    app.UseHttpsRedirection();        app.UseAuthentication();    app.UseAuthorization();        app.MapControllers();    Log.Information("FileStorage API started successfully");    app.Run();}catch (Exception ex){    Log.Fatal(ex, "Application terminated unexpectedly");}finally{    Log.CloseAndFlush();}