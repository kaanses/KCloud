using System.Globalization;using System.Reflection;using System.Text;using FluentValidation;using KCloud.Common.Resources;using KCloud.FileStorage.Features.Storage.Commands;using KCloud.FileStorage.Interfaces;using KCloud.FileStorage.Services;using KCloud.FileStorage.Validators;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Localization;using Microsoft.Extensions.Localization;using Microsoft.IdentityModel.Tokens;using Serilog;// Create a simple console loggerLog.Logger = new LoggerConfiguration()    .MinimumLevel.Information()    .WriteTo.Console()    .CreateLogger();try{    Log.Information("Starting KCloud FileStorage API");    var builder = WebApplication.CreateBuilder(args);        // Configure Serilog    builder.Host.UseSerilog((context, services, configuration) => configuration        .MinimumLevel.Information()        .WriteTo.Console()        .ReadFrom.Configuration(context.Configuration)        .ReadFrom.Services(services));    // Add services to the container    builder.Services.AddControllers();    builder.Services.AddEndpointsApiExplorer();    builder.Services.AddSwaggerGen();    // Set up localization    builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");        builder.Services.Configure<RequestLocalizationOptions>(options =>    {        var supportedCultures = new[]        {            new CultureInfo("en-US"),             new CultureInfo("tr-TR")          };            options.DefaultRequestCulture = new RequestCulture("en-US");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;    });    // Add HttpContextAccessor for getting current user    builder.Services.AddHttpContextAccessor();    // Add MediatR    builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));    // Add JWT Authentication (same config as other services)    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)        .AddJwtBearer(options =>        {            options.TokenValidationParameters = new TokenValidationParameters            {                ValidateIssuer = true,                ValidateAudience = true,                ValidateLifetime = true,                ValidateIssuerSigningKey = true,                ValidIssuer = builder.Configuration["Jwt:Issuer"],                ValidAudience = builder.Configuration["Jwt:Audience"],                IssuerSigningKey = new SymmetricSecurityKey(                    Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ??                        throw new InvalidOperationException("JWT Key is missing in configuration")))            };        });    // Add FluentValidation validators    builder.Services.AddScoped<IValidator<UploadFileCommand>, UploadFileCommandValidator>();    // Register FileStorage services    builder.Services.AddScoped<IFileStorageService, FileStorageService>();    // Register StringLocalizer for localization    builder.Services.AddTransient<IStringLocalizer>(sp =>         sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));        var app = builder.Build();    // Configure the HTTP request pipeline    if (app.Environment.IsDevelopment())    {        app.UseSwagger();        app.UseSwaggerUI();    }    app.UseRequestLocalization();    app.UseSerilogRequestLogging();    app.UseHttpsRedirection();        // IMPORTANT: Authentication must come before Authorization    app.UseAuthentication();    app.UseAuthorization();        app.MapControllers();    Log.Information("FileStorage API started successfully");    app.Run();}catch (Exception ex){    Log.Fatal(ex, "Application terminated unexpectedly");}finally{    Log.CloseAndFlush();}