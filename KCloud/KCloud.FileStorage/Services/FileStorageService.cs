using Ardalis.Result;using KCloud.FileStorage.Helpers;using KCloud.FileStorage.Interfaces;namespace KCloud.FileStorage.Services;public class FileStorageService(ILogger<FileStorageService> logger, IConfiguration configuration)    : IFileStorageService{    private readonly string _storageBasePath = configuration["Storage:BasePath"] ??                                               Path.Combine(Directory.GetCurrentDirectory(), "Storage");    public async Task<Result<string>> SaveFileAsync(IFormFile file, string storagePath,        CancellationToken cancellationToken = default)    {        try        {            var fullPath = Path.Combine(_storageBasePath, storagePath);            var directory = Path.GetDirectoryName(fullPath);            if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))            {                Directory.CreateDirectory(directory);            }            using var stream = new FileStream(fullPath, FileMode.Create);            await file.CopyToAsync(stream, cancellationToken);            logger.LogInformation("File saved successfully: {StoragePath}", storagePath);            return Result<string>.Success(fullPath);        }        catch (Exception ex)        {            logger.LogError(ex, "Error saving file: {StoragePath}", storagePath);            return Result<string>.Error($"Failed to save file: {ex.Message}");        }    }    public Result<Stream> GetFile(string storagePath)    {        try        {            var fullPath = Path.Combine(_storageBasePath, storagePath);            if (!File.Exists(fullPath))            {                return Result<Stream>.NotFound("File not found");            }            var stream = new FileStream(fullPath, FileMode.Open, FileAccess.Read);            return Result<Stream>.Success(stream);        }        catch (Exception ex)        {            logger.LogError(ex, "Error retrieving file: {StoragePath}", storagePath);            return Result<Stream>.Error($"Failed to retrieve file: {ex.Message}");        }    }    public Result DeleteFile(string storagePath)    {        try        {            var fullPath = Path.Combine(_storageBasePath, storagePath);            if (File.Exists(fullPath))            {                File.Delete(fullPath);                logger.LogInformation("File deleted successfully: {StoragePath}", storagePath);            }            else            {                logger.LogWarning("File not found for deletion: {StoragePath}", storagePath);            }            return Result.Success();        }        catch (Exception ex)        {            logger.LogError(ex, "Error deleting file: {StoragePath}", storagePath);            return Result.Error($"Failed to delete file: {ex.Message}");        }    }    public Result<string> FindFileById(Guid userId, Guid fileId)    {        try        {            logger.LogInformation("Searching for file - UserId: {UserId}, FileId: {FileId}", userId, fileId);            // Get extensions with null safety and fallback            var extensions = configuration?.GetSection("FileUpload:AllowedExtensions")?.Get<string[]>()                              ?? new[] { ".pdf", ".jpg", ".jpeg", ".png", ".gif", ".webp", ".txt", ".json", ".doc", ".docx", ".xls", ".xlsx" };            logger.LogDebug("Using {Count} extensions for search: {Extensions}", extensions.Length, string.Join(", ", extensions));            if (extensions.Length == 0)            {                logger.LogWarning("No file extensions configured or available for search");                return Result<string>.Error("No file extensions configured for search");            }            foreach (var ext in extensions)            {                if (string.IsNullOrEmpty(ext))                {                    logger.LogWarning("Skipping null or empty extension");                    continue;                }                var potentialPath = $"users/{userId}/{fileId}{ext}";                var fullPath = Path.Combine(_storageBasePath, potentialPath);                    logger.LogDebug("Checking path: {Path}", potentialPath);                    if (File.Exists(fullPath))                {                    logger.LogInformation("Found file at: {Path}", potentialPath);                    return Result<string>.Success(potentialPath);                }            }            logger.LogWarning("File not found - UserId: {UserId}, FileId: {FileId}", userId, fileId);            return Result<string>.NotFound("File not found");        }        catch (Exception ex)        {            logger.LogError(ex, "Error searching for file: UserId: {UserId}, FileId: {FileId}", userId, fileId);            return Result<string>.Error($"Failed to search for file: {ex.Message}");        }    }}