using FluentValidation;using KCloud.FileStorage.Features.Storage.Commands;using Microsoft.Extensions.Localization;namespace KCloud.FileStorage.Validators;public class UploadFileCommandValidator : AbstractValidator<UploadFileCommand>{    private readonly IStringLocalizer _localizer;    public UploadFileCommandValidator(IStringLocalizer localizer)    {        _localizer = localizer;        RuleFor(x => x.File)            .NotNull().WithMessage(_localizer["FileRequired"].Value)            .Must(file => file != null && file.Length > 0).WithMessage(_localizer["FileRequired"].Value)            .Must(file => file == null || file.Length <= 5_000_000_000).WithMessage(_localizer["FileSizeExceedsLimit"].Value) // 5GB limit            .Must(BeAllowedFileType).WithMessage(_localizer["FileTypeNotAllowed"].Value);        RuleFor(x => x.FolderId)            .Must(folderId => !folderId.HasValue || folderId.Value != Guid.Empty)            .WithMessage(_localizer["InvalidFolderId"])            .When(x => x.FolderId.HasValue);    }    private bool BeAllowedFileType(IFormFile file)    {        if (file == null) return false;        var allowedTypes = new[] {             "image/jpeg", "image/png", "image/gif", "image/webp",            "application/pdf", "text/plain", "application/json",            "application/msword", "application/vnd.openxmlformats-officedocument.wordprocessingml.document",            "application/vnd.ms-excel", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"        };        return allowedTypes.Contains(file.ContentType.ToLower());    }}