using System.Security.Claims;using System.Text.Json;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using Microsoft.AspNetCore.Authentication;namespace KCloud.Web.Services;public class TokenRefreshService : ITokenRefreshService{    private readonly IHttpClientFactory _httpClientFactory;    private readonly IHttpContextAccessor _httpContextAccessor;    private readonly ILogger<TokenRefreshService> _logger;    public TokenRefreshService(        IHttpClientFactory httpClientFactory,        IHttpContextAccessor httpContextAccessor,        ILogger<TokenRefreshService> logger)    {        _httpClientFactory = httpClientFactory;        _httpContextAccessor = httpContextAccessor;        _logger = logger;    }        public string? GetRefreshToken()    {        return _httpContextAccessor.HttpContext?.User?.FindFirst("refresh_token")?.Value;    }    public async Task<bool> RefreshTokenAsync()    {        try        {            var refreshToken = GetRefreshToken();            if (string.IsNullOrEmpty(refreshToken)) return false;            var httpClient = _httpClientFactory.CreateClient("AuthService");            var json = JsonSerializer.Serialize(new { RefreshToken = refreshToken });            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/refresh", content);            if (!response.IsSuccessStatusCode) return false;            var responseJson = await response.Content.ReadAsStringAsync();            var authResponse = JsonSerializer.Deserialize<AuthResponseDTO>(responseJson,                 new JsonSerializerOptions { PropertyNameCaseInsensitive = true });                        if (authResponse == null) return false;            await UpdateTokensAsync(authResponse.Token, authResponse.RefreshToken);            return true;        }        catch (Exception ex)        {            _logger.LogError(ex, "Token refresh failed");            return false;        }    }    private async Task UpdateTokensAsync(string newJwt, string newRefreshToken)    {        var context = _httpContextAccessor.HttpContext;        if (context?.User?.Identity is ClaimsIdentity identity)        {            // Remove old tokens            var oldJwt = identity.FindFirst("jwt_token");            var oldRefresh = identity.FindFirst("refresh_token");            if (oldJwt != null) identity.RemoveClaim(oldJwt);            if (oldRefresh != null) identity.RemoveClaim(oldRefresh);            // Add new tokens            identity.AddClaim(new Claim("jwt_token", newJwt));            identity.AddClaim(new Claim("refresh_token", newRefreshToken));            await context.SignInAsync("Cookies", new ClaimsPrincipal(identity));        }    }}