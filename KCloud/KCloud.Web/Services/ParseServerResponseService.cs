using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;namespace KCloud.Web.Services;public class ParseServerResponseService : IParseServerResponseService{    private readonly JsonSerializerOptions _jsonOptions;    private readonly ILogger<ParseServerResponseService> _logger;    public ParseServerResponseService(ILogger<ParseServerResponseService> logger)    {        _logger = logger;        _jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };    }    public async Task<Result<T>> ParseSuccessResponse<T>(string responseContent)    {        try        {            var data = JsonSerializer.Deserialize<T>(responseContent, _jsonOptions);            return Result<T>.Success(data!);        }        catch (JsonException ex)        {            _logger.LogError(ex, "Failed to parse success response: {Content}", responseContent);            return Result<T>.Error("Invalid server response format");        }    }   public async Task<Result<T>> ParseErrorResponse<T>(string responseContent, int statusCode){    try    {        _logger.LogWarning("üîç Parsing error response: {ResponseContent}", responseContent);                using var document = JsonDocument.Parse(responseContent);        var root = document.RootElement;                // Check for validation errors first (highest priority)        if (root.TryGetProperty("validationErrors", out var validationErrors) &&             validationErrors.ValueKind == JsonValueKind.Array)        {            var validationErrorsList = new List<ValidationError>();                        foreach (var error in validationErrors.EnumerateArray())            {                string fieldName = "";                string message = "";                                if (error.TryGetProperty("field", out var fieldElement))                {                    fieldName = fieldElement.GetString() ?? "";                }                                if (error.TryGetProperty("message", out var messageElement))                {                    message = messageElement.GetString() ?? "";                }                                if (!string.IsNullOrEmpty(message))                {                    validationErrorsList.Add(new ValidationError                     {                         Identifier = fieldName,                         ErrorMessage = message                     });                }            }                        if (validationErrorsList.Any())            {                _logger.LogWarning("‚úÖ Found validation errors: {@ValidationErrors}", validationErrorsList);                return Result<T>.Invalid(validationErrorsList.ToArray());            }        }                var errorMessages = new List<string>();                // Check for errors array        if (root.TryGetProperty("errors", out var errorsArray) &&             errorsArray.ValueKind == JsonValueKind.Array)        {            foreach (var error in errorsArray.EnumerateArray())            {                if (error.ValueKind == JsonValueKind.String)                {                    var message = error.GetString();                    if (!string.IsNullOrEmpty(message))                    {                        errorMessages.Add(message);                    }                }            }        }                // Check for message property        if (!errorMessages.Any() && root.TryGetProperty("message", out var messageProperty))        {            var message = messageProperty.GetString();            if (!string.IsNullOrEmpty(message))            {                errorMessages.Add(message);            }        }                // Check for detail property        if (!errorMessages.Any() && root.TryGetProperty("detail", out var detailProperty))        {            var detail = detailProperty.GetString();            if (!string.IsNullOrEmpty(detail))            {                errorMessages.Add(detail);            }        }                // Check for title property        if (!errorMessages.Any() && root.TryGetProperty("title", out var titleProperty))        {            var title = titleProperty.GetString();            if (!string.IsNullOrEmpty(title))            {                errorMessages.Add(title);            }        }                _logger.LogWarning("üîç Extracted error messages: {@ErrorMessages}", errorMessages);                if (errorMessages.Any())        {            // FIX: Join the error messages properly instead of calling ToString()            var combinedMessage = string.Join(", ", errorMessages);                        return statusCode switch            {                400 => Result<T>.Error(combinedMessage), // FIXED!                401 => Result<T>.Unauthorized(),                403 => Result<T>.Forbidden(),                404 => Result<T>.NotFound(),                409 => Result<T>.Conflict(errorMessages.ToArray()),                _ => Result<T>.Error(combinedMessage) // FIXED!            };        }                // Fallback to generic messages        return statusCode switch        {            400 => Result<T>.Error("Bad request"),            401 => Result<T>.Unauthorized(),            403 => Result<T>.Forbidden(),            404 => Result<T>.NotFound(),            409 => Result<T>.Conflict("Conflict occurred"),            _ => Result<T>.Error("Server error occurred")        };    }    catch (JsonException ex)    {        _logger.LogError(ex, "Failed to parse error response: {Content}", responseContent);                return statusCode switch        {            400 => Result<T>.Error("Bad request"),            401 => Result<T>.Unauthorized(),            403 => Result<T>.Forbidden(),            404 => Result<T>.NotFound(),            _ => Result<T>.Error("Server error occurred")        };    }}}