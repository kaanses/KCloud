using KCloud.Web.Interfaces;namespace KCloud.Web.Services;public class AuthTokenService(IHttpContextAccessor httpContextAccessor) : IAuthTokenService{        public void StoreTokens(string accessToken, string refreshToken)    {        var httpContext = httpContextAccessor.HttpContext;        if (httpContext == null) return;        httpContext.Session.SetString("accessToken", accessToken);                httpContext.Response.Cookies.Append("refreshToken", refreshToken, new CookieOptions        {            HttpOnly = true,            Secure = true,            SameSite = SameSiteMode.Strict,            Expires = DateTimeOffset.UtcNow.AddDays(30),            Path = "/"        });    }        public string? GetAccessToken()    {        var httpContext = httpContextAccessor.HttpContext;        return httpContext?.Session.GetString("accessToken");    }        public string? GetRefreshToken()    {        var httpContext = httpContextAccessor.HttpContext;        return httpContext?.Request.Cookies["refreshToken"];    }        public void ClearTokens()    {        var httpContext = httpContextAccessor.HttpContext;        if (httpContext == null) return;                httpContext.Session.Remove("accessToken");                httpContext.Response.Cookies.Append("refreshToken", "", new CookieOptions        {            HttpOnly = true,            Secure = true,            SameSite = SameSiteMode.Strict,            Expires = DateTimeOffset.UtcNow.AddDays(-1),            Path = "/"        });    }}