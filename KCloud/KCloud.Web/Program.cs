using Serilog;using System.Globalization;using System.IdentityModel.Tokens.Jwt;using System.Security.Claims;using System.Text;using AutoMapper;using KCloud.Web.Interceptors;using KCloud.Web.Interfaces;using KCloud.Web.Mappings;using KCloud.Web.Services;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Http.Features;using Microsoft.AspNetCore.Localization;using Microsoft.Extensions.Localization;using Microsoft.IdentityModel.Tokens;var builder = WebApplication.CreateBuilder(args);builder.Host.UseSerilog((context, services, configuration) =>     configuration.ReadFrom.Configuration(context.Configuration));var requestSize = builder.Configuration.GetValue<long>("FileUpload:RequestSize", 55_428_800L); // 55MB defaultbuilder.Services.Configure<IISServerOptions>(options =>{    options.MaxRequestBodySize = requestSize; });builder.WebHost.ConfigureKestrel(options =>{    options.Limits.MaxRequestBodySize = requestSize;     options.Limits.RequestHeadersTimeout = TimeSpan.FromSeconds(30);    options.Limits.KeepAliveTimeout = TimeSpan.FromSeconds(30);});builder.Services.Configure<FormOptions>(options =>{    options.MultipartBodyLengthLimit = requestSize;    options.ValueLengthLimit = (int)requestSize;     options.KeyLengthLimit = 2048;});builder.Services.AddHttpContextAccessor();builder.Services.AddLocalization(options => options.ResourcesPath = "");builder.Services.AddControllersWithViews()    .AddViewLocalization()      .AddDataAnnotationsLocalization();builder.Services.AddScoped<IAuthTokenService, AuthTokenService>();builder.Services.AddScoped<IParseServerResponseService, ParseServerResponseService>();builder.Services.AddSingleton<IStringLocalizer>(sp =>     sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(KCloud.Common.Resources.SharedResource)));builder.Services.Configure<RequestLocalizationOptions>(options =>{    var supportedCultures = new[]    {        new CultureInfo("en-US"),         new CultureInfo("tr-TR")      };    options.DefaultRequestCulture = new RequestCulture("en-US");    options.SupportedCultures = supportedCultures;    options.SupportedUICultures = supportedCultures;        options.RequestCultureProviders.Insert(0, new QueryStringRequestCultureProvider());    options.RequestCultureProviders.Insert(1, new CookieRequestCultureProvider());    options.RequestCultureProviders.Insert(2, new AcceptLanguageHeaderRequestCultureProvider());});builder.Services.AddAutoMapper(typeof(MappingProfile));builder.Services.AddTransient<AuthTokenDelegatingHandler>();var gatewayBaseUrl = builder.Configuration["Gateway:BaseUrl"];builder.Services.AddHttpClient("KCloudGateway", client =>    {        client.BaseAddress = new Uri(gatewayBaseUrl);    })    .AddHttpMessageHandler<AuthTokenDelegatingHandler>();builder.Services.AddHttpClient("KCloudGatewayNoAuth", client =>{    client.BaseAddress = new Uri(gatewayBaseUrl);});var sessionTimeout = builder.Configuration.GetValue<int>("Session:Timeout");builder.Services.AddDistributedMemoryCache();builder.Services.AddSession(options =>{    options.IdleTimeout = TimeSpan.FromMinutes(sessionTimeout);    options.Cookie.HttpOnly = true;    options.Cookie.IsEssential = true;});builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(typeof(Program).Assembly));builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)    .AddJwtBearer(options =>    {        var jwtKey = builder.Configuration["Jwt:Key"];        var key = Encoding.UTF8.GetBytes(jwtKey);            options.TokenValidationParameters = new TokenValidationParameters        {            ValidateIssuerSigningKey = true,            IssuerSigningKey = new SymmetricSecurityKey(key),            ValidateIssuer = true,            ValidIssuer = builder.Configuration["Jwt:Issuer"],            ValidateAudience = true,            ValidAudience = builder.Configuration["Jwt:Audience"],            ValidateLifetime = true,            ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetValue<double>("Jwt:ClockSkew"))        };            options.Events = new JwtBearerEvents        {            OnMessageReceived = context =>            {                var token = context.HttpContext.Session.GetString("accessToken");                if (!string.IsNullOrEmpty(token))                {                    context.Token = token;                }                return Task.CompletedTask;            }        };    });builder.Services.AddAuthorization();var app = builder.Build();app.Use(async (context, next) =>{    if (context.Request.ContentLength > 52_428_800)    {        context.Response.StatusCode = 413; // Payload Too Large        context.Response.ContentType = "application/json";        await context.Response.WriteAsync("{\"error\":\"File too large. Maximum size is 50MB.\"}");        return;    }    await next();});// Configure pipelineif (!app.Environment.IsDevelopment()){    app.UseExceptionHandler("/Home/Error");    app.UseHsts();}app.UseHttpsRedirection();app.UseStaticFiles();app.UseRequestLocalization();app.UseRouting();app.UseSession();app.UseAuthentication(); app.UseAuthorization();app.MapControllerRoute(    name: "default",    pattern: "{controller=Home}/{action=Index}/{id?}");app.Run();