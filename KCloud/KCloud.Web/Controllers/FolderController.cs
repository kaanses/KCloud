using Microsoft.AspNetCore.Mvc;using MediatR;using KCloud.Web.Features.Folders.Commands;using KCloud.Web.Models.DTO;using Ardalis.Result;using KCloud.Web.Features.Folders.Queries;using KCloud.Web.Models.ViewModel;namespace KCloud.Web.Controllers;[Route("[controller]")]public class FolderController(IMediator mediator, ILogger<FolderController> logger) : Controller{    [HttpPost("details")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Details([FromBody] GetFolderDetailsViewModel request)    {        try        {            var command = new GetFolderDetailsQuery(request.Id);            var result = await mediator.Send(command);            if (result.IsSuccess)            {                return Json(new {                     success = true,                    data = result.Value                });            }            return Json(new {                 success = false,                 message = result.Errors.FirstOrDefault() ?? "Failed to get folder details."             });        }        catch (Exception ex)        {            return Json(new {                 success = false,                 message = "An unexpected error occurred."             });        }    }    [HttpPost("create")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Create([FromBody] CreateFolderViewModel request)    {        try        {            var command = new CreateFolderCommand(request.Name, request.ParentFolderId);            var result = await mediator.Send(command);            if (result.IsSuccess)            {                logger.LogInformation("Folder '{FolderName}' created successfully for user",                     request.Name);                                return Json(new {                     success = true,                     message = "Folder created successfully!",                    folder = result.Value                 });            }                        return Json(new {                 success = false,                 message = result.Errors.FirstOrDefault() ?? "Failed to create folder."             });        }        catch (Exception ex)        {            return Json(new {                 success = false,                 message = "An unexpected error occurred. Please try again."             });        }    }    [HttpPost("update")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Update([FromBody] UpdateFolderViewModel request)    {        try        {            var command = new UpdateFolderCommand(request.Id, request.Name, request.ParentFolderId);            var result = await mediator.Send(command);            if (result.IsSuccess)            {                return Json(new {                     success = true,                     message = "Folder updated successfully!",                    folder = result.Value                 });            }                    return Json(new {                 success = false,                 message = result.Errors.FirstOrDefault() ?? "Failed to update folder."             });        }        catch (Exception ex)        {            return Json(new {                 success = false,                 message = "An unexpected error occurred. Please try again."             });        }    }    [HttpPost("delete")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Delete([FromBody]DeleteFolderViewModel request)    {        try        {            var command = new DeleteFolderCommand(                request.Id,                 request.DeleteContents,                 request.MoveContentsToParent,                 request.MoveContentsToRoot            );            var result = await mediator.Send(command);            if (result.IsSuccess)            {                return Json(new {                     success = true,                     message = "Folder deleted successfully!"                 });            }                    return Json(new {                 success = false,                 message = result.Errors.FirstOrDefault() ?? "Failed to delete folder."             });        }        catch (Exception ex)        {            return Json(new {                 success = false,                 message = "An unexpected error occurred. Please try again."             });        }    }}