using Ardalis.Result;using Microsoft.AspNetCore.Mvc;namespace KCloud.Web.Controllers;public abstract class BaseController : Controller{    protected IActionResult HandleResult<T>(Result<T> result, string? successMessage = null)    {        if (result.IsSuccess)        {            return Ok(new            {                success = true,                message = successMessage ?? "Operation completed successfully",                data = result.Value            });        }        return CreateErrorResponse(result.Status, result.Errors, result.ValidationErrors);    }    protected IActionResult HandleResult(Result result, string? successMessage = null)    {        if (result.IsSuccess)        {            return Ok(new            {                success = true,                message = successMessage ?? "Operation completed successfully"            });        }        return CreateErrorResponse(result.Status, result.Errors, result.ValidationErrors);    }    private IActionResult CreateErrorResponse(ResultStatus status, IEnumerable<string> errors, IEnumerable<ValidationError>? validationErrors)    {        if (status == ResultStatus.Invalid)        {            return BadRequest(new            {                success = false,                message = string.Join(", ", errors),                errors = errors.ToArray(),                validationErrors = validationErrors?.Select(ve => new                 {                     field = ve.Identifier,                     message = ve.ErrorMessage                 }).ToArray() ?? Array.Empty<object>()            });        }        return status switch        {            ResultStatus.NotFound => NotFound(new { success = false, message = string.Join(", ", errors) }),            ResultStatus.Unauthorized => Unauthorized(new { success = false, message = "Unauthorized" }),            ResultStatus.Forbidden => Forbid(),            ResultStatus.Conflict => Conflict(new { success = false, message = string.Join(", ", errors) }),            _ => BadRequest(new { success = false, message = string.Join(", ", errors) })        };    }}