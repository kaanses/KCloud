using Ardalis.Result;using Microsoft.AspNetCore.Mvc;namespace KCloud.Web.Controllers;public abstract class BaseController : Controller{    protected IActionResult HandleResult<T>(Result<T> result, string? successMessage = null)    {        if (result.IsSuccess)        {            return Ok(new            {                success = true,                message = successMessage ?? "Operation completed successfully",                data = result.Value            });        }        return CreateErrorResponse(result.Status, result.Errors, result.ValidationErrors);    }    protected IActionResult HandleResult(Result result, string? successMessage = null)    {        if (result.IsSuccess)        {            return Ok(new            {                success = true,                message = successMessage ?? "Operation completed successfully"            });        }        return CreateErrorResponse(result.Status, result.Errors, result.ValidationErrors);    }    private IActionResult CreateErrorResponse(ResultStatus status, IEnumerable<string> errors, IEnumerable<ValidationError>? validationErrors)    {        // ADD THIS DEBUGGING        var logger = HttpContext.RequestServices.GetService<ILogger<BaseController>>();        logger?.LogWarning("CreateErrorResponse - Status: {Status}", status);        logger?.LogWarning("CreateErrorResponse - Errors: {Errors}", string.Join(", ", errors ?? Array.Empty<string>()));        logger?.LogWarning("CreateErrorResponse - ValidationErrors: {ValidationErrors}",             string.Join(", ", validationErrors?.Select(v => $"{v.Identifier}: {v.ErrorMessage}") ?? Array.Empty<string>()));        if (status == ResultStatus.Invalid)        {            // Check if we have validation errors            if (validationErrors?.Any() == true)            {                var response = new                {                    success = false,                    message = "Validation failed",                    errors = Array.Empty<string>(),                    validationErrors = validationErrors.Select(ve => new                     {                         field = ve.Identifier,                         message = ve.ErrorMessage                     }).ToArray()                };                logger?.LogWarning("Returning validation error response: {Response}", System.Text.Json.JsonSerializer.Serialize(response));                return BadRequest(response);            }                        // If no validation errors but we have general errors            if (errors?.Any() == true)            {                var response = new                {                    success = false,                    message = "Upload failed",                    errors = errors.ToArray(),                    validationErrors = Array.Empty<object>()                };                logger?.LogWarning("Returning general error response: {Response}", System.Text.Json.JsonSerializer.Serialize(response));                return BadRequest(response);            }                        // Fallback            var fallbackResponse = new            {                success = false,                message = "Validation failed",                errors = Array.Empty<string>(),                validationErrors = Array.Empty<object>()            };            logger?.LogWarning("Returning fallback response: {Response}", System.Text.Json.JsonSerializer.Serialize(fallbackResponse));            return BadRequest(fallbackResponse);        }        // Handle other status types (unchanged)        return status switch        {            ResultStatus.NotFound => NotFound(new { success = false, message = string.Join(", ", errors) }),            ResultStatus.Unauthorized => Unauthorized(new { success = false, message = "Unauthorized" }),            ResultStatus.Forbidden => Forbid(),            ResultStatus.Conflict => Conflict(new { success = false, message = string.Join(", ", errors) }),            _ => BadRequest(new { success = false, message = string.Join(", ", errors) })        };    }}