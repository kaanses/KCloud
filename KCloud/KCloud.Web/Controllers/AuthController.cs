using KCloud.Web.Features.Authentication.Commands;using KCloud.Web.Helpers;using KCloud.Web.Models.ViewModel;using MediatR;using Microsoft.AspNetCore.Authentication;using Microsoft.AspNetCore.Authentication.Cookies;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;namespace KCloud.Web.Controllers;public class AuthController(IMediator mediator, ILogger<AuthController> logger) : Controller{    private readonly ILogger<AuthController> _logger = logger;    [HttpGet("login")]    public IActionResult Login(string? returnUrl = null)    {        if (User.Identity?.IsAuthenticated == true)        {            if (!string.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))            {                return LocalRedirect(returnUrl);            }            return RedirectToAction("Index", "Home");        }        ViewData["ReturnUrl"] = returnUrl;        return View(new LoginViewModel());    }    [HttpPost("login")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Login(LoginViewModel model, string? returnUrl = null)    {        ViewData["ReturnUrl"] = returnUrl;        if (!ModelState.IsValid)            return View(model);        var result = await mediator.Send(new LoginCommand(model.Email, model.Password));        if (!result.IsSuccess)        {            ErrorHelper.AddToModelState(result, ModelState);            return View(model);        }        return !string.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl)            ? LocalRedirect(returnUrl)            : RedirectToAction("Index", "Home");    }    [HttpGet("register")]    public IActionResult Register(string? returnUrl = null)    {        if (User.Identity?.IsAuthenticated == true)        {            if (!string.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl))            {                return LocalRedirect(returnUrl);            }            return RedirectToAction("Index", "Home");        }        ViewData["ReturnUrl"] = returnUrl;        return View(new RegisterViewModel());    }    [HttpPost("register")]    [ValidateAntiForgeryToken]    public async Task<IActionResult> Register(RegisterViewModel model, string? returnUrl = null)    {        ViewData["ReturnUrl"] = returnUrl;        if (!ModelState.IsValid)            return View(model);        var result = await mediator.Send(new RegisterCommand(model.Email, model.Password, model.Username));        if (!result.IsSuccess)        {            ErrorHelper.AddToModelState(result, ModelState);            return View(model);        }                    return !string.IsNullOrWhiteSpace(returnUrl) && Url.IsLocalUrl(returnUrl)            ? LocalRedirect(returnUrl)            : RedirectToAction("Index", "Home");    }    [HttpPost("logout")]    public async Task<IActionResult> Logout()    {        var command = new LogoutCommand();        var result = await mediator.Send(command);                if (result.IsSuccess)        {            return RedirectToAction("Index", "Home");        }                return BadRequest("Logout failed");    }}