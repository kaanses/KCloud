using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Files.QueryHandlers;public class GetFileByPublicLinkQueryHandler(    IHttpClientFactory httpClientFactory,    ILogger<GetFileByPublicLinkQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<GetFileByPublicLinkQuery, Result<FileMetadataDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {        PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result<FileMetadataDTO>> Handle(GetFileByPublicLinkQuery request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGatewayNoAuth");            var endpoint = $"/file/public/{Uri.EscapeDataString(request.PublicToken)}";            logger.LogDebug("Requesting public file via token: {Token}", request.PublicToken);            var response = await httpClient.GetAsync(endpoint, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                logger.LogDebug("Successfully retrieved public file metadata");                return await parseServerResponseService.ParseSuccessResponse<FileMetadataDTO>(responseContent);            }            logger.LogWarning("Public file access failed with status {StatusCode}", response.StatusCode);            var errorResult = await parseServerResponseService.ParseErrorResponse<FileMetadataDTO>(                responseContent, (int)response.StatusCode);            return Result.Error(string.Join(", ", errorResult.Errors));        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during public file access for token: {Token}", request.PublicToken);            return Result.Error("Unable to connect to server");        }    }}