using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.QueryHandlers;public class GetUserFilesQueryHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<GetUserFilesQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<GetUserFilesQuery, Result<UserFilesResponseDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };    public async Task<Result<UserFilesResponseDTO>> Handle(GetUserFilesQuery request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        var jwtToken = httpContextAccessor.HttpContext?.User?.FindFirst("jwt_token")?.Value;            if (!string.IsNullOrEmpty(jwtToken))            {                httpClient.DefaultRequestHeaders.Authorization =                     new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);            }            else            {                return Result<UserFilesResponseDTO>.Unauthorized();            }                        var queryParams = new List<string>();                        if (request.FolderId.HasValue)                queryParams.Add($"folderId={request.FolderId.Value}");                        if (!string.IsNullOrWhiteSpace(request.SearchTerm))                queryParams.Add($"searchTerm={Uri.EscapeDataString(request.SearchTerm)}");                        if (request.IsSharedWithMeFolder)                queryParams.Add("isSharedWithMeFolder=true");            var queryString = queryParams.Count > 0 ? "?" + string.Join("&", queryParams) : "";            var endpoint = $"/file/get-files{queryString}";            var response = await httpClient.GetAsync(endpoint, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<UserFilesResponseDTO>(responseContent);            }                        return await parseServerResponseService.ParseErrorResponse<UserFilesResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error retrieving user files");            return Result<UserFilesResponseDTO>.Error("Unable to connect to server");        }    }}