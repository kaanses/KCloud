using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.QueryHandlers;public class GetFileQueryHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<GetFileQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<GetFileQuery, Result<Stream>>{    public async Task<Result<Stream>> Handle(GetFileQuery request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        var response = await httpClient.GetAsync($"/storage/download/{request.FileId}", cancellationToken);                        if (response.IsSuccessStatusCode)            {                var fileStream = await response.Content.ReadAsStreamAsync(cancellationToken);                return Result<Stream>.Success(fileStream);            }                        var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            return await parseServerResponseService.ParseErrorResponse<Stream>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error downloading file stream for {FileId}", request.FileId);            return Result<Stream>.Error("Unable to connect to server");        }    }}