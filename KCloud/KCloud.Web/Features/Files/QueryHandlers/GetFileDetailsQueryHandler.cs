using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.QueryHandlers;public class GetFileMetadataQueryHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<GetFileMetadataQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<GetFileMetadataQuery, Result<FileMetadataDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };   public async Task<Result<FileMetadataDTO>> Handle(GetFileMetadataQuery request, CancellationToken cancellationToken)   {       try       {           var httpClient = httpClientFactory.CreateClient("KCloudGateway");           var json = JsonSerializer.Serialize(request, _jsonOptions);           var content = new StringContent(json, Encoding.UTF8, "application/json");           var response = await httpClient.PostAsync("/file/details", content, cancellationToken);           var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);                      if (response.IsSuccessStatusCode)           {               return await parseServerResponseService.ParseSuccessResponse<FileMetadataDTO>(responseContent);           }           return await parseServerResponseService.ParseErrorResponse<FileMetadataDTO>(               responseContent,                (int)response.StatusCode);       }       catch (Exception ex)       {           logger.LogError(ex, "Network error getting file metadata for {FileId}", request.FileId);           return Result<FileMetadataDTO>.Error("Unable to connect to server");       }   }}