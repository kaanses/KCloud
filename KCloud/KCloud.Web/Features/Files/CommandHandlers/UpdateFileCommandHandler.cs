using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;using System.Text.Json;using System.Text;namespace KCloud.Web.Features.Files.CommandHandlers;public class UpdateFileCommandHandler : IRequestHandler<UpdateFileCommand, Result<FileMetadataDTO>>{    private readonly IHttpClientFactory _httpClientFactory;    private readonly IParseServerResponseService _parseServerResponseService;    private readonly JsonSerializerOptions _jsonOptions;    public UpdateFileCommandHandler(        IHttpClientFactory httpClientFactory,        IParseServerResponseService parseServerResponseService)    {        _httpClientFactory = httpClientFactory;        _parseServerResponseService = parseServerResponseService;        _jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };    }    public async Task<Result<FileMetadataDTO>> Handle(UpdateFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = _httpClientFactory.CreateClient("KCloudGateway");                        var updateData = new            {                id = request.Id,                fileName = request.FileName,                folderId = request.FolderId            };            var json = JsonSerializer.Serialize(updateData, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PutAsync("/file/update-file", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await _parseServerResponseService.ParseSuccessResponse<FileMetadataDTO>(responseContent);            }            return await _parseServerResponseService.ParseErrorResponse<FileMetadataDTO>(                responseContent, (int)response.StatusCode);        }        catch (Exception ex)        {            return Result<FileMetadataDTO>.Error("Unable to connect to server");        }    }}