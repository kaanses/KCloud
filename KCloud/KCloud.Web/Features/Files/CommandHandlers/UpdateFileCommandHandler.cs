using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;using System.Text.Json;using System.Text;namespace KCloud.Web.Features.Files.CommandHandlers;public class UpdateFileCommandHandler(    IHttpClientFactory httpClientFactory,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<UpdateFileCommand, Result<FileMetadataDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };    public async Task<Result<FileMetadataDTO>> Handle(UpdateFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");            var requestBody = new { Id = request.Id ,                                     FileName = request.FileName,                                     FolderId = request.FolderId                                                };            var json = JsonSerializer.Serialize(requestBody, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PutAsync("/file/update-file", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<FileMetadataDTO>(responseContent);            }            return await parseServerResponseService.ParseErrorResponse<FileMetadataDTO>(                responseContent, (int)response.StatusCode);        }        catch (Exception ex)        {            return Result<FileMetadataDTO>.Error("Unable to connect to server");        }    }}