using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class RestoreFileCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<RestoreFileCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<RestoreFileCommand, Result>{    private readonly JsonSerializerOptions _jsonOptions = new()    {        PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result> Handle(RestoreFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");            logger.LogInformation("Restoring file(s) with FileId: {FileId}, RestoreAll: {RestoreAll}",                 request.Id, request.RestoreAll);                                    var response = await httpClient.PostAsync($"/file/restore/{request.Id.Value}?restoreAll={request.RestoreAll}", null, cancellationToken);                        var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                logger.LogInformation("Successfully restored file(s) via backend");                return Result.Success();            }            logger.LogError("Backend restore failed with status {StatusCode}: {Response}",                 response.StatusCode, responseContent);            try            {                var errorResult = await parseServerResponseService.ParseErrorResponse<object>(                    responseContent, (int)response.StatusCode);                return Result.Error(string.Join(", ", errorResult.Errors));            }            catch            {                return Result.Error($"Restore failed with status: {response.StatusCode}");            }        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during file restore for FileId: {FileId}", request.Id);            return Result.Error("Unable to connect to server");        }    }}