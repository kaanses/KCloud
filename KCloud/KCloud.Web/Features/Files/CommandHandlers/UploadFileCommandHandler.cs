using System.Net;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using MediatR;using System.Text.Json;namespace KCloud.Web.Features.Files.CommandHandlers;public class UploadFileCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<UploadFileCommandHandler> logger)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        using var content = new MultipartFormDataContent();                        var fileContent = new StreamContent(request.File.OpenReadStream());            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(request.File.ContentType);            content.Add(fileContent, "file", request.File.FileName);                        if (request.FolderId.HasValue)            {                content.Add(new StringContent(request.FolderId.Value.ToString()), "folderId");            }                            var response = await httpClient.PostAsync("/storage/upload", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                var uploadResult = JsonSerializer.Deserialize<UploadResponseDTO>(responseContent,                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });                return Result<UploadResponseDTO>.Success(uploadResult);            }            else            {                try                {                    var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);                                        // SIMPLE FIX: Just get ONE error message, don't combine multiple sources                                        // Priority 1: validationErrors (most specific)                    if (errorResponse.TryGetProperty("validationErrors", out var validationElement) &&                         validationElement.ValueKind == JsonValueKind.Array &&                         validationElement.GetArrayLength() > 0)                    {                        var firstValidation = validationElement.EnumerateArray().FirstOrDefault();                        if (firstValidation.ValueKind == JsonValueKind.Object &&                             firstValidation.TryGetProperty("message", out var validationMessage))                        {                            var message = validationMessage.GetString();                            if (!string.IsNullOrEmpty(message))                            {                                return Result<UploadResponseDTO>.Error(message);                            }                        }                    }                                        // Priority 2: errors array                    if (errorResponse.TryGetProperty("errors", out var errorsElement) &&                         errorsElement.ValueKind == JsonValueKind.Array &&                         errorsElement.GetArrayLength() > 0)                    {                        var firstError = errorsElement.EnumerateArray().FirstOrDefault();                        if (firstError.ValueKind == JsonValueKind.String)                        {                            var errorString = firstError.GetString();                            if (!string.IsNullOrEmpty(errorString))                            {                                return Result<UploadResponseDTO>.Error(errorString);                            }                        }                    }                                        // Priority 3: message                    if (errorResponse.TryGetProperty("message", out var messageElement))                    {                        var messageValue = messageElement.GetString();                        if (!string.IsNullOrEmpty(messageValue) && messageValue != "Upload failed")                        {                            return Result<UploadResponseDTO>.Error(messageValue);                        }                    }                                        // Fallback                    return Result<UploadResponseDTO>.Error("Upload failed");                }                catch (JsonException)                {                    return Result<UploadResponseDTO>.Error($"Upload failed with status {response.StatusCode}");                }            }        }        catch (HttpRequestException ex)        {            logger.LogError(ex, "HTTP error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Unable to connect to storage service");        }        catch (Exception ex)        {            logger.LogError(ex, "Unexpected error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Network error during upload");        }    }}