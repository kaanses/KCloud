using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class UploadFileCommandHandler(    IHttpClientFactory httpClientFactory,    IAuthTokenService tokenService,  // ðŸ‘ˆ Use your token service    ILogger<UploadFileCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        using var content = new MultipartFormDataContent();                        var fileContent = new StreamContent(request.File.OpenReadStream());            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(request.File.ContentType);            content.Add(fileContent, "file", request.File.FileName);                        if (request.FolderId.HasValue)            {                content.Add(new StringContent(request.FolderId.Value.ToString()), "folderId");            }                            var response = await httpClient.PostAsync("/storage/upload", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<UploadResponseDTO>(responseContent);            }                        return await parseServerResponseService.ParseErrorResponse<UploadResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Unable to connect to server");        }    }}