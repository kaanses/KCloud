using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class UploadFileCommandHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<UploadFileCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };   public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)   {       try       {           var httpClient = httpClientFactory.CreateClient("KCloudGateway");                      var jwtToken = httpContextAccessor.HttpContext?.User?.FindFirst("jwt_token")?.Value;           if (!string.IsNullOrEmpty(jwtToken))           {               httpClient.DefaultRequestHeaders.Authorization =                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);           }           else           {               return Result<UploadResponseDTO>.Unauthorized();           }                      using var content = new MultipartFormDataContent();                      var fileContent = new StreamContent(request.File.OpenReadStream());           fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(request.File.ContentType);           content.Add(fileContent, "file", request.File.FileName);                      if (request.FolderId.HasValue)           {               content.Add(new StringContent(request.FolderId.Value.ToString()), "folderId");           }           var response = await httpClient.PostAsync("/storage/upload", content, cancellationToken);           var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);           if (response.IsSuccessStatusCode)           {               return await parseServerResponseService.ParseSuccessResponse<UploadResponseDTO>(responseContent);           }                      return await parseServerResponseService.ParseErrorResponse<UploadResponseDTO>(               responseContent,                (int)response.StatusCode);       }       catch (Exception ex)       {           logger.LogError(ex, "Network error during file upload for {FileName}", request.File.FileName);           return Result<UploadResponseDTO>.Error("Unable to connect to server");       }   }}