using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using MediatR;using System.Text.Json;namespace KCloud.Web.Features.Files.CommandHandlers;public class UploadFileCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<UploadFileCommandHandler> logger)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        using var content = new MultipartFormDataContent();                        var fileContent = new StreamContent(request.File.OpenReadStream());            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(request.File.ContentType);            content.Add(fileContent, "file", request.File.FileName);                        if (request.FolderId.HasValue)            {                content.Add(new StringContent(request.FolderId.Value.ToString()), "folderId");            }                            var response = await httpClient.PostAsync("/storage/upload", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                // Success - parse the data directly                var uploadResult = JsonSerializer.Deserialize<UploadResponseDTO>(responseContent,                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });                return Result<UploadResponseDTO>.Success(uploadResult);            }            else            {                // Error - try to get error message                try                {                    var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);                                        // Try to get error message from different possible fields                    string errorMessage = "Upload failed";                                        if (errorResponse.TryGetProperty("message", out var messageElement))                    {                        errorMessage = messageElement.GetString() ?? errorMessage;                    }                    else if (errorResponse.TryGetProperty("errors", out var errorsElement) && errorsElement.ValueKind == JsonValueKind.Array)                    {                        var errors = errorsElement.EnumerateArray()                            .Where(e => e.ValueKind == JsonValueKind.String)                            .Select(e => e.GetString())                            .Where(s => !string.IsNullOrEmpty(s))                            .ToList();                                                if (errors.Any())                        {                            errorMessage = string.Join(", ", errors);                        }                    }                                        return Result<UploadResponseDTO>.Error(errorMessage);                }                catch                {                    // If we can't parse the error, use a generic message                    return Result<UploadResponseDTO>.Error($"Upload failed with status {response.StatusCode}");                }            }        }        catch (Exception ex)        {            logger.LogError(ex, "Error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Network error during upload");        }    }}