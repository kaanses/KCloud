using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using MediatR;using System.Text.Json;namespace KCloud.Web.Features.Files.CommandHandlers;public class UploadFileCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<UploadFileCommandHandler> logger)    : IRequestHandler<UploadFileCommand, Result<UploadResponseDTO>>{    public async Task<Result<UploadResponseDTO>> Handle(UploadFileCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        using var content = new MultipartFormDataContent();                        var fileContent = new StreamContent(request.File.OpenReadStream());            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(request.File.ContentType);            content.Add(fileContent, "file", request.File.FileName);                        if (request.FolderId.HasValue)            {                content.Add(new StringContent(request.FolderId.Value.ToString()), "folderId");            }                            var response = await httpClient.PostAsync("/storage/upload", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                // Success - parse the data directly                var uploadResult = JsonSerializer.Deserialize<UploadResponseDTO>(responseContent,                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });                return Result<UploadResponseDTO>.Success(uploadResult);            }            else            {                // Error - extract error message from storage API response                try                {                    var errorResponse = JsonSerializer.Deserialize<JsonElement>(responseContent);                                        string errorMessage = "Upload failed";                                        // Priority 1: Extract from errors array (most specific)                    if (errorResponse.TryGetProperty("errors", out var errorsElement) && errorsElement.ValueKind == JsonValueKind.Array)                    {                        var errors = errorsElement.EnumerateArray()                            .Where(e => e.ValueKind == JsonValueKind.String)                            .Select(e => e.GetString())                            .Where(s => !string.IsNullOrEmpty(s))                            .ToList();                                                if (errors.Any())                        {                            errorMessage = string.Join(", ", errors);                        }                    }                    // Priority 2: Extract from validation errors                    else if (errorResponse.TryGetProperty("validationErrors", out var validationElement) && validationElement.ValueKind == JsonValueKind.Array)                    {                        var validationErrors = new List<string>();                        foreach (var validationError in validationElement.EnumerateArray())                        {                            if (validationError.TryGetProperty("message", out var validationMessage))                            {                                var msg = validationMessage.GetString();                                if (!string.IsNullOrEmpty(msg))                                {                                    validationErrors.Add(msg);                                }                            }                        }                                                if (validationErrors.Any())                        {                            errorMessage = string.Join(", ", validationErrors);                        }                    }                    // Priority 3: Extract from message field (only if not generic)                    else if (errorResponse.TryGetProperty("message", out var messageElement))                    {                        var messageValue = messageElement.GetString();                        if (!string.IsNullOrEmpty(messageValue) && messageValue != "Upload failed")                        {                            errorMessage = messageValue;                        }                    }                                        return Result<UploadResponseDTO>.Error(errorMessage);                }                catch (JsonException)                {                    // If we can't parse the error response, use status code                    return Result<UploadResponseDTO>.Error($"Upload failed with status {response.StatusCode}");                }            }        }        catch (HttpRequestException ex)        {            logger.LogError(ex, "HTTP error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Unable to connect to storage service");        }        catch (Exception ex)        {            logger.LogError(ex, "Unexpected error during file upload for {FileName}", request.File.FileName);            return Result<UploadResponseDTO>.Error("Network error during upload");        }    }}