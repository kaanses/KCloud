// CreateFileMetadataCommandHandler.cs - Clean version with proper error handlingusing System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class CreateFileMetadataCommandHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<CreateFileMetadataCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<CreateFileMetadataCommand, Result<FileMetadataDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {         PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result<FileMetadataDTO>> Handle(CreateFileMetadataCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        var jwtToken = httpContextAccessor.HttpContext?.User?.FindFirst("jwt_token")?.Value;            if (!string.IsNullOrEmpty(jwtToken))            {                httpClient.DefaultRequestHeaders.Authorization =                     new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);            }                        var metadata = new            {                id = request.Id,                fileName = request.FileName,                contentType = request.ContentType,                fileSizeBytes = request.FileSizeBytes,                folderId = request.FolderId,                storagePath = request.StoragePath,                uploadedAt = request.UploadedAt            };            var json = JsonSerializer.Serialize(metadata, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");                        var response = await httpClient.PostAsync("/file/create-file", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<FileMetadataDTO>(responseContent);            }                        return await parseServerResponseService.ParseErrorResponse<FileMetadataDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during file metadata creation for {FileName}", request.FileName);            return Result<FileMetadataDTO>.Error("Unable to connect to server");        }    }}