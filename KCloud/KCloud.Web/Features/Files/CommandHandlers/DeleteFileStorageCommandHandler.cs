using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Interfaces;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class DeleteFileStorageCommandHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<DeleteFileStorageCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<DeleteFileStorageCommand, Result>{    public async Task<Result> Handle(DeleteFileStorageCommand request, CancellationToken cancellationToken)   {       try       {           var httpClient = httpClientFactory.CreateClient("KCloudGateway");                      var jwtToken = httpContextAccessor.HttpContext?.User?.FindFirst("jwt_token")?.Value;           if (!string.IsNullOrEmpty(jwtToken))           {               httpClient.DefaultRequestHeaders.Authorization =                    new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);           }           else           {               return Result.Unauthorized();           }           var response = await httpClient.DeleteAsync($"/storage/delete/{request.FileId}", cancellationToken);           var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);                      if (response.IsSuccessStatusCode)           {               return Result.Success();           }           var errorResult = await parseServerResponseService.ParseErrorResponse<object>(               responseContent,                (int)response.StatusCode);                      return Result.Error(string.Join(", ", errorResult.Errors));       }       catch (Exception ex)       {           logger.LogError(ex, "Network error during file storage deletion for {FileId}", request.FileId);           return Result.Error("Unable to connect to server");       }   }}