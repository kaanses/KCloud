using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Files.CommandHandlers;public class HardDeleteFileMetadataCommandHandler(    IHttpClientFactory httpClientFactory,    IHttpContextAccessor httpContextAccessor,    ILogger<HardDeleteFileMetadataCommandHandler> logger,    IParseServerResponseService parseServerResponseService,    IAuthTokenService tokenService)    : IRequestHandler<HardDeleteFileMetadataCommand, Result<HardDeleteResultDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {         PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };   public async Task<Result<HardDeleteResultDTO>> Handle(HardDeleteFileMetadataCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                    var json = JsonSerializer.Serialize(request, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "/file/hard-delete-file")            {                Content = content            };            var response = await httpClient.SendAsync(requestMessage, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                logger.LogInformation("Successfully hard deleted file metadata");                                if (string.IsNullOrWhiteSpace(responseContent))                {                    logger.LogWarning("Backend returned empty response for hard delete");                    return Result.Success(new HardDeleteResultDTO(new List<Guid>()));                }                try                {                    var result = JsonSerializer.Deserialize<HardDeleteResultDTO>(responseContent, _jsonOptions);                    return Result.Success(result ?? new HardDeleteResultDTO(new List<Guid>()));                }                catch (JsonException ex)                {                    logger.LogError(ex, "Failed to parse hard delete response: {ResponseContent}", responseContent);                    return Result.Success(new HardDeleteResultDTO(new List<Guid>()));                }            }                    logger.LogError("Hard delete failed with status {StatusCode}: {Response}", response.StatusCode, responseContent);            return Result.Error($"Hard delete failed: {response.StatusCode}");        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during file metadata hard deletion");            return Result.Error("Unable to connect to server");        }    }}