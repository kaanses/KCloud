using Ardalis.Result;using KCloud.Web.Features.Files.CommandHandlers;using KCloud.Web.Features.Files.Commands;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class EmptyTrashCommandHandler(    IMediator mediator,     ILogger<EmptyTrashCommandHandler> logger)    : IRequestHandler<EmptyTrashCommand, Result>{    public async Task<Result> Handle(EmptyTrashCommand request, CancellationToken cancellationToken)    {        try        {            logger.LogInformation("Starting empty trash orchestration");                                  var hardDeleteMetadataCommand = new HardDeleteFileMetadataCommand(null, true);            var metadataResult = await mediator.Send(hardDeleteMetadataCommand, cancellationToken);            if (!metadataResult.IsSuccess)            {                logger.LogError("Metadata hard delete failed: {Errors}", string.Join(", ", metadataResult.Errors));                return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Failed to delete metadata");            }                       var deletedFileIds = metadataResult.Value?.DeletedFileIds ?? new List<Guid>();                        if (deletedFileIds.Any())            {                logger.LogInformation("Deleting {Count} files from storage", deletedFileIds.Count);                                             var failedDeletions = new List<Guid>();                                foreach (var fileId in deletedFileIds)                {                    var storageCommand = new DeleteFileStorageCommand(fileId);                    var storageResult = await mediator.Send(storageCommand, cancellationToken);                                        if (!storageResult.IsSuccess)                    {                        logger.LogWarning("Failed to delete file {FileId} from storage: {Error}",                             fileId, storageResult.Errors.FirstOrDefault());                        failedDeletions.Add(fileId);                    }                }                                if (failedDeletions.Any())                {                    logger.LogWarning("Some files failed to delete from storage: {FailedCount}/{TotalCount}",                         failedDeletions.Count, deletedFileIds.Count);                }                                logger.LogInformation("Storage deletion completed. Success: {SuccessCount}, Failed: {FailedCount}",                     deletedFileIds.Count - failedDeletions.Count, failedDeletions.Count);            }            else            {                logger.LogInformation("No files found in trash to delete");            }            logger.LogInformation("Empty trash orchestration completed");            return Result.Success();        }        catch (Exception ex)        {            logger.LogError(ex, "Error in empty trash orchestration");            return Result.Error("Unable to complete trash emptying");        }    }}