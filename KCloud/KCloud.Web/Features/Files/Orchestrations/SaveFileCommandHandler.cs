using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class SaveFileCommandHandler(IMediator mediator, ILogger<SaveFileCommandHandler> logger)    : IRequestHandler<SaveFileCommand, Result<FileMetadataDTO>>{    public async Task<Result<FileMetadataDTO>> Handle(SaveFileCommand request, CancellationToken cancellationToken)   {       try       {           logger.LogInformation("Starting file save process for {FileName}", request.File.FileName);                      var uploadCommand = new UploadFileCommand(request.File, request.FolderId);           var uploadResult = await mediator.Send(uploadCommand, cancellationToken);           if (!uploadResult.IsSuccess)           {               logger.LogError("Physical file upload failed: {Errors}", string.Join(", ", uploadResult.Errors));               return Result<FileMetadataDTO>.Error(string.Join(", ", uploadResult.Errors));           }           var uploadResponse = uploadResult.Value;           logger.LogInformation("Physical file uploaded successfully with ID {FileId}", uploadResponse.Id);                      var metadataCommand = new CreateFileMetadataCommand(               uploadResponse.Id,               uploadResponse.FileName,               uploadResponse.ContentType,               uploadResponse.FileSizeBytes,               uploadResponse.FolderId,               uploadResponse.StoragePath,               uploadResponse.UploadedAt           );           var metadataResult = await mediator.Send(metadataCommand, cancellationToken);           if (!metadataResult.IsSuccess)           {               logger.LogError("Metadata creation failed for file {FileId}: {Errors}",                    uploadResponse.Id, string.Join(", ", metadataResult.Errors));                              var deleteCommand = new DeleteFileStorageCommand(uploadResponse.Id);                await mediator.Send(deleteCommand, cancellationToken);               return Result<FileMetadataDTO>.Error(string.Join(", ", metadataResult.Errors));           }           logger.LogInformation("File save process completed successfully for {FileName}", request.File.FileName);           return metadataResult;       }       catch (Exception ex)       {           logger.LogError(ex, "Error during file save process for {FileName}", request.File.FileName);           return Result<FileMetadataDTO>.Error("Unable to connect to server");       }   }}