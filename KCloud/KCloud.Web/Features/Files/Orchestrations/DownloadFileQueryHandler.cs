using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class DownloadFileQueryHandler : IRequestHandler<DownloadFileQuery, Result<FileDownloadResponseDTO>>{    private readonly IMediator _mediator;    private readonly ILogger<DownloadFileQueryHandler> _logger;    public DownloadFileQueryHandler(IMediator mediator, ILogger<DownloadFileQueryHandler> logger)    {        _mediator = mediator;        _logger = logger;    }    public async Task<Result<FileDownloadResponseDTO>> Handle(DownloadFileQuery request, CancellationToken cancellationToken)    {        try        {            _logger.LogInformation("Starting download orchestration for {FileId} is public access : ", request.FileId);                        var metadataQuery = new GetFileDetailsQuery(request.FileId, request.IsPublicAccess);            var metadataResult = await _mediator.Send(metadataQuery, cancellationToken);            if (!metadataResult.IsSuccess)            {                _logger.LogError("File metadata fetch failed: {Errors}", string.Join(", ", metadataResult.Errors));                return Result<FileDownloadResponseDTO>.Error(string.Join(", ", metadataResult.Errors));            }                        var fileQuery = new GetFileQuery(metadataResult.Value.Id, metadataResult.Value.UserId, request.IsPublicAccess);            var fileResult = await _mediator.Send(fileQuery, cancellationToken);            if (!fileResult.IsSuccess)            {                _logger.LogError("File download failed: {Errors}", string.Join(", ", fileResult.Errors));                return Result<FileDownloadResponseDTO>.Error(string.Join(", ", fileResult.Errors));            }                        var response = new FileDownloadResponseDTO            {                FileStream = fileResult.Value,                 ContentType = metadataResult.Value.ContentType,                 FileName = metadataResult.Value.FileName             };            _logger.LogInformation("Download orchestration completed for {FileName} ({FileId})",                 response.FileName, request.FileId);            return Result<FileDownloadResponseDTO>.Success(response);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error in download orchestration for {FileId}", request.FileId);            return Result<FileDownloadResponseDTO>.Error("Unable to connect to server");        }    }}