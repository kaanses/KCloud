using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class DeleteFileCommandHandler(IMediator mediator, ILogger<DeleteFileCommandHandler> logger)   : IRequestHandler<DeleteFileCommand, Result>{   public async Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken){    try    {        logger.LogInformation("Starting delete orchestration for {Id} - HardDelete: {HardDelete}",             request.Id, request.HardDelete);                if (request.HardDelete)        {            // Hard delete: Remove from metadata database permanently AND delete physical file            var hardDeleteMetadataCommand = new HardDeleteFileMetadataCommand(request.Id, false); // Single file            var metadataResult = await mediator.Send(hardDeleteMetadataCommand, cancellationToken);            if (!metadataResult.IsSuccess)            {                logger.LogError("Hard delete metadata failed: {Errors}", string.Join(", ", metadataResult.Errors));                return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Hard delete metadata failed");            }            // Delete physical file from storage            var storageCommand = new DeleteFileStorageCommand(request.Id);            var storageResult = await mediator.Send(storageCommand, cancellationToken);            if (!storageResult.IsSuccess)            {                logger.LogError("File storage deletion failed: {Errors}", string.Join(", ", storageResult.Errors));                return Result.Error(storageResult.Errors.FirstOrDefault() ?? "Storage deletion failed");            }            logger.LogInformation("Hard delete orchestration completed for {Id}", request.Id);        }        else        {            // Soft delete: Just mark as deleted in metadata (move to trash)            var softDeleteCommand = new DeleteFileMetadataCommand(request.Id); // This should only soft delete            var metadataResult = await mediator.Send(softDeleteCommand, cancellationToken);            if (!metadataResult.IsSuccess)            {                logger.LogError("Soft delete (move to trash) failed: {Errors}", string.Join(", ", metadataResult.Errors));                return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Failed to move file to trash");            }            logger.LogInformation("Soft delete (move to trash) completed for {Id}", request.Id);        }                return Result.Success();    }    catch (Exception ex)    {        logger.LogError(ex, "Error in delete orchestration for {FileId}", request.Id);        return Result.Error("Unable to connect to server");    }}}