using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class DeleteFileCommandHandler(IMediator mediator, ILogger<DeleteFileCommandHandler> logger)   : IRequestHandler<DeleteFileCommand, Result>{   public async Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken)   {       try       {           logger.LogInformation("Starting delete orchestration for {Id}", request.Id);                      var metadataCommand = new DeleteFileMetadataCommand(request.Id, request.HardDelete);           var metadataResult = await mediator.Send(metadataCommand, cancellationToken);           if (!metadataResult.IsSuccess)           {               logger.LogError("File metadata deletion failed: {Errors}", string.Join(", ", metadataResult.Errors));               return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Metadata deletion failed");           }                      if (request.HardDelete)           {               var storageCommand = new DeleteFileStorageCommand(request.Id);               var storageResult = await mediator.Send(storageCommand, cancellationToken);               if (!storageResult.IsSuccess)               {                   logger.LogError("File storage deletion failed: {Errors}", string.Join(", ", storageResult.Errors));                   return Result.Error(storageResult.Errors.FirstOrDefault() ?? "Storage deletion failed");               }           }           logger.LogInformation("Delete orchestration completed for {Id}", request.Id);           return Result.Success();       }       catch (Exception ex)       {           logger.LogError(ex, "Error in delete orchestration for {FileId}", request.Id);           return Result.Error("Unable to connect to server");       }   }}