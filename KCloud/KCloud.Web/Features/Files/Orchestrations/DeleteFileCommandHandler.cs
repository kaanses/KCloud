using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using MediatR;namespace KCloud.Web.Features.Files.Orchestrations;public class DeleteFileCommandHandler(IMediator mediator, ILogger<DeleteFileCommandHandler> logger)   : IRequestHandler<DeleteFileCommand, Result>{  public async Task<Result> Handle(DeleteFileCommand request, CancellationToken cancellationToken)    {        try        {            logger.LogInformation("Starting delete orchestration for {Id}", request.Id);                        if (request.HardDelete)            {                var hardDeleteMetadataCommand = new HardDeleteFileMetadataCommand(request.Id);                var metadataResult = await mediator.Send(hardDeleteMetadataCommand, cancellationToken);                                if (!metadataResult.IsSuccess)                {                    logger.LogError("Hard delete metadata failed: {Errors}", string.Join(", ", metadataResult.Errors));                    return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Hard delete metadata failed");                }                                var storageCommand = new DeleteFileStorageCommand(request.Id);                var storageResult = await mediator.Send(storageCommand, cancellationToken);                if (!storageResult.IsSuccess)                {                    logger.LogError("File storage deletion failed: {Errors}", string.Join(", ", storageResult.Errors));                    return Result.Error(storageResult.Errors.FirstOrDefault() ?? "Storage deletion failed");                }            }            else            {                var metadataCommand = new DeleteFileMetadataCommand(request.Id);                var metadataResult = await mediator.Send(metadataCommand, cancellationToken);                if (!metadataResult.IsSuccess)                {                    logger.LogError("File metadata deletion failed: {Errors}", string.Join(", ", metadataResult.Errors));                    return Result.Error(metadataResult.Errors.FirstOrDefault() ?? "Metadata deletion failed");                }            }                        logger.LogInformation("Delete orchestration completed for {Id}", request.Id);            return Result.Success();        }        catch (Exception ex)        {            logger.LogError(ex, "Error in delete orchestration for {FileId}", request.Id);            return Result.Error("Unable to connect to server");        }    }}