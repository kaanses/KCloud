using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class SearchUsersQueryHandler(    IHttpClientFactory httpClientFactory,    ILogger<SearchUsersQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<SearchUsersQuery, Result<List<UserSearchResultDTO>>>{    public async Task<Result<List<UserSearchResultDTO>>> Handle(SearchUsersQuery request, CancellationToken cancellationToken)    {        try        {            if (string.IsNullOrWhiteSpace(request.SearchTerm) || request.SearchTerm.Length < 2)            {                return Result.Success(new List<UserSearchResultDTO>());            }            var httpClient = httpClientFactory.CreateClient("KCloudGateway");            var endpoint = $"/auth/users/search?term={Uri.EscapeDataString(request.SearchTerm.Trim())}";            var response = await httpClient.GetAsync(endpoint, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<List<UserSearchResultDTO>>(responseContent);            }            logger.LogWarning("User search failed: {StatusCode}", response.StatusCode);            return Result.Success(new List<UserSearchResultDTO>());        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during user search");            return Result.Success(new List<UserSearchResultDTO>());        }    }}