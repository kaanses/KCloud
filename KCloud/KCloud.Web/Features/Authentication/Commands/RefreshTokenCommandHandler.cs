using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class RefreshTokenCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<RefreshTokenCommandHandler> logger,    IParseServerResponseService responseParser,     IHttpContextAccessor httpContextAccessor)    : IRequestHandler<RefreshTokenCommand, Result<AuthResponseDTO>>{    public async Task<Result<AuthResponseDTO>> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)    {        try        {            var refreshToken = httpContextAccessor.HttpContext?.Session.GetString("refreshToken");                        if (string.IsNullOrEmpty(refreshToken))            {                logger.LogWarning("No refresh token found in cookies");                return Result<AuthResponseDTO>.Error("No refresh token available");            }            var httpClient = httpClientFactory.CreateClient("KCloudGateway");            var refreshData = new { RefreshToken = refreshToken };            var json = JsonSerializer.Serialize(refreshData);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/refresh", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                var result = await responseParser.ParseSuccessResponse<AuthResponseDTO>(responseContent);                                if (result.IsSuccess)                {                                        var context = httpContextAccessor.HttpContext;                    context?.Session.SetString("accessToken", result.Value.Token);                    context?.Session.SetString("refreshToken", result.Value.RefreshToken);                    logger.LogDebug("Tokens refreshed and cookies updated successfully");                }                                return result;            }                        if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)            {                logger.LogInformation("Refresh token expired, cookies cleared");            }                        return await responseParser.ParseErrorResponse<AuthResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during token refresh");            return Result<AuthResponseDTO>.Error("Unable to refresh token");        }    }}