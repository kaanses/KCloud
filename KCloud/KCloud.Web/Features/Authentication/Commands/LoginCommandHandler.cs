using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class LoginCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<LoginCommandHandler> logger,    IParseServerResponseService responseParser,    IAuthTokenService tokenService)      : IRequestHandler<LoginCommand, Result<AuthResponseDTO>>{    public async Task<Result<AuthResponseDTO>> Handle(LoginCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGatewayNoAuth");            var loginData = new { Email = request.Email, Password = request.Password };            var json = JsonSerializer.Serialize(loginData);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/login", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                var result = await responseParser.ParseSuccessResponse<AuthResponseDTO>(responseContent);                                if (result.IsSuccess)                {                    tokenService.StoreTokens(result.Value.Token, result.Value.RefreshToken);                    logger.LogInformation("Tokens stored successfully for user login");                }                                return result;            }                        return await responseParser.ParseErrorResponse<AuthResponseDTO>(responseContent, (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during login for {Email}", request.Email);            return Result<AuthResponseDTO>.Error("Unable to connect to server");        }    }}