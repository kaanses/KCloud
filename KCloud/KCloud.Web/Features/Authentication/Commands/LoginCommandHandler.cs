using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class LoginCommandHandler : IRequestHandler<LoginCommand, Result<AuthResponseDTO>>{    private readonly IHttpClientFactory _httpClientFactory;    private readonly ILogger<LoginCommandHandler> _logger;    private readonly IParseServerResponseService _responseParser;    public LoginCommandHandler(        IHttpClientFactory httpClientFactory,         ILogger<LoginCommandHandler> logger,        IParseServerResponseService responseParser)    {        _httpClientFactory = httpClientFactory;        _logger = logger;        _responseParser = responseParser;    }    public async Task<Result<AuthResponseDTO>> Handle(LoginCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = _httpClientFactory.CreateClient("KCloudGateway");            var loginData = new            {                Email = request.Email,                Password = request.Password            };            var json = JsonSerializer.Serialize(loginData);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/login", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await _responseParser.ParseSuccessResponse<AuthResponseDTO>(responseContent);            }                        return await _responseParser.ParseErrorResponse<AuthResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            _logger.LogError(ex, "Network error during login for {Email}", request.Email);            return Result<AuthResponseDTO>.Error("Unable to connect to server");        }    }}