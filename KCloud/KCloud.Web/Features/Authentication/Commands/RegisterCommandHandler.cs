using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class RegisterCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<RegisterCommandHandler> logger,    IParseServerResponseService responseParser, IHttpContextAccessor httpContextAccessor)     : IRequestHandler<RegisterCommand, Result<AuthResponseDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {          PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase     };    public async Task<Result<AuthResponseDTO>> Handle(RegisterCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGatewayNoAuth");            var json = JsonSerializer.Serialize(request, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/register", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                var result = await responseParser.ParseSuccessResponse<AuthResponseDTO>(responseContent);                                if (result.IsSuccess)                {                    var context = httpContextAccessor.HttpContext;                    context?.Session.SetString("accessToken", result.Value.Token);                    context?.Session.SetString("refreshToken", result.Value.RefreshToken);                    logger.LogDebug("Tokens refreshed and cookies updated successfully");                }                                return result;            }                        return await responseParser.ParseErrorResponse<AuthResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during registration for {Email}", request.Email);            return Result<AuthResponseDTO>.Error("Unable to connect to server");        }    }}