using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Authentication.Commands;public class RegisterCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<RegisterCommandHandler> logger,    IParseServerResponseService responseParser)    : IRequestHandler<RegisterCommand, Result<AuthResponseDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {  PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase };    public async Task<Result<AuthResponseDTO>> Handle(RegisterCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                    var json = JsonSerializer.Serialize(request, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/auth/register", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await responseParser.ParseSuccessResponse<AuthResponseDTO>(responseContent);            }                        return await responseParser.ParseErrorResponse<AuthResponseDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during registration for {Email}", request.Email);            return Result<AuthResponseDTO>.Error("Unable to connect to server");        }    }}