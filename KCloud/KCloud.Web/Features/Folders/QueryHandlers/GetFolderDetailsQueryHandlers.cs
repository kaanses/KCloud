using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Queries;using KCloud.Web.Features.Folders.Queries;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Folders.QueryHandlers;public class GetFolderDetailsQueryHandler(    IHttpClientFactory httpClientFactory,    ILogger<GetFolderDetailsQueryHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<GetFolderDetailsQuery, Result<FolderDetailsDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new() { PropertyNameCaseInsensitive = true };    public async Task<Result<FolderDetailsDTO>> Handle(GetFolderDetailsQuery request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");                        var requestBody = new { Id = request.Id };            var json = JsonSerializer.Serialize(requestBody, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");            var response = await httpClient.PostAsync("/folder/details", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);                    if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<FolderDetailsDTO>(responseContent);            }            return await parseServerResponseService.ParseErrorResponse<FolderDetailsDTO>(                responseContent,                 (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error getting file metadata for {FileId}", request.Id);            return Result<FolderDetailsDTO>.Error("Unable to connect to server");        }    }}