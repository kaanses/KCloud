using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Features.Folders.Commands;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Folders.CommandHandlers;public class UpdateFolderCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<UpdateFolderCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<UpdateFolderCommand, Result<FolderDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {        PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result<FolderDTO>> Handle(UpdateFolderCommand request, CancellationToken cancellationToken){    try    {        var httpClient = httpClientFactory.CreateClient("KCloudGateway");        var folder = new        {            Id = request.Id,            Name = request.Name,            ParentFolderId = request.ParentFolderId        };        var json = JsonSerializer.Serialize(folder, _jsonOptions);        var content = new StringContent(json, Encoding.UTF8, "application/json");        var response = await httpClient.PutAsync("/folder/update-folder", content, cancellationToken);        var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);                if (response.IsSuccessStatusCode)        {            var result = await parseServerResponseService.ParseSuccessResponse<FolderDTO>(responseContent);            return result;        }                var errorResult = await parseServerResponseService.ParseErrorResponse<FolderDTO>(responseContent, (int)response.StatusCode);        return errorResult;    }    catch (Exception ex)    {        logger.LogError(ex, "Network error during folder update for {FolderName}", request.Name);        return Result<FolderDTO>.Error("Unable to connect to server");    }}}