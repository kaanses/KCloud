using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Features.Folders.Commands;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Folders.CommandHandlers;public class UpdateFolderCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<UpdateFolderCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<UpdateFolderCommand, Result<FolderDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {        PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result<FolderDTO>> Handle(UpdateFolderCommand request, CancellationToken cancellationToken){    try    {        var httpClient = httpClientFactory.CreateClient("KCloudGateway");        var folder = new        {            Id = request.Id,            Name = request.Name,            ParentFolderId = request.ParentFolderId        };        var json = JsonSerializer.Serialize(folder, _jsonOptions);        var content = new StringContent(json, Encoding.UTF8, "application/json");                logger.LogInformation("üöÄ Updating folder {FolderId} with name {FolderName} and parent {ParentFolderId}",             request.Id, request.Name, request.ParentFolderId);                logger.LogInformation("üì¶ Request payload: {Payload}", json);        var response = await httpClient.PutAsync("/folder/update-folder", content, cancellationToken);        var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);        logger.LogInformation("üì° Response status: {StatusCode} {ReasonPhrase}",             response.StatusCode, response.ReasonPhrase);        logger.LogInformation("üìÑ Raw response content: {ResponseContent}", responseContent);        if (response.IsSuccessStatusCode)        {            logger.LogInformation("‚úÖ Success response detected, parsing...");            var result = await parseServerResponseService.ParseSuccessResponse<FolderDTO>(responseContent);            logger.LogInformation("‚úÖ Parsed success result: {@Result}", result);            return result;        }        logger.LogWarning("‚ùå Error response detected, parsing...");        var errorResult = await parseServerResponseService.ParseErrorResponse<FolderDTO>(            responseContent,            (int)response.StatusCode);        logger.LogWarning("‚ùå Parsed error result: {@ErrorResult}", errorResult);        return errorResult;    }    catch (Exception ex)    {        logger.LogError(ex, "üî• Network error during folder update for {FolderName}", request.Name);        return Result<FolderDTO>.Error("Unable to connect to server");    }}}