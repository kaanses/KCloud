using System.Text;using System.Text.Json;using Ardalis.Result;using KCloud.Web.Features.Files.Commands;using KCloud.Web.Features.Folders.Commands;using KCloud.Web.Interfaces;using KCloud.Web.Models.DTO;using MediatR;namespace KCloud.Web.Features.Folders.CommandHandlers;public class CreateFolderCommandHandler(    IHttpClientFactory httpClientFactory,    ILogger<CreateFolderCommandHandler> logger,    IParseServerResponseService parseServerResponseService)    : IRequestHandler<CreateFolderCommand, Result<FolderDTO>>{    private readonly JsonSerializerOptions _jsonOptions = new()    {        PropertyNameCaseInsensitive = true,        PropertyNamingPolicy = JsonNamingPolicy.CamelCase    };    public async Task<Result<FolderDTO>> Handle(CreateFolderCommand request, CancellationToken cancellationToken)    {        try        {            var httpClient = httpClientFactory.CreateClient("KCloudGateway");            var folder = new            {                Name = request.Name,                ParentFolderId = request.ParentFolderId            };            var json = JsonSerializer.Serialize(folder, _jsonOptions);            var content = new StringContent(json, Encoding.UTF8, "application/json");                        logger.LogInformation("Creating folder {FolderName} with parent {ParentFolderId}",                 request.Name, request.ParentFolderId);            var response = await httpClient.PostAsync("/folder/create-folder", content, cancellationToken);            var responseContent = await response.Content.ReadAsStringAsync(cancellationToken);            if (response.IsSuccessStatusCode)            {                return await parseServerResponseService.ParseSuccessResponse<FolderDTO>(responseContent);            }            return await parseServerResponseService.ParseErrorResponse<FolderDTO>(                responseContent,                (int)response.StatusCode);        }        catch (Exception ex)        {            logger.LogError(ex, "Network error during folder creation for {FileName}", request.Name);            return Result<FolderDTO>.Error("Unable to connect to server");        }    }}