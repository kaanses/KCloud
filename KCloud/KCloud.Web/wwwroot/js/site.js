const KCloudModal = {    baseConfig: {        background: 'linear-gradient(145deg, rgba(41, 41, 41, 0.98), rgba(19, 6, 35, 0.95))',        backdrop: `            rgba(0, 0, 0, 0.8)            backdrop-filter: blur(10px);            -webkit-backdrop-filter: blur(10px);        `,        customClass: {            popup: 'kcloud-modal',            title: 'kcloud-modal-title',            htmlContainer: 'kcloud-modal-content',            confirmButton: 'kcloud-btn-primary',            cancelButton: 'kcloud-btn-outline'        },        buttonsStyling: false, // Use our custom button classes        showClass: {            popup: 'animate__animated animate__fadeInUp animate__faster'        },        hideClass: {            popup: 'animate__animated animate__fadeOutDown animate__faster'        }    },    // Method to show modal with base styling + custom options    show(options = {}) {        const config = {            ...this.baseConfig,            ...options,            customClass: {                ...this.baseConfig.customClass,                ...(options.customClass || {})            }        };        return Swal.fire(config);    }};// Enhanced transition coordination systemconst KCloudTransitions = {    // Animation configuration    config: {        modalCloseDelay: 400, // SweetAlert2 default close animation time        bannerDelay: 200,     // Additional delay before banner appears        useGSAP: true         // Set to false if you don't want to use GSAP    },    // Initialize GSAP if available (add this script tag to your HTML: https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js)    init() {        this.hasGSAP = typeof gsap !== 'undefined';        console.log('KCloud Transitions initialized. GSAP available:', this.hasGSAP);    },    // Smooth modal to banner transition    async modalToBanner(bannerFunction, ...bannerArgs) {        return new Promise((resolve) => {            // Start modal close            Swal.close();            // Wait for modal animation to complete, then show banner with smooth entrance            setTimeout(() => {                // Create banner with enhanced entrance animation                if (this.hasGSAP && this.config.useGSAP) {                    this.enhancedBannerEntrance(() => {                        bannerFunction(...bannerArgs);                        resolve();                    });                } else {                    // Fallback to CSS-only smooth entrance                    this.cssOnlyBannerEntrance(() => {                        bannerFunction(...bannerArgs);                        resolve();                    });                }            }, this.config.modalCloseDelay + this.config.bannerDelay);        });    },    // Enhanced GSAP banner entrance    enhancedBannerEntrance(showBannerCallback) {        // Pre-create banner element to animate it in        showBannerCallback();        // Get the banner that was just created        const banner = document.querySelector('.top-banner');        if (banner) {            // Reset initial state for smooth entrance            gsap.set(banner, {                y: -100,                opacity: 0,                scale: 0.95,                rotationX: -10            });            // Smooth entrance animation            gsap.to(banner, {                duration: 0.8,                y: 0,                opacity: 1,                scale: 1,                rotationX: 0,                ease: "back.out(1.7)",                onComplete: () => {                    // Add subtle breathing animation                    gsap.to(banner, {                        duration: 2,                        scale: 1.02,                        yoyo: true,                        repeat: -1,                        ease: "sine.inOut"                    });                }            });            // Animate the banner content elements            const iconContainer = banner.querySelector('.banner-icon-container');            const textContainer = banner.querySelector('.banner-text-container');            const closeBtn = banner.querySelector('.banner-close');            if (iconContainer) {                gsap.from(iconContainer, {                    duration: 0.6,                    scale: 0,                    rotation: 180,                    ease: "back.out(2)",                    delay: 0.3                });            }            if (textContainer) {                gsap.from(textContainer, {                    duration: 0.8,                    x: -50,                    opacity: 0,                    ease: "power2.out",                    delay: 0.4                });            }            if (closeBtn) {                gsap.from(closeBtn, {                    duration: 0.6,                    scale: 0,                    rotation: -90,                    ease: "back.out(2)",                    delay: 0.5                });            }        }    },    // CSS-only smooth entrance (fallback)    cssOnlyBannerEntrance(showBannerCallback) {        showBannerCallback();        const banner = document.querySelector('.top-banner');        if (banner) {            // Enhanced CSS entrance            banner.style.transform = 'translateY(-100%) scale(0.95)';            banner.style.opacity = '0';            banner.style.transition = 'all 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275)';            requestAnimationFrame(() => {                banner.style.transform = 'translateY(0) scale(1)';                banner.style.opacity = '1';            });        }    },    // Enhanced modal close with preview (for better UX)    async closeModalWithPreview(previewMessage, bannerFunction, ...bannerArgs) {        return new Promise((resolve) => {            // Add a subtle preview of what's coming            const currentModal = document.querySelector('.swal2-container');            if (currentModal && this.hasGSAP) {                // Subtle scale and fade hint                gsap.to(currentModal, {                    duration: 0.3,                    scale: 0.98,                    opacity: 0.8,                    ease: "power2.inOut"                });            }            // Show a micro-banner preview for 150ms            if (previewMessage) {                this.showMicroPreview(previewMessage);            }            setTimeout(() => {                this.modalToBanner(bannerFunction, ...bannerArgs).then(resolve);            }, 150);        });    },    // Micro preview banner (very subtle)    showMicroPreview(message) {        const preview = document.createElement('div');        preview.textContent = message;        preview.style.cssText = `            position: fixed;            top: 20px;            right: 20px;            background: rgba(0,0,0,0.8);            color: white;            padding: 8px 16px;            border-radius: 20px;            font-size: 0.8rem;            z-index: 9999;            opacity: 0;            transform: translateY(-10px);            transition: all 0.3s ease;            pointer-events: none;            font-family: 'Azeret Mono', monospace;        `;        document.body.appendChild(preview);        requestAnimationFrame(() => {            preview.style.opacity = '1';            preview.style.transform = 'translateY(0)';        });        setTimeout(() => {            preview.style.opacity = '0';            preview.style.transform = 'translateY(-10px)';            setTimeout(() => preview.remove(), 300);        }, 1000);    }};// Initialize the transition systemdocument.addEventListener('DOMContentLoaded', () => {    KCloudTransitions.init();});// Helper functions to use the smooth transition systemasync function smoothSuccessBanner(message, duration = 8000) {    return KCloudTransitions.modalToBanner(showSuccessBanner, message, duration);}async function smoothErrorBanner(message, duration = 10000) {    return KCloudTransitions.modalToBanner(showErrorBanner, message, duration);}async function smoothWarningBanner(message, duration = 9000) {    return KCloudTransitions.modalToBanner(showWarningBanner, message, duration);}async function smoothInfoBanner(message, duration = 7000) {    return KCloudTransitions.modalToBanner(showInfoBanner, message, duration);}// Enhanced version with previewasync function smoothSuccessBannerWithPreview(message, previewText = "Success!", duration = 8000) {    return KCloudTransitions.closeModalWithPreview(previewText, showSuccessBanner, message, duration);}async function smoothErrorBannerWithPreview(message, previewText = "Error!", duration = 10000) {    return KCloudTransitions.closeModalWithPreview(previewText, showErrorBanner, message, duration);}async function smoothWarningBannerWithPreview(message, previewText = "Warning!", duration = 9000) {    return KCloudTransitions.closeModalWithPreview(previewText, showWarningBanner, message, duration);}async function smoothInfoBannerWithPreview(message, previewText = "Info!", duration = 7000) {    return KCloudTransitions.closeModalWithPreview(previewText, showInfoBanner, message, duration);}async function handleApiRequest(url, options) {    try {        console.log("🚀 Making request to:", url);        console.log("📦 Request options:", options);        const response = await fetch(url, options);        console.log("📡 Response status:", response.status, response.statusText);        const result = await response.json();        console.log("📄 Raw response data:", result);        // Success Detection        if (response.ok && result.success !== false) {            console.log("✅ Detected as SUCCESS");            return {                success: true,                message: result.message || 'Operation successful',                data: result.data || result            };        }        console.log("❌ Detected as ERROR");        // Error Extraction (Priority Order)        let errorMessage = 'Operation failed';        // 1. Specific errors array        if (result.errors && Array.isArray(result.errors) && result.errors.length > 0) {            console.log("🔍 Using errors array:", result.errors);            errorMessage = result.errors.filter(e => e && e.trim()).join(', ');        }        // 2. Validation errors        else if (result.validationErrors && Array.isArray(result.validationErrors) && result.validationErrors.length > 0) {            console.log("🔍 Using validation errors:", result.validationErrors);            errorMessage = result.validationErrors                .map(e => e.field ? `${e.field}: ${e.message}` : e.message)                .join(', ');        }        // 3. Generic message        else if (result.message && result.message !== "Operation failed") {            console.log("🔍 Using generic message:", result.message);            errorMessage = result.message;        }        // 4. HTTP status fallback        else if (!response.ok) {            console.log("🔍 Using HTTP status fallback");            errorMessage = `Server error: ${response.status} ${response.statusText}`;        }        console.log("💬 Final error message:", errorMessage);        return {            success: false,            message: errorMessage        };    } catch (error) {        console.error("🔥 Network error:", error);        return {            success: false,            message: 'Network error occurred'        };    }}async function renameFile(fileId, currentName) {    try {        const { value: newName } = await KCloudModal.show({            title: '<i class="bi bi-pencil me-2"></i>Rename File',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-rename-input" class="kcloud-form-label">                            File Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-file-earmark kcloud-input-icon"></i>                            <input type="text" id="kcloud-rename-input" class="kcloud-input"                                    maxlength="255" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Enter the new name for your file                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-rename-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-rename-input');                input.value = currentName;                input.focus();                const lastDotIndex = currentName.lastIndexOf('.');                if (lastDotIndex > 0) {                    input.setSelectionRange(0, lastDotIndex);                } else {                    input.select();                }                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });            },            preConfirm: () => {                const newName = document.getElementById('kcloud-rename-input').value;                const newNameTrimmed = newName.trim();                if (!newNameTrimmed) {                    Swal.showValidationMessage('Please enter a file name');                    return false;                }                if (newNameTrimmed.length > 255) {                    Swal.showValidationMessage('File name is too long (max 255 characters)');                    return false;                }                if (newNameTrimmed === currentName) {                    Swal.showValidationMessage('Please enter a different name');                    return false;                }                const invalidChars = /[<>:"/\\|?*\r\n\t]/g;                if (invalidChars.test(newNameTrimmed)) {                    Swal.showValidationMessage('File name contains invalid characters');                    return false;                }                if (newNameTrimmed.startsWith(' ') || newNameTrimmed.endsWith(' ') || newNameTrimmed.endsWith('.')) {                    Swal.showValidationMessage('File name cannot start/end with spaces or dots');                    return false;                }                return newNameTrimmed;            }        });        if (newName && newName.trim() !== currentName) {            await performFileRename(fileId, newName.trim(), currentName);        }    } catch (error) {        console.error('Rename dialog error:', error);        showErrorBanner('Failed to show rename dialog');    }}async function performFileRename(fileId, newName, oldName) {    try {        // Show loading with file-specific messaging        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Renaming File...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <div class="kcloud-rename-progress">                        <p class="kcloud-old-name">From: <span>"${oldName}"</span></p>                        <i class="bi bi-arrow-down kcloud-arrow"></i>                        <p class="kcloud-new-name">To: <span>"${newName}"</span></p>                    </div>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal kcloud-rename-loading'            }        });        // Use standardized API handler        const result = await handleApiRequest('/file/update', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: fileId,                FileName: newName,                FolderId: null            })        });        if (result.success) {            // Use smooth transition instead of abrupt close + banner            await smoothSuccessBannerWithPreview(                `File renamed to "${newName}" successfully!`,                "Renamed!",                8000            );            setTimeout(() => location.reload(), 2000);        } else {            await smoothErrorBannerWithPreview(`Failed to rename file: ${result.message}`, "Error!");        }    } catch (error) {        console.error('Rename error:', error);        await smoothErrorBannerWithPreview('Network error occurred while renaming file', "Error!");    }}async function restoreFile(event, fileId, fileName = null, restoreAll = false) {    event.preventDefault();    let title, text, confirmText;    if (restoreAll) {        title = 'Restore All Files?';        text = 'Are you sure you want to restore all files from trash?';        confirmText = 'Yes, restore all!';    } else {        title = 'Restore File?';        text = `Are you sure you want to restore "${fileName}"?`;        confirmText = 'Yes, restore it!';    }    // Show confirmation dialog    const result = await KCloudModal.show({        title: title,        html: `<div class="kcloud-confirm-content"><p>${text}</p></div>`,        showCancelButton: true,        confirmButtonText: confirmText,        cancelButtonText: 'Cancel',        customClass: {            popup: 'kcloud-modal',            confirmButton: 'kcloud-btn-success',            cancelButton: 'kcloud-btn-outline'        }    });    if (result.isConfirmed) {        try {            // Show loading            KCloudModal.show({                title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Restoring...',                html: `                    <div class="kcloud-loading-content">                        <div class="kcloud-loading-spinner"></div>                        <p>${restoreAll ? 'Restoring all files...' : `Restoring "${fileName}"...`}</p>                    </div>                `,                allowOutsideClick: false,                allowEscapeKey: false,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-loading-modal'                }            });            // Use standardized API handler            const apiResult = await handleApiRequest(`/File/restore/${fileId}?restoreAll=${restoreAll}`, {                method: 'POST',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            });            if (apiResult.success) {                const successMessage = restoreAll                    ? "All files have been restored successfully!"                    : `"${fileName}" has been restored successfully!`;                // Use smooth transition                await smoothSuccessBannerWithPreview(                    successMessage,                    "Restored!",                    8000                );                setTimeout(() => window.location.reload(), 2000);            } else {                await smoothErrorBannerWithPreview(`Restore failed: ${apiResult.message}`, "Failed!");            }        } catch (error) {            console.error('Error:', error);            await smoothErrorBannerWithPreview('Network error occurred during restore', "Error!");        }    }}// Helper function for restore all buttonfunction restoreAllFiles() {    restoreFile(event, null, null, true);}/** * Empty the trash completely */async function emptyTrash() {    try {        // Show warning confirmation dialog        const result = await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle me-2"></i>Empty Trash?',            html: `                <div class="kcloud-confirm-content">                    <p>This will permanently delete all files in trash. This action cannot be undone!</p>                    <div class="kcloud-warning-box danger">                        <i class="bi bi-exclamation-triangle-fill me-2"></i>                        All files will be permanently deleted and cannot be recovered!                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: 'DELETE EVERYTHING',            cancelButtonText: 'Cancel',            customClass: {                popup: 'kcloud-modal kcloud-delete-modal',                confirmButton: 'kcloud-btn-danger',                cancelButton: 'kcloud-btn-outline'            }        });        if (!result.isConfirmed) return;        // Second confirmation for safety        const finalResult = await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill me-2"></i>Are you absolutely sure?',            html: `                <div class="kcloud-confirm-content">                    <p>All files will be permanently deleted!</p>                </div>            `,            showCancelButton: true,            confirmButtonText: 'DELETE EVERYTHING',            cancelButtonText: 'Cancel',            customClass: {                popup: 'kcloud-modal kcloud-delete-modal',                confirmButton: 'kcloud-btn-danger',                cancelButton: 'kcloud-btn-outline'            }        });        if (!finalResult.isConfirmed) return;        // Show loading        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Emptying trash...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Please wait while all files are permanently deleted.</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const apiResult = await handleApiRequest('/File/empty-trash', {            method: 'POST',            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        });        if (apiResult.success) {            // Use smooth transition with dramatic effect for destructive action            await smoothSuccessBannerWithPreview(                "Trash has been emptied successfully!",                "Deleted!",                8000            );            setTimeout(() => window.location.reload(), 2000);        } else {            await smoothErrorBannerWithPreview(`Failed to empty trash: ${apiResult.message}`, "Failed!");        }    } catch (error) {        console.error('Error:', error);        await smoothErrorBannerWithPreview('Network error occurred while emptying trash', "Error!");    }}/** * Clear search and return to normal view */function clearSearch() {    // Get current URL    const url = new URL(window.location);    // Remove search parameter    url.searchParams.delete('search');    // Redirect to URL without search    window.location.href = url.toString();}async function showUploadDialog(currentFolderId = null, currentFolderName = null) {    try {        const { value: file } = await KCloudModal.show({            title: '<i class="bi bi-cloud-upload me-2"></i>Upload Files',            html: `                <div class="kcloud-upload-form">                    ${currentFolderName ? `                        <div class="kcloud-info-badge">                            <i class="bi bi-folder me-2"></i>                            <span>Uploading to: <strong>${currentFolderName}</strong></span>                        </div>                    ` : ''}                                        <div class="kcloud-form-group">                        <label for="kcloud-file-input" class="kcloud-form-label">                            Choose File(s)                        </label>                        <div class="kcloud-file-input-wrapper" id="kcloud-drop-zone">                            <input type="file" id="kcloud-file-input" class="kcloud-file-input"                                    multiple accept="*/*">                            <div class="kcloud-file-input-overlay">                                <i class="bi bi-cloud-upload kcloud-upload-icon"></i>                                <span class="kcloud-drop-text">Click to browse or drag & drop files</span>                                <div class="kcloud-selected-files " id="kcloud-selected-files"></div>                            </div>                        </div>                        <div class="kcloud-form-help">                            Maximum file size: 50 MB per file                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-cloud-upload me-1"></i> Upload',            cancelButtonText: 'Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-upload-modal'            },            didOpen: () => {                initializeDragAndDrop();            },            preConfirm: () => {                const fileInput = document.getElementById('kcloud-file-input');                if (!fileInput.files.length) {                    Swal.showValidationMessage('Please select at least one file');                    return false;                }                return fileInput.files;            }        });        if (file) {            await uploadFiles(file, currentFolderId);        }    } catch (error) {        console.error('Upload dialog error:', error);        showErrorBanner('Failed to show upload dialog');    }}function initializeDragAndDrop() {    const dropZone = document.getElementById('kcloud-drop-zone');    const fileInput = document.getElementById('kcloud-file-input');    const selectedFilesDiv = document.getElementById('kcloud-selected-files');    const dropText = document.querySelector('.kcloud-drop-text');    if (!dropZone || !fileInput) return;    // Handle file selection display    function updateSelectedFiles(files) {        if (files.length === 0) {            selectedFilesDiv.innerHTML = '';            dropText.textContent = 'Click to browse or drag & drop files';            return;        }        const fileList = Array.from(files).map(file => {            const size = formatFileSize(file.size);            return `<div class="kcloud-selected-file">                <i class="bi bi-file-earmark me-2 mt-2"></i>                <span class="mt-2">${file.name}</span>                <small class="text-muted ms-2 mt-2">(${size})</small>            </div>`;        }).join('');        selectedFilesDiv.innerHTML = `            <div class="kcloud-files-list">                <div class="kcloud-files-header mt-2 mb-2">                    <strong>${files.length} file${files.length > 1 ? 's' : ''} selected:</strong>                </div>                ${fileList}            </div>        `;        dropText.textContent = 'Click to change selection';    }    // File input change handler    fileInput.addEventListener('change', (e) => {        updateSelectedFiles(e.target.files);    });    // Prevent default drag behaviors    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {        dropZone.addEventListener(eventName, preventDefaults, false);        document.body.addEventListener(eventName, preventDefaults, false);    });    // Highlight drop zone when item is dragged over it    ['dragenter', 'dragover'].forEach(eventName => {        dropZone.addEventListener(eventName, highlight, false);    });    ['dragleave', 'drop'].forEach(eventName => {        dropZone.addEventListener(eventName, unhighlight, false);    });    // Handle dropped files    dropZone.addEventListener('drop', handleDrop, false);    function preventDefaults(e) {        e.preventDefault();        e.stopPropagation();    }    function highlight(e) {        dropZone.classList.add('kcloud-drag-over');    }    function unhighlight(e) {        dropZone.classList.remove('kcloud-drag-over');    }    function handleDrop(e) {        const dt = e.dataTransfer;        const files = dt.files;        // Update the file input with dropped files        fileInput.files = files;        updateSelectedFiles(files);    }    function formatFileSize(bytes) {        const sizes = ['B', 'KB', 'MB', 'GB'];        if (bytes === 0) return '0 B';        const i = Math.floor(Math.log(bytes) / Math.log(1024));        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];    }}async function uploadFiles(files, folderId = null) {    // Show loading dialog    KCloudModal.show({        title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Uploading...',        html: `            <div class="kcloud-loading-content">                <div class="kcloud-loading-spinner"></div>                <div id="upload-status">Uploading ${files.length} file(s)...</div>            </div>        `,        allowOutsideClick: false,        allowEscapeKey: false,        showConfirmButton: false,        customClass: {            popup: 'kcloud-modal kcloud-loading-modal'        }    });    try {        // Prepare FormData        const formData = new FormData();        // Add files        if (files.length === 1) {            formData.append('File', files[0]);        } else {            Array.from(files).forEach(file => {                formData.append('Files', file);            });        }        // Add folder ID if provided        if (folderId && folderId.trim() !== '' && folderId !== 'undefined') {            formData.append('FolderId', folderId.trim());        }        // Add anti-forgery token        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;        if (token) {            formData.append('__RequestVerificationToken', token);        }        // Debug logging        console.log('Uploading files:', Array.from(files).map(f => f.name));        console.log('Target folder:', folderId || 'Root');        // Send request        const response = await fetch('/File/upload', {            method: 'POST',            body: formData        });        console.log('Response status:', response.status);        console.log('Response ok:', response.ok);        const result = await response.json();        // Check for success based on HTTP status AND response content        if (response.ok && (result.success !== false)) {            // Success case            let successMessage = `${files.length} file(s) uploaded successfully`;            if (result.message) {                successMessage = result.message;            }            // Use smooth transition with upload-specific preview            await smoothSuccessBannerWithPreview(                successMessage,                "Uploaded!",                8000            );            setTimeout(() => location.reload(), 2000);        } else {            let errorMessage = 'Failed to upload files';            let processedErrors = new Set(); // Use Set to avoid duplicates            // Strategy 1: Try validationErrors first (more specific)            if (result.validationErrors && Array.isArray(result.validationErrors) && result.validationErrors.length > 0) {                const validationMessages = result.validationErrors                    .map(e => {                        if (e.field && e.message) {                            return `${e.field}: ${e.message}`;                        } else if (e.message) {                            return e.message;                        } else if (typeof e === 'string') {                            return e;                        }                        return null;                    })                    .filter(msg => msg && msg.trim())                    .forEach(msg => processedErrors.add(msg.trim()));                if (processedErrors.size > 0) {                    errorMessage = Array.from(processedErrors).join(', ');                }            }            // Strategy 2: If no validation errors, try general errors array            else if (result.errors && Array.isArray(result.errors) && result.errors.length > 0) {                const generalErrors = result.errors                    .filter(e => e && typeof e === 'string' && e.trim())                    .map(e => e.trim());                if (generalErrors.length > 0) {                    errorMessage = generalErrors.join(', ');                }            }            // Strategy 3: Try single errors string            else if (result.errors && typeof result.errors === 'string' && result.errors.trim()) {                errorMessage = result.errors.trim();            }            // Strategy 4: Fallback to message            else if (result.message && result.message !== "Upload failed" && result.message.trim()) {                errorMessage = result.message.trim();            }            // Strategy 5: HTTP status fallback            else if (!response.ok) {                errorMessage = `Server error: ${response.status} ${response.statusText}`;            }            await smoothErrorBannerWithPreview(errorMessage, "Failed!");        }    } catch (error) {        console.error('Upload error:', error);        await smoothErrorBannerWithPreview('Network error occurred during upload', "Error!");    }}async function showCreateFolderDialog(parentFolderId = null) {    try {        const { value: folderName } = await KCloudModal.show({            title: '<i class="bi bi-folder-plus me-2"></i>Create New Folder',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-folder-name" class="kcloud-form-label">                            Folder Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-folder kcloud-input-icon"></i>                            <input type="text" id="kcloud-folder-name" class="kcloud-input"                                    placeholder="Enter folder name..." maxlength="255" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Choose a unique name for your folder                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-folder-plus me-1"></i> Create',            cancelButtonText: 'Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-folder-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-folder-name');                input.focus();                // Enter key handler                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });            },            preConfirm: () => {                const folderName = document.getElementById('kcloud-folder-name').value.trim();                if (!folderName) {                    Swal.showValidationMessage('Please enter a folder name');                    return false;                }                if (folderName.length < 1) {                    Swal.showValidationMessage('Folder name must be at least 1 character');                    return false;                }                if (folderName.length > 255) {                    Swal.showValidationMessage('Folder name must be less than 255 characters');                    return false;                }                // Check for invalid characters                const invalidChars = /[<>:"/\\|?*]/g;                if (invalidChars.test(folderName)) {                    Swal.showValidationMessage('Folder name contains invalid characters');                    return false;                }                return folderName;            }        });        if (folderName) {            await createFolder(folderName, parentFolderId);        }    } catch (error) {        console.error('Create folder dialog error:', error);        showErrorBanner('Failed to show create folder dialog');    }}async function createFolder(folderName, parentFolderId = null) {    try {        // Show loading with KCloud styling        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Creating Folder...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Creating "${folderName}"...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/Folder/create', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Name: folderName,                ParentFolderId: parentFolderId && parentFolderId.trim() !== '' ? parentFolderId.trim() : null            })        });        if (result.success) {            await smoothSuccessBannerWithPreview(                `Folder "${folderName}" created successfully!`,                "Created!",                8000            );            setTimeout(() => location.reload(), 2000);        } else {            await smoothErrorBannerWithPreview(`Failed to create folder: ${result.message}`, "Failed!");        }    } catch (error) {        console.error('Create folder error:', error);        await smoothErrorBannerWithPreview('Network error occurred while creating folder', "Error!");    }}async function deleteFile(event, fileId, fileName, isHardDelete = false) {    try {        const actionText = isHardDelete ? 'permanently delete' : 'delete';        const warningText = isHardDelete ?            'This file will be permanently deleted and cannot be recovered!' :            'This will move the file to trash where it can be restored later.';        const result = await KCloudModal.show({            title: `<i class="bi bi-trash me-2"></i>${isHardDelete ? 'Permanently Delete' : 'Delete'} File`,            html: `                <div class="kcloud-confirm-content">                    <div class="kcloud-file-info">                        <i class="bi bi-file-earmark-fill text-primary" style="font-size: 3rem;"></i>                        <h4 class="kcloud-file-name">"${fileName}"</h4>                    </div>                                        <p class="kcloud-confirm-text">                        Are you sure you want to ${actionText} this file?                    </p>                                        <div class="kcloud-warning-box ${isHardDelete ? 'danger' : 'warning'}">                        <i class="bi bi-${isHardDelete ? 'exclamation-triangle-fill' : 'info-circle'} me-2"></i>                        ${warningText}                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: `<i class="bi bi-trash me-1"></i> ${isHardDelete ? 'Delete Forever' : 'Delete'}`,            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            customClass: {                popup: 'kcloud-modal kcloud-delete-modal',                confirmButton: isHardDelete ? 'kcloud-btn-danger' : 'kcloud-btn-warning',                cancelButton: 'kcloud-btn-outline'            }        });        if (result.isConfirmed) {            await performFileDelete(event, fileId, fileName, isHardDelete);        }    } catch (error) {        console.error('Delete dialog error:', error);        showErrorBanner('Failed to show delete dialog');    }}async function performFileDelete(event, fileId, fileName, isHardDelete) {    const fileCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on the card with visual feedback        if (fileCard) {            fileCard.style.opacity = '0.6';            fileCard.style.pointerEvents = 'none';            fileCard.style.transform = 'scale(0.98)';            fileCard.style.transition = 'all 0.3s ease';        }        // Show loading modal        KCloudModal.show({            title: `<i class="bi bi-gear-fill kcloud-spinning me-2"></i>${isHardDelete ? 'Permanently Deleting' : 'Deleting'} File...`,            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <div class="kcloud-delete-progress">                        <div class="kcloud-file-preview">                            <i class="bi bi-file-earmark-fill text-primary"></i>                            <span class="kcloud-file-name">"${fileName}"</span>                        </div>                        <p class="kcloud-delete-status">                            ${isHardDelete ? 'Permanently deleting file...' : 'Moving to trash...'}                        </p>                    </div>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal kcloud-delete-loading'            }        });        // Use standardized API handler        const result = await handleApiRequest(`/File/delete/${fileId}?isHardDelete=${isHardDelete}`, {            method: 'DELETE',            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        });        if (result.success) {            const successMessage = `"${fileName}" has been ${isHardDelete ? 'permanently deleted' : 'moved to trash'}`;            await smoothSuccessBannerWithPreview(                successMessage,                isHardDelete ? "Deleted!" : "Moved!",                8000            );            // Animate card removal            if (fileCard) {                fileCard.style.transition = 'opacity 0.5s ease, transform 0.5s ease';                fileCard.style.opacity = '0';                fileCard.style.transform = 'scale(0.8) rotateX(10deg)';                setTimeout(() => {                    fileCard.remove();                }, 500);            }        } else {            // Restore card on error            if (fileCard) {                fileCard.style.opacity = '1';                fileCard.style.pointerEvents = 'auto';                fileCard.style.transform = 'scale(1)';            }            await smoothErrorBannerWithPreview(`Failed to delete file: ${result.message}`, "Failed!");        }    } catch (error) {        console.error('Delete error:', error);        // Restore card on error        if (fileCard) {            fileCard.style.opacity = '1';            fileCard.style.pointerEvents = 'auto';            fileCard.style.transform = 'scale(1)';        }        await smoothErrorBannerWithPreview('Network error occurred while deleting file', "Error!");    }}async function renameFolder(folderId, currentName) {    try {        const { value: newName } = await KCloudModal.show({            title: '<i class="bi bi-folder me-2"></i>Rename Folder',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-rename-folder-input" class="kcloud-form-label">                            Folder Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-folder kcloud-input-icon"></i>                            <input type="text" id="kcloud-rename-folder-input" class="kcloud-input"                                    maxlength="75" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Enter the new name for your folder                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-rename-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-rename-folder-input');                // Set value safely after modal opens                input.value = currentName;                input.focus();                // Select all text for easier editing                input.select();                // Enter key handler                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });                // Real-time validation feedback                input.addEventListener('input', (e) => {                    const value = e.target.value.trim();                    const wrapper = input.parentElement;                    // Remove existing validation classes                    wrapper.classList.remove('kcloud-input-valid', 'kcloud-input-invalid');                    if (value && value !== currentName && value.length <= 75) {                        wrapper.classList.add('kcloud-input-valid');                    } else if (value.length > 75) {                        wrapper.classList.add('kcloud-input-invalid');                    }                });            },            preConfirm: () => {                const newName = document.getElementById('kcloud-rename-folder-input').value;                const newNameTrimmed = newName.trim();                // Basic checks                if (!newNameTrimmed) {                    Swal.showValidationMessage('Please enter a folder name');                    return false;                }                if (newNameTrimmed.length > 75) {                    Swal.showValidationMessage('Folder name cannot exceed 75 characters');                    return false;                }                if (newNameTrimmed === currentName) {                    Swal.showValidationMessage('Please enter a different name');                    return false;                }                // Block problematic characters that break JavaScript/HTML                const invalidChars = /[<>:"/\\|?*\r\n\t]/g;                if (invalidChars.test(newNameTrimmed)) {                    Swal.showValidationMessage('Folder name contains invalid characters');                    return false;                }                // Block leading/trailing spaces and dots                if (newNameTrimmed.startsWith(' ') || newNameTrimmed.endsWith(' ') || newNameTrimmed.endsWith('.')) {                    Swal.showValidationMessage('Folder name cannot start/end with spaces or dots');                    return false;                }                return newNameTrimmed;            }        });        if (newName && newName.trim() !== currentName) {            // Show loading with KCloud styling            KCloudModal.show({                title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Renaming Folder...',                html: `                    <div class="kcloud-loading-content">                        <div class="kcloud-loading-spinner"></div>                        <div class="kcloud-rename-progress">                            <p class="kcloud-old-name">From: <span>"${currentName}"</span></p>                            <i class="bi bi-arrow-down kcloud-arrow"></i>                            <p class="kcloud-new-name">To: <span>"${newName}"</span></p>                        </div>                    </div>                `,                allowOutsideClick: false,                allowEscapeKey: false,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-loading-modal kcloud-rename-loading'                }            });            // Use standardized API handler            const result = await handleApiRequest('/Folder/update', {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                },                body: JSON.stringify({                    Id: folderId,                    Name: newName.trim(),                    ParentFolderId: null                })            });            if (result.success) {                await smoothSuccessBannerWithPreview(                    `Folder renamed to "${newName}" successfully!`,                    "Renamed!",                    8000                );                setTimeout(() => location.reload(), 2000);            } else {                await smoothErrorBannerWithPreview(`Failed to rename folder: ${result.message}`, "Failed!");            }        }    } catch (error) {        console.error('Rename folder error:', error);        await smoothErrorBannerWithPreview('Network error occurred while renaming folder', "Error!");    }}async function deleteFolder(event, folderId, folderName) {    try {        // Show loading while getting folder details        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Checking Folder...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Analyzing folder contents...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        const detailsResult = await handleApiRequest('/Folder/details', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId            })        });        if (!detailsResult.success) {            await smoothErrorBannerWithPreview(`Failed to analyze folder: ${detailsResult.message}`, "Error!");            return;        }        const folderDetails = detailsResult.data;        const fileCount = folderDetails.fileCount || 0;        const subFolderCount = folderDetails.subFolderCount || 0;        const parentFolderId = folderDetails.parentFolderId;        const isEmpty = fileCount === 0 && subFolderCount === 0;        // Close loading modal        Swal.close();        // If folder is empty, proceed with simple delete        if (isEmpty) {            const confirmed = await KCloudModal.show({                title: '<i class="bi bi-trash me-2"></i>Delete Empty Folder',                html: `                    <div class="kcloud-confirm-content">                        <div class="kcloud-folder-info">                            <i class="bi bi-folder-fill folder-color" style="font-size: 3rem;"></i>                            <h4 class="kcloud-folder-name">"${folderName}"</h4>                        </div>                        <p class="kcloud-confirm-text">This folder is empty and will be deleted permanently.</p>                        <div class="kcloud-warning-box">                            <i class="bi bi-exclamation-triangle me-2"></i>                            This action cannot be undone!                        </div>                    </div>                `,                showCancelButton: true,                confirmButtonText: '<i class="bi bi-trash me-1" ></i> Delete',                cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',                customClass: {                    popup: 'kcloud-modal kcloud-delete-modal',                    confirmButton: 'kcloud-btn-danger',                    cancelButton: 'kcloud-btn-outline'                }            });            if (confirmed.isConfirmed) {                await performFolderDeletion(event, folderId, folderName, 'deleteAll');            }            return;        }        // If folder has content, show options        const action = await showKCloudFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId);        if (action) {            await performFolderDeletion(event, folderId, folderName, action);        }    } catch (error) {        console.error('Delete folder error:', error);        await smoothErrorBannerWithPreview('Network error occurred while analyzing folder', "Error!");    }}async function showKCloudFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId) {    const totalItems = fileCount + subFolderCount;    const result = await KCloudModal.show({        title: '<i class="bi bi-exclamation-triangle me-2"></i>Folder Contains Items',        html: `            <div class="kcloud-delete-options">                <div class="kcloud-folder-summary">                    <div class="kcloud-folder-header">                        <i class="bi bi-folder-fill folder-color" style="font-size: 2.5rem;"></i>                        <h4>"${folderName}"</h4>                    </div>                                        <div class="kcloud-content-stats">                        <div class="kcloud-stat-item">                            <i class="bi bi-file-earmark text-primary"></i>                            <span>${fileCount} file${fileCount !== 1 ? 's' : ''}</span>                        </div>                        <div class="kcloud-stat-item">                            <i class="bi bi-folder text-warning"></i>                            <span>${subFolderCount} folder${subFolderCount !== 1 ? 's' : ''}</span>                        </div>                        <div class="kcloud-stat-total">                            <strong>Total: ${totalItems} item${totalItems !== 1 ? 's' : ''}</strong>                        </div>                    </div>                </div>                <div class="kcloud-options-container">                    <h5 class="kcloud-options-title">What would you like to do?</h5>                                        <div class="kcloud-option-card" data-action="deleteAll">                        <div class="kcloud-option-icon danger">                            <i class="bi bi-trash-fill"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Delete Everything</h6>                            <p>Permanently delete the folder and all its contents</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="deleteAll" id="deleteAll">                        </div>                    </div>                    ${parentFolderId ? `                    <div class="kcloud-option-card" data-action="moveToParent">                        <div class="kcloud-option-icon info">                            <i class="bi bi-arrow-up"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Move to Parent Folder</h6>                            <p>Move all contents to the parent folder, then delete this folder</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="moveToParent" id="moveToParent">                        </div>                    </div>                    ` : ''}                    <div class="kcloud-option-card" data-action="moveToRoot">                        <div class="kcloud-option-icon success">                            <i class="bi bi-house"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Move to Root</h6>                            <p>Move all contents to your root storage, then delete this folder</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="moveToRoot" id="moveToRoot">                        </div>                    </div>                </div>            </div>        `,        showCancelButton: true,        confirmButtonText: '<i class="bi bi-check me-1"></i> Proceed',        cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',        customClass: {            popup: 'kcloud-modal kcloud-delete-options-modal'        },        didOpen: () => {            // Add click handlers for option cards            const optionCards = document.querySelectorAll('.kcloud-option-card');            optionCards.forEach(card => {                card.addEventListener('click', () => {                    // Remove active class from all cards                    optionCards.forEach(c => c.classList.remove('active'));                    // Add active class to clicked card                    card.classList.add('active');                    // Check the radio button                    const radio = card.querySelector('input[type="radio"]');                    radio.checked = true;                });            });        },        preConfirm: () => {            const selectedOption = document.querySelector('input[name="deleteOption"]:checked');            if (!selectedOption) {                Swal.showValidationMessage('Please select an option');                return false;            }            return selectedOption.value;        }    });    return result.isConfirmed ? result.value : null;}async function performFolderDeletion(event, folderId, folderName, action) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on card        if (folderCard) {            folderCard.style.opacity = '0.6';            folderCard.style.pointerEvents = 'none';        }        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Deleting folder...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Processing folder deletion...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Convert action to boolean flags        const deleteContents = action === 'deleteAll';        const moveContentsToParent = action === 'moveToParent';        const moveContentsToRoot = action === 'moveToRoot';        // Use standardized API handler        const result = await handleApiRequest('/Folder/delete', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId,                DeleteContents: deleteContents,                MoveContentsToParent: moveContentsToParent,                MoveContentsToRoot: moveContentsToRoot            })        });        if (result.success) {            await handleSuccessfulDeletion(event, folderName, result.message);        } else {            // Restore card on error            if (folderCard) {                folderCard.style.opacity = '1';                folderCard.style.pointerEvents = 'auto';            }            await smoothErrorBannerWithPreview(`Failed to delete folder: ${result.message}`, "Failed!");        }    } catch (error) {        console.error('Delete folder error:', error);        // Restore card on error        if (folderCard) {            folderCard.style.opacity = '1';            folderCard.style.pointerEvents = 'auto';        }        await smoothErrorBannerWithPreview('Network error occurred while deleting folder', "Error!");    }}async function handleSuccessfulDeletion(event, folderName, message) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    // Use smooth transition for success    await smoothSuccessBannerWithPreview(        message || `Folder "${folderName}" deleted successfully.`,        "Deleted!",        8000    );    // Animate card removal    if (folderCard) {        folderCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';        folderCard.style.opacity = '0';        folderCard.style.transform = 'scale(0.8)';        setTimeout(() => {            folderCard.remove();        }, 300);    }}async function shareFile(fileId, fileName) {    try {        let selectedUsers = []; // Local to this function        const { value: shareData } = await KCloudModal.show({            title: '<i class="bi bi-share me-2"></i>Share File',            html: `                <div class="kcloud-form">                    <div class="kcloud-info-badge">                        <i class="bi bi-file-earmark me-2"></i>                        <span>Sharing: <strong>${fileName}</strong></span>                    </div>                                        <!-- Quick Actions Section -->                    <div class="kcloud-form-group">                        <button type="button" class="kcloud-btn-outline w-100" id="createPublicLinkBtn">                            <i class="bi bi-link-45deg me-2"></i>Create Public Link                        </button>                    </div>                                        <div class="kcloud-divider">                        <span>or share with specific users</span>                    </div>                                        <!-- User Search Section -->                    <div class="kcloud-form-group">                        <label class="kcloud-form-label">Search Users</label>                        <div class="kcloud-search-group">                            <div class="kcloud-input-wrapper">                                <i class="bi bi-search kcloud-input-icon"></i>                                <input type="text" id="userSearchInput" class="kcloud-input"                                        placeholder="Type username to search..." autocomplete="off">                            </div>                            <button type="button" id="searchBtn" class="kcloud-search-btn">                                <i class="bi bi-search"></i>                            </button>                        </div>                        <div id="searchResults" class="kcloud-search-results"></div>                        <div class="kcloud-form-help">Search for users by username or email</div>                    </div>                                        <!-- Selected Users -->                    <div class="kcloud-form-group">                        <label class="kcloud-form-label">Selected Users</label>                        <div id="selectedUsersContainer" class="kcloud-selected-users">                            <small class="text-muted">No users selected</small>                        </div>                    </div>                                        <!-- Permission Selection -->                    <div class="kcloud-form-group">                        <label for="permissionSelect" class="kcloud-form-label">Permission Level</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-shield-lock kcloud-input-icon"></i>                            <select id="permissionSelect" class="kcloud-input kcloud-select">                                <option value="Read">Read Only - Can view and download</option>                                <option value="Write">Write - Can view, download, and upload</option>                                <option value="Delete">Delete - Can view, download, upload, and delete</option>                                <option value="FullAccess">Full Access - All permissions</option>                            </select>                        </div>                        <div class="kcloud-form-help">Choose the level of access for shared users</div>                    </div>                                        <!-- Expiration Date -->                    <div class="kcloud-form-group">                        <label for="expirationDate" class="kcloud-form-label">Expiration Date (Optional)</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-calendar-event kcloud-input-icon"></i>                            <input type="datetime-local" id="expirationDate" class="kcloud-input">                        </div>                        <div class="kcloud-form-help">Leave empty for permanent access</div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-share me-1"></i> Share with Users',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-share-modal'            },            didOpen: () => {                setupKCloudShareModal(selectedUsers);                // Set minimum date to current time                const dateInput = document.getElementById('expirationDate');                const now = new Date();                const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);                dateInput.min = minDate;                // Add event listener for public link button                document.getElementById('createPublicLinkBtn').addEventListener('click', async () => {                    Swal.close();                    await createPublicLinkModal(fileId, fileName);                });            },            preConfirm: () => {                if (selectedUsers.length === 0) {                    Swal.showValidationMessage('Please select at least one user to share with');                    return false;                }                const expiresAt = document.getElementById('expirationDate').value;                // Validate expiration date if provided                if (expiresAt) {                    const expirationDate = new Date(expiresAt);                    const now = new Date();                    if (expirationDate <= now) {                        Swal.showValidationMessage('Expiration date must be in the future');                        return false;                    }                }                return {                    userIds: selectedUsers.map(u => u.id),                    permission: document.getElementById('permissionSelect').value,                    expiresAt: expiresAt || null                };            }        });        if (shareData) {            await performFileShare(fileId, shareData);        }    } catch (error) {        console.error('Share dialog error:', error);        showErrorBanner('Failed to show share dialog');    }}function setupKCloudShareModal(selectedUsers) {    const searchBtn = document.getElementById('searchBtn');    const searchInput = document.getElementById('userSearchInput');    const performUserSearch = async () => {        const searchTerm = searchInput.value.trim();        const resultsDiv = document.getElementById('searchResults');        if (searchTerm.length < 2) {            resultsDiv.style.display = 'none';            return;        }        try {            // Show loading in search results            resultsDiv.innerHTML = `                <div class="kcloud-search-loading">                    <div class="kcloud-mini-spinner"></div>                    <span>Searching users...</span>                </div>            `;            resultsDiv.style.display = 'block';            // Use standardized API handler            const result = await handleApiRequest(`/User/search?term=${encodeURIComponent(searchTerm)}`, {                method: 'GET',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            });            if (result.success) {                displayKCloudUserSearchResults(result.data || [], selectedUsers);            } else {                resultsDiv.innerHTML = `                    <div class="kcloud-search-error">                        <i class="bi bi-exclamation-triangle me-2"></i>                        ${result.message}                    </div>                `;                resultsDiv.style.display = 'block';            }        } catch (error) {            console.error('User search error:', error);            resultsDiv.innerHTML = `                <div class="kcloud-search-error">                    <i class="bi bi-exclamation-triangle me-2"></i>                    Search failed. Please try again.                </div>            `;            resultsDiv.style.display = 'block';        }    };    // Rest of the function stays the same...    searchBtn.addEventListener('click', performUserSearch);    searchInput.addEventListener('keypress', function(e) {        if (e.key === 'Enter') {            e.preventDefault();            performUserSearch();        }    });    let searchTimeout;    searchInput.addEventListener('input', function() {        clearTimeout(searchTimeout);        searchTimeout = setTimeout(() => {            if (this.value.length >= 2) {                performUserSearch();            } else {                document.getElementById('searchResults').style.display = 'none';            }        }, 300);    });}function displayKCloudUserSearchResults(users, selectedUsers) {    const resultsDiv = document.getElementById('searchResults');    if (users.length === 0) {        resultsDiv.innerHTML = `            <div class="kcloud-search-empty">                <i class="bi bi-person-x me-2"></i>                No users found            </div>        `;        resultsDiv.style.display = 'block';        return;    }    const userList = users.map(user => `        <div class="kcloud-user-result"              data-user-id="${user.id}"              data-username="${user.username}"              data-email="${user.email || ''}">            <div class="kcloud-user-avatar">                <i class="bi bi-person-circle"></i>            </div>            <div class="kcloud-user-info">                <div class="kcloud-user-name">${user.username}</div>                ${user.email ? `<div class="kcloud-user-email">${user.email}</div>` : ''}            </div>            <div class="kcloud-user-action">                <i class="bi bi-plus-circle"></i>            </div>        </div>    `).join('');    resultsDiv.innerHTML = userList;    resultsDiv.style.display = 'block';    // Add click and hover effects    resultsDiv.querySelectorAll('.kcloud-user-result').forEach(item => {        item.addEventListener('click', () => {            const userId = item.dataset.userId;            const username = item.dataset.username;            const email = item.dataset.email;            addKCloudUserToShare(userId, username, email, selectedUsers);        });    });}function addKCloudUserToShare(userId, username, email, selectedUsers) {    // Check if user already selected    if (selectedUsers.some(u => u.id === userId)) {        showWarningBanner('User already selected for sharing');        return;    }    selectedUsers.push({ id: userId, username, email });    updateKCloudSelectedUsersDisplay(selectedUsers);    // Clear search and hide results    document.getElementById('userSearchInput').value = '';    document.getElementById('searchResults').style.display = 'none';    // Show info banner instead of toast    showInfoBanner(`${username} added to share list`);}function updateKCloudSelectedUsersDisplay(selectedUsers) {    const container = document.getElementById('selectedUsersContainer');    if (selectedUsers.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';        return;    }    const userTags = selectedUsers.map((user, index) => `        <span class="kcloud-user-tag" data-index="${index}">            <div class="kcloud-tag-content">                <i class="bi bi-person me-1"></i>                <span class="kcloud-tag-name">${user.username}</span>                ${user.email ? `<small class="kcloud-tag-email">${user.email}</small>` : ''}            </div>            <button type="button" class="kcloud-tag-remove" onclick="removeKCloudUserFromShare(${index})">                <i class="bi bi-x"></i>            </button>        </span>    `).join('');    container.innerHTML = userTags;}function removeKCloudUserFromShare(userIndex) {    const container = document.getElementById('selectedUsersContainer');    const tags = container.querySelectorAll('.kcloud-user-tag');    // Remove the specific tag    if (tags[userIndex]) {        tags[userIndex].remove();    }    // Update display if no tags remain    const remainingTags = container.querySelectorAll('.kcloud-user-tag');    if (remainingTags.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';    }}async function performFileShare(fileId, shareData) {    try {        // Show loading with KCloud styling        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Sharing File...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Sharing with ${shareData.userIds.length} user${shareData.userIds.length !== 1 ? 's' : ''}...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/File/share', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                fileId: fileId,                userIds: shareData.userIds,                permission: shareData.permission,                expiresAt: shareData.expiresAt            })        });        if (result.success) {            await smoothSuccessBannerWithPreview(                `File shared with ${shareData.userIds.length} user${shareData.userIds.length !== 1 ? 's' : ''} successfully!`,                "Shared!",                8000            );        } else {            await smoothErrorBannerWithPreview(`Failed to share file: ${result.message}`, "Failed!");        }    } catch (error) {        console.error('Share error:', error);        await smoothErrorBannerWithPreview('Network error occurred while sharing file', "Error!");    }}async function createPublicLinkModal(fileId, fileName) {    try {        const { value: linkData } = await KCloudModal.show({            title: '<i class="bi bi-link-45deg me-2"></i>Create Public Link',            html: `                <div class="kcloud-form">                    <div class="kcloud-info-badge">                        <i class="bi bi-link me-2"></i>                        <span>Creating public link for: <strong>${fileName}</strong></span>                    </div>                                        <!-- Permission Selection -->                    <div class="kcloud-form-group">                        <label for="publicPermissionSelect" class="kcloud-form-label">Permission Level</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-shield-lock kcloud-input-icon"></i>                            <select id="publicPermissionSelect" class="kcloud-input kcloud-select">                                <option value="1">Read Only - Download access</option>                                <option value="2">Write - Download and upload access</option>                                <option value="3">Delete - Download, upload, and delete access</option>                                <option value="4">Full Access - All permissions</option>                            </select>                        </div>                        <div class="kcloud-form-help">Choose the level of access for this public link</div>                    </div>                                        <!-- Expiration Date -->                    <div class="kcloud-form-group">                        <label for="publicExpirationDate" class="kcloud-form-label">Expiration Date (Optional)</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-calendar-event kcloud-input-icon"></i>                            <input type="datetime-local" id="publicExpirationDate" class="kcloud-input">                        </div>                        <div class="kcloud-form-help">Leave empty for permanent access</div>                    </div>                    <!-- Security Notice -->                    <div class="kcloud-security-notice">                        <div class="kcloud-notice-header">                            <i class="bi bi-shield-exclamation me-2"></i>                            <span>Security Notice</span>                        </div>                        <div class="kcloud-notice-content">                            <p>Anyone with this link will be able to access your file. Share responsibly.</p>                            <ul class="kcloud-security-tips">                                <li>Set an expiration date for temporary access</li>                                <li>Use the minimum required permission level</li>                                <li>You can revoke the link anytime from file settings</li>                            </ul>                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-link-45deg me-1"></i> Create Link',            cancelButtonText: '<i class="bi bi-arrow-left me-1"></i> Back to Share Options',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-public-link-modal'            },            didOpen: () => {                // Set minimum date to current time                const dateInput = document.getElementById('publicExpirationDate');                const now = new Date();                const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);                dateInput.min = minDate;                // Add visual feedback for permission selection                const permissionSelect = document.getElementById('publicPermissionSelect');                permissionSelect.addEventListener('change', function() {                    const wrapper = this.parentElement;                    const value = parseInt(this.value);                    // Remove existing permission classes                    wrapper.classList.remove('permission-read', 'permission-write', 'permission-delete', 'permission-full');                    // Add class based on permission level                    const permissionClasses = {                        1: 'permission-read',                        2: 'permission-write',                        3: 'permission-delete',                        4: 'permission-full'                    };                    wrapper.classList.add(permissionClasses[value]);                });            },            preConfirm: () => {                const permission = parseInt(document.getElementById('publicPermissionSelect').value);                const expiresAt = document.getElementById('publicExpirationDate').value || null;                // Validate expiration date if provided                if (expiresAt) {                    const expirationDate = new Date(expiresAt);                    const now = new Date();                    if (expirationDate <= now) {                        Swal.showValidationMessage('Expiration date must be in the future');                        return false;                    }                    // Warn if expiration is very far in the future (more than 1 year)                    const oneYearFromNow = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);                    if (expirationDate > oneYearFromNow) {                        Swal.showValidationMessage('Expiration date cannot be more than 1 year in the future');                        return false;                    }                }                return {                    permission: permission,                    expiresAt: expiresAt                };            }        });        if (linkData) {            await performCreatePublicLink(fileId, linkData);        } else {            // User clicked "Back to Share Options" - reopen share modal            await shareFile(fileId, fileName);        }    } catch (error) {        console.error('Create public link dialog error:', error);        showErrorBanner('Failed to show public link dialog');    }}async function performCreatePublicLink(fileId, linkData) {    try {        // Show loading        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Creating Public Link...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Generating secure public link...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/File/public-link', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                fileId: fileId,                permission: linkData.permission,                expiresAt: linkData.expiresAt            })        });        if (result.success) {            const publicUrl = `${window.location.origin}/public/${result.data.publicLinkToken}`;            // For this one, we use a gentle transition, then show the result modal            await KCloudTransitions.modalToBanner(() => {                // Show a quick info banner first                showInfoBanner('Public link created! Opening link details...', 3000);            });            // Small delay, then show the link modal            setTimeout(() => {                KCloudModal.show({                    title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>Public Link Created!',                    html: `                        <div class="kcloud-success-content">                            <p>Public link created successfully!</p>                            <div class="kcloud-link-container">                                <label class="kcloud-form-label">Public Link:</label>                                <div class="kcloud-link-display">                                    <input type="text" class="kcloud-link-input" value="${publicUrl}" readonly>                                    <button type="button" class="kcloud-copy-btn" onclick="copyToClipboard('${publicUrl}')">                                        <i class="bi bi-clipboard"></i>                                    </button>                                </div>                                <div class="kcloud-form-help">Anyone with this link can access the file</div>                            </div>                        </div>                    `,                    confirmButtonText: 'Done',                    customClass: {                        popup: 'kcloud-modal kcloud-success-modal kcloud-link-modal'                    }                });            }, 1000);        } else {            await smoothErrorBannerWithPreview(`Failed to create public link: ${result.message}`, "Failed!");        }    } catch (error) {        console.error('Create public link error:', error);        await smoothErrorBannerWithPreview('Network error occurred while creating public link', "Error!");    }}function copyToClipboard(text) {    navigator.clipboard.writeText(text).then(() => {        // Show info banner instead of toast        showInfoBanner('Link copied to clipboard!');    }).catch(err => {        console.error('Failed to copy: ', err);        showErrorBanner('Failed to copy link to clipboard');    });}function getPermissionName(permission) {    switch(permission) {        case 1: return 'Read Only';        case 2: return 'Write';        case 3: return 'Delete';        case 4: return 'Full Access';        default: return 'Unknown';    }}// Banner System Functionsfunction showBanner(message, type = 'success', duration = 8000) {    // Remove any existing banner gracefully    const existingBanner = document.querySelector('.top-banner');    if (existingBanner) {        closeBanner(existingBanner);        // Wait for close animation before showing new banner        setTimeout(() => createNewBanner(message, type, duration), 300);    } else {        createNewBanner(message, type, duration);    }}function createNewBanner(message, type, duration) {    const bannerTypes = {        success: {            bg: 'linear-gradient(135deg, #059669 0%, #065143 50%, #047857 100%)',            text: '#F5F0F6',            img: '/img/icons/success.png',            border: '#10b981',            shadow: '0 8px 32px rgba(5, 150, 105, 0.4)',            glow: '0 0 20px rgba(16, 185, 129, 0.3)'        },        error: {            bg: 'linear-gradient(135deg, #dc2626 0%, #b91c1c 50%, #991b1b 100%)',            text: '#F5F0F6',            img: '/img/icons/error.png',            border: '#ef4444',            shadow: '0 8px 32px rgba(220, 38, 38, 0.4)',            glow: '0 0 20px rgba(239, 68, 68, 0.3)'        },        warning: {            bg: 'linear-gradient(135deg, #f59e0b 0%, #d97706 50%, #b45309 100%)',            text: '#F5F0F6',            img: '/img/icons/warning.png',            border: '#f59e0b',            shadow: '0 8px 32px rgba(245, 158, 11, 0.4)',            glow: '0 0 20px rgba(245, 158, 11, 0.3)'        },        info: {            bg: 'linear-gradient(135deg, #3b82f6 0%, #2563eb 50%, #1d4ed8 100%)',            text: '#F5F0F6',            img: '/img/icons/info.png',            border: '#60a5fa',            shadow: '0 8px 32px rgba(59, 130, 246, 0.4)',            glow: '0 0 20px rgba(96, 165, 250, 0.3)'        }    };    const config = bannerTypes[type] || bannerTypes.success;    const banner = document.createElement('div');    banner.className = 'top-banner';    banner.innerHTML = `        <div class="banner-content">            <div class="banner-left">                <div class="banner-icon-container">                    <img src="${config.img}" class="banner-icon-img" alt="${type} icon" />                    <div class="banner-icon-glow"></div>                </div>                <div class="banner-text-container">                    <span class="banner-message">${message}</span>                    <div class="banner-progress-bar"></div>                </div>            </div>            <button class="banner-close" aria-label="Close banner">                <i class="bi bi-x"></i>                <div class="close-hover-effect"></div>            </button>        </div>        <div class="banner-shimmer"></div>    `;    banner.style.cssText = `        position: fixed;        top: 0;        left: 0;        right: 0;        width: 100%;        background: ${config.bg};        color: ${config.text};        border-bottom: 3px solid ${config.border};        font-family: 'Azeret Mono', monospace;        font-weight: 600;        font-size: 1rem;        box-shadow: ${config.shadow};        z-index: 10000;        height: 70px;        overflow: hidden;        transform: translateY(-100%);        transition: all 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);        backdrop-filter: blur(10px);        -webkit-backdrop-filter: blur(10px);    `;    // Enhanced CSS for inner elements with hardware acceleration    const style = document.createElement('style');    style.textContent = `        .top-banner .banner-content {            display: flex;            align-items: center;            justify-content: space-between;            width: 100%;            height: 100%;            padding: 0 30px;            position: relative;            z-index: 2;        }        .top-banner .banner-left {            display: flex;            align-items: center;            flex: 1;            justify-content: center;            gap: 20px;        }        .top-banner .banner-icon-container {            position: relative;            display: flex;            align-items: center;            justify-content: center;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-icon-img {            width: 36px;            height: 36px;            object-fit: contain;            display: block;            filter: drop-shadow(0 4px 8px rgba(0,0,0,0.3));            animation: bannerIconPulse 2s ease-in-out infinite;            position: relative;            z-index: 2;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-icon-glow {            position: absolute;            top: 50%;            left: 50%;            transform: translate(-50%, -50%);            width: 50px;            height: 50px;            background: ${config.glow};            border-radius: 50%;            opacity: 0.6;            animation: bannerGlow 2s ease-in-out infinite alternate;            z-index: 1;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-text-container {            position: relative;            flex: 1;            max-width: 600px;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-message {            font-size: 1.1rem;            font-weight: 600;            line-height: 1.4;            text-shadow: 0 2px 4px rgba(0,0,0,0.3);            display: block;            text-align: center;            animation: bannerTextSlide 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) 0.3s both;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-progress-bar {            position: absolute;            bottom: -8px;            left: 50%;            transform: translateX(-50%);            height: 3px;            background: rgba(255,255,255,0.4);            border-radius: 2px;            width: 0%;            animation: bannerProgress ${duration}ms linear;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-close {            position: relative;            background: rgba(255,255,255,0.1);            border: 2px solid rgba(255,255,255,0.2);            color: inherit;            width: 42px;            height: 42px;            border-radius: 50%;            display: flex;            align-items: center;            justify-content: center;            cursor: pointer;            transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);            font-size: 1.3rem;            flex-shrink: 0;            backdrop-filter: blur(5px);            overflow: hidden;            transform: translateZ(0); /* Hardware acceleration */        }        .top-banner .banner-close:hover {            background: rgba(255,255,255,0.2);            border-color: rgba(255,255,255,0.4);            transform: scale(1.1) rotate(90deg) translateZ(0);            box-shadow: 0 0 15px rgba(255,255,255,0.3);        }        .top-banner .close-hover-effect {            position: absolute;            top: 50%;            left: 50%;            transform: translate(-50%, -50%) scale(0);            width: 100%;            height: 100%;            background: rgba(255,255,255,0.1);            border-radius: 50%;            transition: transform 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);            z-index: -1;        }        .top-banner .banner-close:hover .close-hover-effect {            transform: translate(-50%, -50%) scale(1);        }        .top-banner .banner-shimmer {            position: absolute;            top: 0;            left: -100%;            width: 100%;            height: 100%;            background: linear-gradient(                90deg,                transparent,                rgba(255,255,255,0.2),                transparent            );            animation: bannerShimmer 3s ease-in-out infinite;            z-index: 1;        }        /* Enhanced animations with hardware acceleration */        @keyframes bannerSlideDown {            0% {                transform: translateY(-100%) translateZ(0);                opacity: 0;            }            100% {                transform: translateY(0) translateZ(0);                opacity: 1;            }        }        @keyframes bannerSlideUp {            0% {                transform: translateY(0) translateZ(0);                opacity: 1;            }            100% {                transform: translateY(-100%) translateZ(0);                opacity: 0;            }        }        @keyframes bannerIconPulse {            0%, 100% { transform: scale(1) translateZ(0); }            50% { transform: scale(1.1) translateZ(0); }        }        @keyframes bannerGlow {            0% {                 opacity: 0.3;                 transform: translate(-50%, -50%) scale(0.8) translateZ(0);             }            100% {                 opacity: 0.7;                 transform: translate(-50%, -50%) scale(1.2) translateZ(0);             }        }        @keyframes bannerTextSlide {            0% {                opacity: 0;                transform: translateX(-30px) translateZ(0);            }            100% {                opacity: 1;                transform: translateX(0) translateZ(0);            }        }        @keyframes bannerProgress {            0% { width: 0%; }            100% { width: 100%; }        }        @keyframes bannerShimmer {            0% { left: -100%; }            50% { left: 100%; }            100% { left: 100%; }        }        /* Responsive design */        @media (max-width: 768px) {            .top-banner {                height: 80px !important;                font-size: 0.95rem !important;            }                        .top-banner .banner-content {                padding: 0 20px !important;            }                        .top-banner .banner-message {                font-size: 1rem !important;                padding-right: 15px;            }                        .top-banner .banner-close {                width: 38px !important;                height: 38px !important;                font-size: 1.1rem !important;            }            .top-banner .banner-icon-img {                width: 32px !important;                height: 32px !important;            }        }        @media (max-width: 480px) {            .top-banner .banner-left {                gap: 15px !important;            }                        .top-banner .banner-message {                font-size: 0.9rem !important;                line-height: 1.3 !important;            }        }    `;    // Add styles to head if not already present    if (!document.querySelector('#banner-styles')) {        style.id = 'banner-styles';        document.head.appendChild(style);    }    // Find navbar and adjust layout    const navbar = document.querySelector('.navbar, #navbar');    let insertTarget = document.body;    if (navbar && navbar.parentNode) {        insertTarget = navbar.parentNode;        navbar.parentNode.insertBefore(banner, navbar);        // Smooth navbar push-down animation        navbar.style.transition = 'margin-top 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275)';        navbar.style.marginTop = '70px';    } else {        document.body.insertBefore(banner, document.body.firstChild);    }    // DON'T trigger immediate animation - let GSAP or transition system handle it    // This will be handled by the transition system    // Add enhanced close functionality    const closeBtn = banner.querySelector('.banner-close');    closeBtn.onclick = (e) => {        e.preventDefault();        closeBanner(banner, navbar);    };    // Enhanced auto-close with pause-on-hover    if (duration > 0) {        let autoCloseTimeout = setTimeout(() => {            if (document.contains(banner)) {                closeBanner(banner, navbar);            }        }, duration);        banner.addEventListener('mouseenter', () => {            const progressBar = banner.querySelector('.banner-progress-bar');            if (progressBar) {                progressBar.style.animationPlayState = 'paused';            }            clearTimeout(autoCloseTimeout);        });        banner.addEventListener('mouseleave', () => {            const progressBar = banner.querySelector('.banner-progress-bar');            if (progressBar) {                progressBar.style.animationPlayState = 'running';            }            const remainingTime = duration * 0.3;            autoCloseTimeout = setTimeout(() => {                if (document.contains(banner)) {                    closeBanner(banner, navbar);                }            }, remainingTime);        });    }}function closeBanner(bannerElement = null, navbar = null) {    const banner = bannerElement || document.querySelector('.top-banner');    navbar = navbar || document.querySelector('.navbar, #navbar');    if (banner) {        // Elegant exit animation        banner.style.transition = 'all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1)';        banner.style.transform = 'translateY(-100%)';        banner.style.opacity = '0';        // Reset navbar position        if (navbar) {            navbar.style.transition = 'margin-top 0.5s cubic-bezier(0.175, 0.885, 0.32, 1)';            navbar.style.marginTop = '0';        }        // Remove banner after animation        setTimeout(() => {            if (banner.parentNode) {                banner.parentNode.removeChild(banner);            }        }, 500);    }}// Preset banner functionsfunction showSuccessBanner(message, duration = 8000) {    showBanner(message, 'success', duration);}function showErrorBanner(message, duration = 10000) {    showBanner(message, 'error', duration);}function showWarningBanner(message, duration = 9000) {    showBanner(message, 'warning', duration);}function showInfoBanner(message, duration = 7000) {    showBanner(message, 'info', duration);}function showWelcomeBanner(username) {    showSuccessBanner(`Welcome back, ${username}! You're successfully logged in to KCloud.`, 6000);}// Additional utility functionsfunction showPermanentBanner(message, type = 'info') {    showBanner(message, type, 0); // 0 duration = permanent}function dismissAllBanners() {    const banners = document.querySelectorAll('.top-banner');    banners.forEach(banner => closeBanner(banner));}