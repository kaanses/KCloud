async function showUploadDialog(currentFolderId = null, currentFolderName = null) {    try {        const { value: file } = await Swal.fire({            title: 'Upload File',            html: `                <div class="text-start">                    ${currentFolderName ? `<div class="alert alert-info">                        <i class="bi bi-folder me-2"></i>Uploading to: <strong>${currentFolderName}</strong>                    </div>` : ''}                    <label for="swal-file" class="form-label">Choose File(s)</label>                    <input type="file" id="swal-file" class="form-control" multiple accept="*/*">                    <div class="form-text mt-2">Maximum file size: 200 mb per file</div>                </div>            `,            focusConfirm: false,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-cloud-upload me-1"></i> Upload',            cancelButtonText: 'Cancel',            customClass: {                popup: 'swal-wide'            },            preConfirm: () => {                const fileInput = document.getElementById('swal-file');                if (!fileInput.files.length) {                    Swal.showValidationMessage('Please select at least one file');                    return false;                }                return fileInput.files;            }        });        if (file) {            await uploadFiles(file, currentFolderId);        }    } catch (error) {        console.error('Upload dialog error:', error);        Swal.fire({            icon: 'error',            title: 'Error',            text: 'Failed to show upload dialog'        });    }}async function uploadFiles(files, folderId = null) {    // Show loading dialog    Swal.fire({        title: 'Uploading...',        html: `            <div class="progress mb-3">                <div class="progress-bar progress-bar-striped progress-bar-animated"                      role="progressbar" style="width: 0%" id="upload-progress"></div>            </div>            <div id="upload-status">Preparing upload...</div>        `,        allowOutsideClick: false,        allowEscapeKey: false,        showConfirmButton: false,        didOpen: () => {            Swal.showLoading();        }    });    try {        // Prepare FormData        const formData = new FormData();        // Add files        if (files.length === 1) {            formData.append('File', files[0]);        } else {            Array.from(files).forEach(file => {                formData.append('Files', file);            });        }        // Add folder ID if provided        if (folderId && folderId.trim() !== '' && folderId !== 'undefined') {            formData.append('FolderId', folderId.trim());        }        // Add anti-forgery token        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;        if (token) {            formData.append('__RequestVerificationToken', token);        }        // Debug logging        console.log('Uploading files:', Array.from(files).map(f => f.name));        console.log('Target folder:', folderId || 'Root');        // Update status        document.getElementById('upload-status').textContent = `Uploading ${files.length} file(s)...`;        // Send request        const response = await fetch('/File/upload', {            method: 'POST',            body: formData        });        const result = await response.json();        if (result.success) {            // Success            await Swal.fire({                icon: 'success',                title: 'Upload Successful!',                text: result.message || `${files.length} file(s) uploaded successfully`,                timer: 2000,                showConfirmButton: false            });            // Reload page to show new files            location.reload();        } else {            // Server error            await Swal.fire({                icon: 'error',                title: 'Upload Failed',                text: result.message || 'Failed to upload files',                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Upload error:', error);        // Network/unexpected error        await Swal.fire({            icon: 'error',            title: 'Upload Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function showCreateFolderDialog(parentFolderId = null) {    try {        const { value: folderName } = await Swal.fire({            title: 'Create New Folder',            input: 'text',            inputLabel: 'Folder Name',            inputPlaceholder: 'Enter folder name...',            showCancelButton: true,            confirmButtonText: '<i class="bi bi-folder-plus me-1"></i> Create',            cancelButtonText: 'Cancel',            inputValidator: (value) => {                if (!value || !value.trim()) {                    return 'Please enter a folder name';                }                if (value.length > 50 ) {                    return 'Folder name is too long';                }                return null;            }        });        if (folderName) {            await createFolder(folderName.trim(), parentFolderId);        }    } catch (error) {        console.error('Create folder dialog error:', error);        Swal.fire({            icon: 'error',            title: 'Error',            text: 'Failed to show create folder dialog'        });    }}async function createFolder(folderName, parentFolderId = null) {    try {        // Show loading        Swal.fire({            title: 'Creating folder...',            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            didOpen: () => {                Swal.showLoading();            }        });        const requestData = {            Name: folderName,            ParentFolderId: parentFolderId && parentFolderId.trim() !== '' ? parentFolderId.trim() : null        };        const response = await fetch('/Folder/create', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify(requestData)        });        const result = await response.json();        if (result.success) {            await Swal.fire({                icon: 'success',                title: 'Folder Created!',                text: result.message || `Folder "${folderName}" created successfully`,                timer: 2000,                showConfirmButton: false            });            location.reload();        } else {            await Swal.fire({                icon: 'error',                title: 'Failed to Create Folder',                text: result.message || 'Could not create folder',                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Create folder error:', error);        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}function showAlert(type, message) {    const iconMap = {        'success': 'success',        'danger': 'error',        'error': 'error',        'warning': 'warning',        'info': 'info'    };    Swal.fire({        toast: true,        position: 'top-end',        icon: iconMap[type] || 'info',        title: message,        showConfirmButton: false,        timer: 4000,        timerProgressBar: true,        didOpen: (toast) => {            toast.addEventListener('mouseenter', Swal.stopTimer)            toast.addEventListener('mouseleave', Swal.resumeTimer)        }    });}async function renameFile(fileId, currentName) {    try {        const { value: newName } = await Swal.fire({            title: '<i class="bi bi-pencil me-2"></i>Rename File',            input: 'text',            inputValue: currentName,            inputLabel: 'File Name',            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            inputValidator: (value) => {                if (!value || !value.trim()) {                    return 'Please enter a file name';                }                if (value.length > 255) {                    return 'File name is too long';                }                return null;            }        });        if (newName && newName.trim() !== currentName) {            await performFileRename(fileId, newName.trim());        }    } catch (error) {        console.error('Rename dialog error:', error);        showAlert('error', 'Failed to show rename dialog');    }}async function performFileRename(fileId, newName) {    try {        Swal.fire({            title: 'Renaming file...',            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            didOpen: () => {                Swal.showLoading();            }        });        const response = await fetch('/file/update', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: fileId,                FileName: newName,                FolderId: null            })        });        const result = await response.json();        if (result.success) {            await Swal.fire({                icon: 'success',                title: 'File Renamed!',                text: result.message || 'File renamed successfully',                timer: 2000,                showConfirmButton: false            });            location.reload();        } else {            await Swal.fire({                icon: 'error',                title: 'Rename Failed',                text: result.message || 'Could not rename file',                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Rename error:', error);        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function deleteFile(event, fileId, fileName) {    try {        const result = await Swal.fire({            title: 'Delete File?',            html: `Are you sure you want to delete <strong>"${fileName}"</strong>?<br><br><small class="text-muted">This will move the file to trash.</small>`,            icon: 'warning',            showCancelButton: true,            confirmButtonColor: '#dc3545',            cancelButtonColor: '#6c757d',            confirmButtonText: '<i class="bi bi-trash me-1"></i> Delete',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel'        });        if (result.isConfirmed) {            await performFileDelete(event, fileId, fileName);        }    } catch (error) {        console.error('Delete dialog error:', error);        showAlert('error', 'Failed to show delete dialog');    }}async function performFileDelete(event, fileId, fileName) {    const fileCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on the card        if (fileCard) {            fileCard.style.opacity = '0.6';            fileCard.style.pointerEvents = 'none';        }        const response = await fetch(`/File/delete/${fileId}`, {            method: 'DELETE',            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        });        const result = await response.json();        if (result.success) {            // Animate card removal            if (fileCard) {                fileCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';                fileCard.style.opacity = '0';                fileCard.style.transform = 'scale(0.8)';                setTimeout(() => {                    fileCard.remove();                }, 300);            }            showAlert('success', result.message || 'File deleted successfully');        } else {            // Restore card on error            if (fileCard) {                fileCard.style.opacity = '1';                fileCard.style.pointerEvents = 'auto';            }            showAlert('error', result.message || 'Failed to delete file');        }    } catch (error) {        console.error('Delete error:', error);        // Restore card on error        if (fileCard) {            fileCard.style.opacity = '1';            fileCard.style.pointerEvents = 'auto';        }        showAlert('error', 'Network error occurred. Please try again.');    }}async function renameFolder(folderId, currentName) {    try {        const { value: newName } = await Swal.fire({            title: '<i class="bi bi-folder me-2"></i>Rename Folder',            input: 'text',            inputValue: currentName,            inputLabel: 'Folder Name',            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            inputValidator: (value) => {                if (!value || !value.trim()) {                    return 'Please enter a folder name';                }                if (value.length > 100) {                    return 'Folder name is too long';                }                if (/[<>:"/\\|?*]/.test(value)) {                    return 'Folder name contains invalid characters';                }                return null;            }        });        if (newName && newName.trim() !== currentName) {            Swal.fire({                title: 'Renaming folder...',                allowOutsideClick: false,                allowEscapeKey: false,                showConfirmButton: false,                didOpen: () => Swal.showLoading()            });            const response = await fetch('/Folder/update', {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                },                body: JSON.stringify({                    Id: folderId,                    Name: newName.trim()                })            });            const result = await response.json();            if (result.success) {                await Swal.fire({                    icon: 'success',                    title: 'Folder Renamed!',                    text: result.message,                    timer: 2000,                    showConfirmButton: false                });                location.reload();            } else {                await Swal.fire({                    icon: 'error',                    title: 'Rename Failed',                    text: result.message,                    confirmButtonText: 'OK'                });            }        }    } catch (error) {        console.error('Rename folder error:', error);        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function deleteFolder(event, folderId, folderName) {    try {        // Get folder details to check content AND get parent folder ID        const detailsResponse = await fetch('/Folder/details', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId            })        });        const detailsResult = await detailsResponse.json();        if (!detailsResult.success) {            await Swal.fire({                icon: 'error',                title: 'Error',                text: detailsResult.message || 'Failed to get folder details',                confirmButtonText: 'OK'            });            return;        }        const folderDetails = detailsResult.data || detailsResult.value || detailsResult;        const fileCount = folderDetails.fileCount || 0;        const subFolderCount = folderDetails.subFolderCount || 0;        const parentFolderId = folderDetails.parentFolderId; // Get parent folder ID        const isEmpty = fileCount === 0 && subFolderCount === 0;        // If folder is empty, proceed with simple delete        if (isEmpty) {            const confirmed = await Swal.fire({                title: `Delete "${folderName}"?`,                text: 'This folder is empty and will be deleted permanently.',                icon: 'warning',                showCancelButton: true,                confirmButtonColor: '#dc3545',                cancelButtonColor: '#6c757d',                confirmButtonText: '<i class="bi bi-trash me-1"></i> Delete',                cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel'            });            if (confirmed.isConfirmed) {                await performFolderDeletion(event, folderId, folderName, 'deleteAll');            }            return;        }        // If folder has content, show options (now with parent folder ID)        const action = await showFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId);        if (action) {            await performFolderDeletion(event, folderId, folderName, action);        }    } catch (error) {        console.error('Delete folder error:', error);        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function showFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId = null) {    const contentDescription = [];    if (fileCount > 0) contentDescription.push(`${fileCount} file(s)`);    if (subFolderCount > 0) contentDescription.push(`${subFolderCount} subfolder(s)`);    // Build the move to parent option conditionally    const moveToParentOption = parentFolderId ? `        <div class="form-check mb-2">            <input class="form-check-input" type="radio" name="deleteAction" id="moveToParent" value="moveToParent">            <label class="form-check-label" for="moveToParent">                <i class="bi bi-arrow-up me-2"></i><strong>Move to parent folder</strong> (keep contents, move them up one level)            </label>        </div>    ` : '';    const { value: action } = await Swal.fire({        title: `Delete "${folderName}"?`,        html: `            <div class="text-start">                <p>This folder contains <strong>${contentDescription.join(' and ')}</strong>.</p>                <p class="mb-3">What would you like to do with the contents?</p>                                <div class="form-check mb-2">                    <input class="form-check-input" type="radio" name="deleteAction" id="deleteAll" value="deleteAll">                    <label class="form-check-label text-danger" for="deleteAll">                        <i class="bi bi-trash me-2"></i><strong>Delete everything</strong> (contents will be permanently deleted)                    </label>                </div>                                ${moveToParentOption}                                <div class="form-check mb-3">                    <input class="form-check-input" type="radio" name="deleteAction" id="moveToRoot" value="moveToRoot">                    <label class="form-check-label" for="moveToRoot">                        <i class="bi bi-house me-2"></i><strong>Move to root</strong> (keep contents, move them to main folder)                    </label>                </div>            </div>        `,        showCancelButton: true,        confirmButtonText: '<i class="bi bi-check me-1"></i> Proceed',        cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',        customClass: {            popup: 'swal-wide'        },        preConfirm: () => {            const selectedAction = document.querySelector('input[name="deleteAction"]:checked');            if (!selectedAction) {                Swal.showValidationMessage('Please select an option');                return false;            }            return selectedAction.value;        }    });    return action;}async function performFolderDeletion(event, folderId, folderName, action) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on card        if (folderCard) {            folderCard.style.opacity = '0.6';            folderCard.style.pointerEvents = 'none';        }        Swal.fire({            title: 'Deleting folder...',            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            didOpen: () => Swal.showLoading()        });        // Convert action to boolean flags        const deleteContents = action === 'deleteAll';        const moveContentsToParent = action === 'moveToParent';        const moveContentsToRoot = action === 'moveToRoot';        const response = await fetch('/Folder/delete', {            method: 'POST',             headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId,                DeleteContents: deleteContents,                MoveContentsToParent: moveContentsToParent,                MoveContentsToRoot: moveContentsToRoot            })        });        const result = await response.json();        if (result.success) {            await handleSuccessfulDeletion(event, folderName, result.message);        } else {            // Restore card on error            if (folderCard) {                folderCard.style.opacity = '1';                folderCard.style.pointerEvents = 'auto';            }            await Swal.fire({                icon: 'error',                title: 'Delete Failed',                text: result.message,                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Delete folder error:', error);        // Restore card on error        if (folderCard) {            folderCard.style.opacity = '1';            folderCard.style.pointerEvents = 'auto';        }        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function handleSuccessfulDeletion(event, folderName, message) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    // Animate card removal    if (folderCard) {        folderCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';        folderCard.style.opacity = '0';        folderCard.style.transform = 'scale(0.8)';        setTimeout(() => {            folderCard.remove();        }, 300);    }    await Swal.fire({        icon: 'success',        title: 'Folder Deleted!',        text: message || `Folder "${folderName}" deleted    successfully.`,        timer: 2000,        showConfirmButton: false    });}async function shareFile(fileId, fileName) {    try {        let selectedUsers = []; // Local to this function        const { value: shareData } = await Swal.fire({            title: 'Share File',            html: `                <div class="text-start">                    <div class="alert alert-info mb-3">                        <i class="bi bi-file-earmark me-2"></i>Sharing: <strong>${fileName}</strong>                    </div>                                        <!-- User Search Section -->                    <div class="mb-3">                        <label class="form-label">Search Users</label>                        <div class="input-group">                            <input type="text" id="userSearchInput" class="form-control"                                    placeholder="Type username to search..." autocomplete="off">                            <button type="button" id="searchBtn" class="btn btn-outline-secondary">                                <i class="bi bi-search"></i>                            </button>                        </div>                        <div id="searchResults" class="mt-2 border rounded" style="max-height: 150px; overflow-y: auto; display: none;"></div>                    </div>                                        <!-- Selected Users -->                    <div class="mb-3">                        <label class="form-label">Selected Users</label>                        <div id="selectedUsersContainer" class="border rounded p-2 min-height-50">                            <small class="text-muted">No users selected</small>                        </div>                    </div>                                        <!-- Permission Selection -->                    <div class="mb-3">                        <label for="permissionSelect" class="form-label">Permission Level</label>                        <select id="permissionSelect" class="form-select">                            <option value="Read">Read Only - Can view and download</option>                            <option value="Write">Write - Can view, download, and upload</option>                            <option value="Delete">Delete - Can view, download, upload, and delete</option>                            <option value="FullAccess">Full Access - All permissions</option>                        </select>                    </div>                                        <!-- Expiration Date -->                    <div class="mb-3">                        <label for="expirationDate" class="form-label">Expiration Date (Optional)</label>                        <input type="datetime-local" id="expirationDate" class="form-control">                        <div class="form-text">Leave empty for permanent access</div>                    </div>                </div>            `,            width: 600,            focusConfirm: false,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-share me-1"></i> Share File',            cancelButtonText: 'Cancel',            customClass: {                popup: 'swal-wide'            },            didOpen: () => {                setupShareModal(selectedUsers);            },            preConfirm: () => {                if (selectedUsers.length === 0) {                    Swal.showValidationMessage('Please select at least one user to share with');                    return false;                }                return {                    userIds: selectedUsers.map(u => u.id),                    permission: document.getElementById('permissionSelect').value,                    expiresAt: document.getElementById('expirationDate').value || null                };            }        });        if (shareData) {            await performFileShare(fileId, shareData);        }    } catch (error) {        console.error('Share dialog error:', error);        Swal.fire({            icon: 'error',            title: 'Error',            text: 'Failed to show share dialog'        });    }}function setupShareModal(selectedUsers) {    const searchBtn = document.getElementById('searchBtn');    const searchInput = document.getElementById('userSearchInput');    // Create local functions that have access to selectedUsers    const performUserSearch = async () => {        const searchTerm = searchInput.value.trim();        const resultsDiv = document.getElementById('searchResults');        if (searchTerm.length < 2) {            resultsDiv.style.display = 'none';            return;        }        try {            const response = await fetch(`/User/search?term=${encodeURIComponent(searchTerm)}`, {                method: 'GET',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            });            const result = await response.json();            displayUserSearchResults(result.users || [], selectedUsers);        } catch (error) {            console.error('User search error:', error);            resultsDiv.innerHTML = '<div class="p-2 text-danger">Search failed</div>';            resultsDiv.style.display = 'block';        }    };    // Search button click    searchBtn.addEventListener('click', performUserSearch);    // Enter key in search input    searchInput.addEventListener('keypress', function(e) {        if (e.key === 'Enter') {            e.preventDefault();            performUserSearch();        }    });    // Search as user types (debounced)    let searchTimeout;    searchInput.addEventListener('input', function() {        clearTimeout(searchTimeout);        searchTimeout = setTimeout(() => {            if (this.value.length >= 2) {                performUserSearch();            } else {                document.getElementById('searchResults').style.display = 'none';            }        }, 300);    });}function displayUserSearchResults(users, selectedUsers) {    const resultsDiv = document.getElementById('searchResults');    if (users.length === 0) {        resultsDiv.innerHTML = '<div class="p-2 text-muted">No users found</div>';        resultsDiv.style.display = 'block';        return;    }    const userList = users.map(user => `        <div class="user-result p-2 border-bottom" style="cursor: pointer;"              data-user-id="${user.id}" data-username="${user.username}" data-email="${user.email || ''}">            <div class="d-flex align-items-center">                <i class="bi bi-person-circle me-2 text-primary"></i>                <div>                    <div class="fw-medium">${user.username}</div>                    ${user.email ? `<small class="text-muted">${user.email}</small>` : ''}                </div>            </div>        </div>    `).join('');    resultsDiv.innerHTML = userList;    resultsDiv.style.display = 'block';    // Add click and hover effects    resultsDiv.querySelectorAll('.user-result').forEach(item => {        item.addEventListener('mouseenter', () => item.style.backgroundColor = '#f8f9fa');        item.addEventListener('mouseleave', () => item.style.backgroundColor = '');        item.addEventListener('click', () => {            const userId = item.dataset.userId;            const username = item.dataset.username;            const email = item.dataset.email;            addUserToShare(userId, username, email, selectedUsers);        });    });}function addUserToShare(userId, username, email, selectedUsers) {    // Check if user already selected    if (selectedUsers.some(u => u.id === userId)) {        showAlert('warning', 'User already selected');        return;    }    selectedUsers.push({ id: userId, username, email });    updateSelectedUsersDisplay(selectedUsers);    // Clear search and hide results    document.getElementById('userSearchInput').value = '';    document.getElementById('searchResults').style.display = 'none';}function updateSelectedUsersDisplay(selectedUsers) {    const container = document.getElementById('selectedUsersContainer');    if (selectedUsers.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';        return;    }    const userTags = selectedUsers.map((user, index) => `        <span class="badge bg-primary me-2 mb-2 p-2">            <i class="bi bi-person me-1"></i>            ${user.username}            <button type="button" class="btn-close btn-close-white ms-2"                     onclick="removeUserFromShare(${index}, this)" style="font-size: 0.7em;"></button>        </span>    `).join('');    container.innerHTML = userTags;}function removeUserFromShare(userIndex, buttonElement) {    // Find the badge element and remove it    const badge = buttonElement.closest('.badge');    if (badge) {        badge.remove();    }    // Update the container display    const container = document.getElementById('selectedUsersContainer');    const remainingBadges = container.querySelectorAll('.badge');    if (remainingBadges.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';    }}async function performFileShare(fileId, shareData) {    try {        const response = await fetch('/File/share', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                fileId: fileId,                userIds: shareData.userIds,                permission: shareData.permission,                expiresAt: shareData.expiresAt            })        });        const result = await response.json();        if (result.success) {            Swal.fire({                icon: 'success',                title: 'Success!',                text: result.message || 'File shared successfully',                timer: 2000,                showConfirmButton: false            });        } else {            Swal.fire({                icon: 'error',                title: 'Share Failed',                text: result.message || 'Failed to share file'            });        }    } catch (error) {        console.error('Share error:', error);        Swal.fire({            icon: 'error',            title: 'Network Error',            text: 'Failed to share file. Please try again.'        });    }}