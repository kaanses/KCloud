const KCloudModal = {    baseConfig: {        background: 'linear-gradient(145deg, rgba(41, 41, 41, 0.98), rgba(19, 6, 35, 0.95))',        backdrop: `            rgba(0, 0, 0, 0.8)            backdrop-filter: blur(10px);            -webkit-backdrop-filter: blur(10px);        `,        customClass: {            popup: 'kcloud-modal',            title: 'kcloud-modal-title',            htmlContainer: 'kcloud-modal-content',            confirmButton: 'kcloud-btn-primary',            cancelButton: 'kcloud-btn-outline'        },        buttonsStyling: false, // Use our custom button classes        showClass: {            popup: 'animate__animated animate__fadeInUp animate__faster'        },        hideClass: {            popup: 'animate__animated animate__fadeOutDown animate__faster'        }    },    // Method to show modal with base styling + custom options    show(options = {}) {        const config = {            ...this.baseConfig,            ...options,            customClass: {                ...this.baseConfig.customClass,                ...(options.customClass || {})            }        };        return Swal.fire(config);    }};async function handleApiRequest(url, options) {    try {        console.log("🚀 Making request to:", url);        console.log("📦 Request options:", options);        const response = await fetch(url, options);        console.log("📡 Response status:", response.status, response.statusText);        const result = await response.json();        console.log("📄 Raw response data:", result);        // Success Detection        if (response.ok && result.success !== false) {            console.log("✅ Detected as SUCCESS");            return {                success: true,                message: result.message || 'Operation successful',                data: result.data || result            };        }        console.log("❌ Detected as ERROR");        // Error Extraction (Priority Order)        let errorMessage = 'Operation failed';        // 1. Specific errors array        if (result.errors && Array.isArray(result.errors) && result.errors.length > 0) {            console.log("🔍 Using errors array:", result.errors);            errorMessage = result.errors.filter(e => e && e.trim()).join(', ');        }        // 2. Validation errors        else if (result.validationErrors && Array.isArray(result.validationErrors) && result.validationErrors.length > 0) {            console.log("🔍 Using validation errors:", result.validationErrors);            errorMessage = result.validationErrors                .map(e => e.field ? `${e.field}: ${e.message}` : e.message)                .join(', ');        }        // 3. Generic message        else if (result.message && result.message !== "Operation failed") {            console.log("🔍 Using generic message:", result.message);            errorMessage = result.message;        }        // 4. HTTP status fallback        else if (!response.ok) {            console.log("🔍 Using HTTP status fallback");            errorMessage = `Server error: ${response.status} ${response.statusText}`;        }        console.log("💬 Final error message:", errorMessage);        return {            success: false,            message: errorMessage        };    } catch (error) {        console.error("🔥 Network error:", error);        return {            success: false,            message: 'Network error occurred'        };    }}async function renameFile(fileId, currentName) {    try {        const { value: newName } = await KCloudModal.show({            title: '<i class="bi bi-pencil me-2"></i>Rename File',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-rename-input" class="kcloud-form-label">                            File Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-file-earmark kcloud-input-icon"></i>                            <input type="text" id="kcloud-rename-input" class="kcloud-input"                                    maxlength="255" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Enter the new name for your file                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-rename-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-rename-input');                input.value = currentName;                input.focus();                const lastDotIndex = currentName.lastIndexOf('.');                if (lastDotIndex > 0) {                    input.setSelectionRange(0, lastDotIndex);                } else {                    input.select();                }                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });            },            preConfirm: () => {                const newName = document.getElementById('kcloud-rename-input').value;                const newNameTrimmed = newName.trim();                if (!newNameTrimmed) {                    Swal.showValidationMessage('Please enter a file name');                    return false;                }                if (newNameTrimmed.length > 255) {                    Swal.showValidationMessage('File name is too long (max 255 characters)');                    return false;                }                if (newNameTrimmed === currentName) {                    Swal.showValidationMessage('Please enter a different name');                    return false;                }                const invalidChars = /[<>:"/\\|?*\r\n\t]/g;                if (invalidChars.test(newNameTrimmed)) {                    Swal.showValidationMessage('File name contains invalid characters');                    return false;                }                if (newNameTrimmed.startsWith(' ') || newNameTrimmed.endsWith(' ') || newNameTrimmed.endsWith('.')) {                    Swal.showValidationMessage('File name cannot start/end with spaces or dots');                    return false;                }                return newNameTrimmed;            }        });        if (newName && newName.trim() !== currentName) {            await performFileRename(fileId, newName.trim(), currentName); // HERE IS WHERE IT'S CALLED        }    } catch (error) {        console.error('Rename dialog error:', error);        showKCloudError('Failed to show rename dialog');    }}async function performFileRename(fileId, newName, oldName) {    try {        // Show loading with file-specific messaging        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Renaming File...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <div class="kcloud-rename-progress">                        <p class="kcloud-old-name">From: <span>"${oldName}"</span></p>                        <i class="bi bi-arrow-down kcloud-arrow"></i>                        <p class="kcloud-new-name">To: <span>"${newName}"</span></p>                    </div>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal kcloud-rename-loading'            }        });        // Use standardized API handler        const result = await handleApiRequest('/file/update', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: fileId,                FileName: newName,                FolderId: null            })        });        if (result.success) {            // Success notification            await KCloudModal.show({                title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>File Renamed!',                html: `                    <div class="kcloud-success-content">                        <div class="kcloud-rename-success">                            <p>Successfully renamed to:</p>                            <p class="kcloud-new-filename"><strong>"${newName}"</strong></p>                        </div>                    </div>                `,                timer: 2500,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-success-modal'                }            });            location.reload();        } else {            // Error notification with proper error message            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Rename Failed',                html: `                    <div class="kcloud-error-content">                        <p>${result.message}</p>                        <div class="kcloud-error-details">                            <small>Attempted to rename "${oldName}" to "${newName}"</small>                        </div>                    </div>                `,                confirmButtonText: 'Try Again',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });        }    } catch (error) {        console.error('Rename error:', error);        showKCloudError('Network error occurred. Please try again.');    }}async function restoreFile(event, fileId, fileName = null, restoreAll = false) {    event.preventDefault();    let title, text, confirmText;    if (restoreAll) {        title = 'Restore All Files?';        text = 'Are you sure you want to restore all files from trash?';        confirmText = 'Yes, restore all!';    } else {        title = 'Restore File?';        text = `Are you sure you want to restore "${fileName}"?`;        confirmText = 'Yes, restore it!';    }    // Show confirmation dialog    const result = await Swal.fire({        title: title,        text: text,        icon: 'question',        showCancelButton: true,        confirmButtonColor: '#d4ff00',        cancelButtonColor: '#6c757d',        confirmButtonText: confirmText,        cancelButtonText: 'Cancel',        background: '#292929',        color: 'white',        customClass: {            confirmButton: 'btn-confirm-custom',            cancelButton: 'btn-cancel-custom'        }    });    if (result.isConfirmed) {        try {            // Show loading            Swal.fire({                title: restoreAll ? 'Restoring all files...' : 'Restoring file...',                text: restoreAll ? 'Please wait while all files are restored.' : `Restoring "${fileName}"...`,                allowOutsideClick: false,                allowEscapeKey: false,                showConfirmButton: false,                didOpen: () => Swal.showLoading()            });            // Use standardized API handler            const apiResult = await handleApiRequest(`/File/restore/${fileId}?restoreAll=${restoreAll}`, {                method: 'POST',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            });            if (apiResult.success) {                // Close loading modal                Swal.close();                // Show success message with toast                const successMessage = restoreAll                    ? "All files have been restored successfully!"                    : `"${fileName}" has been restored successfully!`;                Toastify({                    text: successMessage,                    duration: 3000,                    gravity: "top",                    position: "right",                    backgroundColor: "#d4ff00",                    className: "success-toast",                    style: {                        color: "#130623",                        fontFamily: "'Azeret Mono', monospace",                        fontWeight: "600"                    }                }).showToast();                // Reload the page to update the file list                setTimeout(() => {                    window.location.reload();                }, 1000);            } else {                // Show error with proper message                await Swal.fire({                    title: 'Restore Failed!',                    text: apiResult.message,                    icon: 'error',                    confirmButtonColor: '#ff6b6b',                    background: '#292929',                    color: 'white'                });            }        } catch (error) {            console.error('Error:', error);            await Swal.fire({                title: 'Error!',                text: 'Network error occurred. Please try again.',                icon: 'error',                confirmButtonColor: '#ff6b6b',                background: '#292929',                color: 'white'            });        }    }}// Helper function for restore all buttonfunction restoreAllFiles() {    restoreFile(event, null, null, true);}/** * Empty the trash completely */async function emptyTrash() {    try {        // Show warning confirmation dialog        const result = await Swal.fire({            title: 'Empty Trash?',            text: 'This will permanently delete all files in trash. This action cannot be undone!',            icon: 'warning',            showCancelButton: true,            confirmButtonColor: '#ff6b6b',            cancelButtonColor: '#6c757d',            confirmButtonText: 'Yes, empty trash!',            cancelButtonText: 'Cancel',            background: '#292929',            color: 'white',            customClass: {                confirmButton: 'btn-danger-custom',                cancelButton: 'btn-cancel-custom'            }        });        if (!result.isConfirmed) return;        // Second confirmation for safety        const finalResult = await Swal.fire({            title: 'Are you absolutely sure?',            text: 'All files will be permanently deleted!',            icon: 'error',            showCancelButton: true,            confirmButtonColor: '#ff6b6b',            cancelButtonColor: '#6c757d',            confirmButtonText: 'DELETE EVERYTHING',            cancelButtonText: 'Cancel',            background: '#292929',            color: 'white'        });        if (!finalResult.isConfirmed) return;        // Show loading        Swal.fire({            title: 'Emptying trash...',            text: 'Please wait while all files are permanently deleted.',            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            didOpen: () => Swal.showLoading()        });        // Use standardized API handler        const apiResult = await handleApiRequest('/File/empty-trash', {            method: 'POST',            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        });        if (apiResult.success) {            // Close loading modal            Swal.close();            // Show success message            Toastify({                text: "Trash has been emptied successfully!",                duration: 3000,                gravity: "top",                position: "right",                backgroundColor: "#ff6b6b",                className: "success-toast",                style: {                    color: "white",                    fontFamily: "'Azeret Mono', monospace",                    fontWeight: "600"                }            }).showToast();            setTimeout(() => {                window.location.reload();            }, 1000);        } else {            await Swal.fire({                title: 'Error!',                text: apiResult.message,                icon: 'error',                confirmButtonColor: '#ff6b6b',                background: '#292929',                color: 'white'            });        }    } catch (error) {        console.error('Error:', error);        await Swal.fire({            title: 'Error!',            text: 'Network error occurred. Please try again.',            icon: 'error',            confirmButtonColor: '#ff6b6b',            background: '#292929',            color: 'white'        });    }}/** * Clear search and return to normal view */function clearSearch() {    // Get current URL    const url = new URL(window.location);    // Remove search parameter    url.searchParams.delete('search');    // Redirect to URL without search    window.location.href = url.toString();}async function showUploadDialog(currentFolderId = null, currentFolderName = null) {    try {        const { value: file } = await KCloudModal.show({            title: '<i class="bi bi-cloud-upload me-2"></i>Upload Files',            html: `                <div class="kcloud-upload-form">                    ${currentFolderName ? `                        <div class="kcloud-info-badge">                            <i class="bi bi-folder me-2"></i>                            <span>Uploading to: <strong>${currentFolderName}</strong></span>                        </div>                    ` : ''}                                        <div class="kcloud-form-group">                        <label for="kcloud-file-input" class="kcloud-form-label">                            Choose File(s)                        </label>                        <div class="kcloud-file-input-wrapper" id="kcloud-drop-zone">                            <input type="file" id="kcloud-file-input" class="kcloud-file-input"                                    multiple accept="*/*">                            <div class="kcloud-file-input-overlay">                                <i class="bi bi-cloud-upload kcloud-upload-icon"></i>                                <span class="kcloud-drop-text">Click to browse or drag & drop files</span>                                <div class="kcloud-selected-files " id="kcloud-selected-files"></div>                            </div>                        </div>                        <div class="kcloud-form-help">                            Maximum file size: 50 MB per file                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-cloud-upload me-1"></i> Upload',            cancelButtonText: 'Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-upload-modal'            },            didOpen: () => {                initializeDragAndDrop();            },            preConfirm: () => {                const fileInput = document.getElementById('kcloud-file-input');                if (!fileInput.files.length) {                    Swal.showValidationMessage('Please select at least one file');                    return false;                }                return fileInput.files;            }        });        if (file) {            await uploadFiles(file, currentFolderId);        }    } catch (error) {        console.error('Upload dialog error:', error);        KCloudModal.show({            icon: 'error',            title: 'Upload Error',            text: 'Failed to show upload dialog',            confirmButtonText: 'OK'        });    }}function initializeDragAndDrop() {    const dropZone = document.getElementById('kcloud-drop-zone');    const fileInput = document.getElementById('kcloud-file-input');    const selectedFilesDiv = document.getElementById('kcloud-selected-files');    const dropText = document.querySelector('.kcloud-drop-text');    if (!dropZone || !fileInput) return;    // Handle file selection display    function updateSelectedFiles(files) {        if (files.length === 0) {            selectedFilesDiv.innerHTML = '';            dropText.textContent = 'Click to browse or drag & drop files';            return;        }        const fileList = Array.from(files).map(file => {            const size = formatFileSize(file.size);            return `<div class="kcloud-selected-file">                <i class="bi bi-file-earmark me-2 mt-2"></i>                <span class="mt-2">${file.name}</span>                <small class="text-muted ms-2 mt-2">(${size})</small>            </div>`;        }).join('');        selectedFilesDiv.innerHTML = `            <div class="kcloud-files-list">                <div class="kcloud-files-header mt-2 mb-2">                    <strong>${files.length} file${files.length > 1 ? 's' : ''} selected:</strong>                </div>                ${fileList}            </div>        `;        dropText.textContent = 'Click to change selection';    }    // File input change handler    fileInput.addEventListener('change', (e) => {        updateSelectedFiles(e.target.files);    });    // Prevent default drag behaviors    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {        dropZone.addEventListener(eventName, preventDefaults, false);        document.body.addEventListener(eventName, preventDefaults, false);    });    // Highlight drop zone when item is dragged over it    ['dragenter', 'dragover'].forEach(eventName => {        dropZone.addEventListener(eventName, highlight, false);    });    ['dragleave', 'drop'].forEach(eventName => {        dropZone.addEventListener(eventName, unhighlight, false);    });    // Handle dropped files    dropZone.addEventListener('drop', handleDrop, false);    function preventDefaults(e) {        e.preventDefault();        e.stopPropagation();    }    function highlight(e) {        dropZone.classList.add('kcloud-drag-over');    }    function unhighlight(e) {        dropZone.classList.remove('kcloud-drag-over');    }    function handleDrop(e) {        const dt = e.dataTransfer;        const files = dt.files;        // Update the file input with dropped files        fileInput.files = files;        updateSelectedFiles(files);    }    function formatFileSize(bytes) {        const sizes = ['B', 'KB', 'MB', 'GB'];        if (bytes === 0) return '0 B';        const i = Math.floor(Math.log(bytes) / Math.log(1024));        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];    }}async function uploadFiles(files, folderId = null) {    // Show loading dialog    Swal.fire({        title: 'Uploading...',        html: `            <div class="progress mb-3">                <div class="progress-bar progress-bar-striped progress-bar-animated"                      role="progressbar" style="width: 0%" id="upload-progress"></div>            </div>            <div id="upload-status">Preparing upload...</div>        `,        allowOutsideClick: false,        allowEscapeKey: false,        showConfirmButton: false,        didOpen: () => {            Swal.showLoading();        }    });    try {        // Prepare FormData        const formData = new FormData();        // Add files        if (files.length === 1) {            formData.append('File', files[0]);        } else {            Array.from(files).forEach(file => {                formData.append('Files', file);            });        }        // Add folder ID if provided        if (folderId && folderId.trim() !== '' && folderId !== 'undefined') {            formData.append('FolderId', folderId.trim());        }        // Add anti-forgery token        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;        if (token) {            formData.append('__RequestVerificationToken', token);        }        // Debug logging        console.log('Uploading files:', Array.from(files).map(f => f.name));        console.log('Target folder:', folderId || 'Root');        // Update status        document.getElementById('upload-status').textContent = `Uploading ${files.length} file(s)...`;        // Send request        const response = await fetch('/File/upload', {            method: 'POST',            body: formData        });        console.log('Response status:', response.status);        console.log('Response ok:', response.ok);        const result = await response.json();        // DETAILED DEBUG LOGGING        console.log('=== RESPONSE DEBUG ===');        console.log('Full response body:', result);        console.log('result.success:', result.success);        console.log('result.message:', result.message);        console.log('result.errors (type):', typeof result.errors);        console.log('result.errors (isArray):', Array.isArray(result.errors));        console.log('result.errors (value):', result.errors);        console.log('result.validationErrors:', result.validationErrors);        console.log('=== END DEBUG ===');        // Check for success based on HTTP status AND response content        if (response.ok && (result.success !== false)) {            // Success case            let successMessage = 'Upload successful!';            if (result.message) {                successMessage = result.message;            } else if (result.success && result.message) {                successMessage = result.message;            } else {                successMessage = `${files.length} file(s) uploaded successfully`;            }            await Swal.fire({                icon: 'success',                title: 'Upload Successful!',                text: successMessage,                timer: 2000,                showConfirmButton: false            });            // Reload page to show new files            location.reload();        } else {            // ENHANCED ERROR EXTRACTION WITH DEBUGGING            let errorMessage = 'Failed to upload files';            let errorSource = 'default';            console.log('=== ERROR EXTRACTION DEBUG ===');            // Priority 1: Check for specific errors array            if (result.errors) {                console.log('Found result.errors:', result.errors);                if (Array.isArray(result.errors) && result.errors.length > 0) {                    const validErrors = result.errors.filter(e => e && e.trim());                    if (validErrors.length > 0) {                        errorMessage = validErrors.join(', ');                        errorSource = 'errors array';                        console.log('Using errors array:', errorMessage);                    }                } else if (typeof result.errors === 'string' && result.errors.trim()) {                    errorMessage = result.errors;                    errorSource = 'errors string';                    console.log('Using errors string:', errorMessage);                }            }            // Priority 2: Check for validation errors (only if no errors found yet)            if (errorSource === 'default' && result.validationErrors && Array.isArray(result.validationErrors) && result.validationErrors.length > 0) {                errorMessage = result.validationErrors                    .map(e => e.field ? `${e.field}: ${e.message}` : e.message)                    .filter(msg => msg && msg.trim())                    .join(', ');                errorSource = 'validation errors';                console.log('Using validation errors:', errorMessage);            }            // Priority 3: Check for message (only if not generic)            if (errorSource === 'default' && result.message && result.message !== "Upload failed" && result.message.trim()) {                errorMessage = result.message;                errorSource = 'message';                console.log('Using message:', errorMessage);            }            // Priority 4: HTTP error fallback            if (errorSource === 'default' && !response.ok) {                errorMessage = `Server error: ${response.status} ${response.statusText}`;                errorSource = 'http status';                console.log('Using HTTP status:', errorMessage);            }            console.log('Final error message:', errorMessage);            console.log('Error source:', errorSource);            console.log('=== END ERROR DEBUG ===');            await Swal.fire({                icon: 'error',                title: 'Upload Failed',                text: errorMessage,                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Upload error:', error);        // Network/unexpected error        await Swal.fire({            icon: 'error',            title: 'Upload Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function showCreateFolderDialog(parentFolderId = null) {    try {        const { value: folderName } = await KCloudModal.show({            title: '<i class="bi bi-folder-plus me-2"></i>Create New Folder',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-folder-name" class="kcloud-form-label">                            Folder Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-folder kcloud-input-icon"></i>                            <input type="text" id="kcloud-folder-name" class="kcloud-input"                                    placeholder="Enter folder name..." maxlength="255" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Choose a unique name for your folder                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-folder-plus me-1"></i> Create',            cancelButtonText: 'Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-folder-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-folder-name');                input.focus();                // Enter key handler                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });            },            preConfirm: () => {                const folderName = document.getElementById('kcloud-folder-name').value.trim();                if (!folderName) {                    Swal.showValidationMessage('Please enter a folder name');                    return false;                }                if (folderName.length < 1) {                    Swal.showValidationMessage('Folder name must be at least 1 character');                    return false;                }                if (folderName.length > 255) {                    Swal.showValidationMessage('Folder name must be less than 255 characters');                    return false;                }                // Check for invalid characters                const invalidChars = /[<>:"/\\|?*]/g;                if (invalidChars.test(folderName)) {                    Swal.showValidationMessage('Folder name contains invalid characters');                    return false;                }                return folderName;            }        });        if (folderName) {            await createFolder(folderName, parentFolderId);        }    } catch (error) {        console.error('Create folder dialog error:', error);        showKCloudError('Failed to show create folder dialog');    }}async function createFolder(folderName, parentFolderId = null) {    try {        // Show loading with KCloud styling (keep your nice UI)        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Creating Folder...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Creating "${folderName}"...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/Folder/create', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Name: folderName,                ParentFolderId: parentFolderId && parentFolderId.trim() !== '' ? parentFolderId.trim() : null            })        });        if (result.success) {            // Success notification            await KCloudModal.show({                title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>Success!',                html: `                    <div class="kcloud-success-content">                        <p>${result.message}</p>                    </div>                `,                timer: 2000,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-success-modal'                }            });            location.reload();        } else {            // Error notification with improved error handling            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Creation Failed',                html: `                    <div class="kcloud-error-content">                        <p>${result.message}</p>                    </div>                `,                confirmButtonText: 'Try Again',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });        }    } catch (error) {        console.error('Create folder error:', error);        showKCloudError('Network error occurred. Please try again.');    }}// Helper function for consistent error displayfunction showKCloudError(message) {    KCloudModal.show({        title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',        html: `            <div class="kcloud-error-content">                <p>${message}</p>            </div>        `,        confirmButtonText: 'OK',        customClass: {            popup: 'kcloud-modal kcloud-error-modal'        }    });}function showAlert(type, message) {    const iconMap = {        'success': 'success',        'danger': 'error',        'error': 'error',        'warning': 'warning',        'info': 'info'    };    Swal.fire({        toast: true,        position: 'top-end',        icon: iconMap[type] || 'info',        title: message,        showConfirmButton: false,        timer: 4000,        timerProgressBar: true,        didOpen: (toast) => {            toast.addEventListener('mouseenter', Swal.stopTimer)            toast.addEventListener('mouseleave', Swal.resumeTimer)        }    });}// Helper function to escape HTML and prevent XSSasync function deleteFile(event, fileId, fileName, isHardDelete = false) {    try {        const actionText = isHardDelete ? 'permanently delete' : 'delete';        const warningText = isHardDelete ?            'This file will be permanently deleted and cannot be recovered!' :            'This will move the file to trash where it can be restored later.';        const result = await KCloudModal.show({            title: `<i class="bi bi-trash me-2"></i>${isHardDelete ? 'Permanently Delete' : 'Delete'} File`,            html: `                <div class="kcloud-confirm-content">                    <div class="kcloud-file-info">                        <i class="bi bi-file-earmark-fill text-primary" style="font-size: 3rem;"></i>                        <h4 class="kcloud-file-name">"${fileName}"</h4>                    </div>                                        <p class="kcloud-confirm-text">                        Are you sure you want to ${actionText} this file?                    </p>                                        <div class="kcloud-warning-box ${isHardDelete ? 'danger' : 'warning'}">                        <i class="bi bi-${isHardDelete ? 'exclamation-triangle-fill' : 'info-circle'} me-2"></i>                        ${warningText}                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: `<i class="bi bi-trash me-1"></i> ${isHardDelete ? 'Delete Forever' : 'Delete'}`,            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            customClass: {                popup: 'kcloud-modal kcloud-delete-modal',                confirmButton: isHardDelete ? 'kcloud-btn-danger' : 'kcloud-btn-warning',                cancelButton: 'kcloud-btn-outline'            }        });        if (result.isConfirmed) {            await performFileDelete(event, fileId, fileName, isHardDelete);        }    } catch (error) {        console.error('Delete dialog error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',            html: `                <div class="kcloud-error-content">                    <p>Failed to show delete dialog</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}async function performFileDelete(event, fileId, fileName, isHardDelete) {    const fileCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on the card with visual feedback        if (fileCard) {            fileCard.style.opacity = '0.6';            fileCard.style.pointerEvents = 'none';            fileCard.style.transform = 'scale(0.98)';            fileCard.style.transition = 'all 0.3s ease';        }        // Show loading modal        KCloudModal.show({            title: `<i class="bi bi-gear-fill kcloud-spinning me-2"></i>${isHardDelete ? 'Permanently Deleting' : 'Deleting'} File...`,            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <div class="kcloud-delete-progress">                        <div class="kcloud-file-preview">                            <i class="bi bi-file-earmark-fill text-primary"></i>                            <span class="kcloud-file-name">"${fileName}"</span>                        </div>                        <p class="kcloud-delete-status">                            ${isHardDelete ? 'Permanently deleting file...' : 'Moving to trash...'}                        </p>                    </div>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal kcloud-delete-loading'            }        });        // Use standardized API handler        const result = await handleApiRequest(`/File/delete/${fileId}?isHardDelete=${isHardDelete}`, {            method: 'DELETE',            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        });        if (result.success) {            // Show success modal            await KCloudModal.show({                title: `<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>File ${isHardDelete ? 'Permanently Deleted' : 'Deleted'}!`,                html: `                    <div class="kcloud-success-content">                        <div class="kcloud-delete-success">                            <p>${result.message}</p>                            <div class="kcloud-success-details">                                <small>"${fileName}" has been ${isHardDelete ? 'permanently deleted' : 'moved to trash'}</small>                            </div>                        </div>                    </div>                `,                timer: 2000,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-success-modal'                }            });            // Animate card removal            if (fileCard) {                fileCard.style.transition = 'opacity 0.5s ease, transform 0.5s ease';                fileCard.style.opacity = '0';                fileCard.style.transform = 'scale(0.8) rotateX(10deg)';                setTimeout(() => {                    fileCard.remove();                }, 500);            }        } else {            // Restore card on error            if (fileCard) {                fileCard.style.opacity = '1';                fileCard.style.pointerEvents = 'auto';                fileCard.style.transform = 'scale(1)';            }            // Show error modal            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Delete Failed',                html: `                    <div class="kcloud-error-content">                        <p>${result.message}</p>                        <div class="kcloud-error-details">                            <small>Failed to delete "${fileName}"</small>                        </div>                    </div>                `,                confirmButtonText: 'Try Again',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });        }    } catch (error) {        console.error('Delete error:', error);        // Restore card on error        if (fileCard) {            fileCard.style.opacity = '1';            fileCard.style.pointerEvents = 'auto';            fileCard.style.transform = 'scale(1)';        }        // Show network error modal        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Network Error',            html: `                <div class="kcloud-error-content">                    <p>Network error occurred. Please try again.</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}async function renameFolder(folderId, currentName) {    try {        const { value: newName } = await KCloudModal.show({            title: '<i class="bi bi-folder me-2"></i>Rename Folder',            html: `                <div class="kcloud-form">                    <div class="kcloud-form-group">                        <label for="kcloud-rename-folder-input" class="kcloud-form-label">                            Folder Name                        </label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-folder kcloud-input-icon"></i>                            <input type="text" id="kcloud-rename-folder-input" class="kcloud-input"                                    maxlength="75" autocomplete="off">                        </div>                        <div class="kcloud-form-help">                            Enter the new name for your folder                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-check me-1"></i> Rename',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-rename-modal'            },            didOpen: () => {                const input = document.getElementById('kcloud-rename-folder-input');                // Set value safely after modal opens                input.value = currentName;                input.focus();                // Select all text for easier editing                input.select();                // Enter key handler                input.addEventListener('keypress', (e) => {                    if (e.key === 'Enter') {                        Swal.clickConfirm();                    }                });                // Real-time validation feedback                input.addEventListener('input', (e) => {                    const value = e.target.value.trim();                    const wrapper = input.parentElement;                    // Remove existing validation classes                    wrapper.classList.remove('kcloud-input-valid', 'kcloud-input-invalid');                    if (value && value !== currentName && value.length <= 75) {                        wrapper.classList.add('kcloud-input-valid');                    } else if (value.length > 75) {                        wrapper.classList.add('kcloud-input-invalid');                    }                });            },            preConfirm: () => {                const newName = document.getElementById('kcloud-rename-folder-input').value;                const newNameTrimmed = newName.trim();                // Basic checks                if (!newNameTrimmed) {                    Swal.showValidationMessage('Please enter a folder name');                    return false;                }                if (newNameTrimmed.length > 75) {                    Swal.showValidationMessage('Folder name cannot exceed 75 characters');                    return false;                }                if (newNameTrimmed === currentName) {                    Swal.showValidationMessage('Please enter a different name');                    return false;                }                // Block problematic characters that break JavaScript/HTML                const invalidChars = /[<>:"/\\|?*\r\n\t]/g;                if (invalidChars.test(newNameTrimmed)) {                    Swal.showValidationMessage('Folder name contains invalid characters');                    return false;                }                // Block leading/trailing spaces and dots                if (newNameTrimmed.startsWith(' ') || newNameTrimmed.endsWith(' ') || newNameTrimmed.endsWith('.')) {                    Swal.showValidationMessage('Folder name cannot start/end with spaces or dots');                    return false;                }                return newNameTrimmed;            }        });        if (newName && newName.trim() !== currentName) {            // Show loading with KCloud styling            KCloudModal.show({                title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Renaming Folder...',                html: `                    <div class="kcloud-loading-content">                        <div class="kcloud-loading-spinner"></div>                        <div class="kcloud-rename-progress">                            <p class="kcloud-old-name">From: <span>"$(currentName}"</span></p>                            <i class="bi bi-arrow-down kcloud-arrow"></i>                            <p class="kcloud-new-name">To: <span>"${newName}"</span></p>                        </div>                    </div>                `,                allowOutsideClick: false,                allowEscapeKey: false,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-loading-modal kcloud-rename-loading'                }            });            // Use standardized API handler            const result = await handleApiRequest('/Folder/update', {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                },                body: JSON.stringify({                    Id: folderId,                    Name: newName.trim(),                    ParentFolderId: null                })            });            if (result.success) {                // Success notification                await KCloudModal.show({                    title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>Folder Renamed!',                    html: `                        <div class="kcloud-success-content">                            <div class="kcloud-rename-success">                                <p>Successfully renamed to:</p>                                <p class="kcloud-new-filename"><strong>"${newName}"</strong></p>                            </div>                        </div>                    `,                    timer: 2500,                    showConfirmButton: false,                    customClass: {                        popup: 'kcloud-modal kcloud-success-modal'                    }                });                location.reload();            } else {                // Error notification with proper error message                await KCloudModal.show({                    title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Rename Failed',                    html: `                        <div class="kcloud-error-content">                            <p>${result.message}</p>                            <div class="kcloud-error-details">                                <small>Attempted to rename "${currentName}" to "${newName}"</small>                            </div>                        </div>                    `,                    confirmButtonText: 'Try Again',                    customClass: {                        popup: 'kcloud-modal kcloud-error-modal'                    }                });            }        }    } catch (error) {        console.error('Rename folder error:', error);        showKCloudError('Network error occurred. Please try again.');    }}async function deleteFolder(event, folderId, folderName) {    try {        // Show loading while getting folder details        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Checking Folder...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Analyzing folder contents...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        const detailsResult = await handleApiRequest('/Folder/details', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId            })        });        if (!detailsResult.success) {            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',                html: `                    <div class="kcloud-error-content">                        <p>${detailsResult.message}</p>                    </div>                `,                confirmButtonText: 'OK',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });            return;        }        const folderDetails = detailsResult.data;        const fileCount = folderDetails.fileCount || 0;        const subFolderCount = folderDetails.subFolderCount || 0;        const parentFolderId = folderDetails.parentFolderId;        const isEmpty = fileCount === 0 && subFolderCount === 0;        // If folder is empty, proceed with simple delete        if (isEmpty) {            const confirmed = await KCloudModal.show({                title: '<i class="bi bi-trash me-2"></i>Delete Empty Folder',                html: `                    <div class="kcloud-confirm-content">                        <div class="kcloud-folder-info">                            <i class="bi bi-folder-fill folder-color" style="font-size: 3rem;"></i>                            <h4 class="kcloud-folder-name">"${folderName}"</h4>                        </div>                        <p class="kcloud-confirm-text">This folder is empty and will be deleted permanently.</p>                        <div class="kcloud-warning-box">                            <i class="bi bi-exclamation-triangle me-2"></i>                            This action cannot be undone!                        </div>                    </div>                `,                showCancelButton: true,                confirmButtonText: '<i class="bi bi-trash me-1" ></i> Delete',                cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',                customClass: {                    popup: 'kcloud-modal kcloud-delete-modal',                    confirmButton: 'kcloud-btn-danger',                    cancelButton: 'kcloud-btn-outline'                }            });            if (confirmed.isConfirmed) {                await performFolderDeletion(event, folderId, folderName, 'deleteAll');            }            return;        }        // If folder has content, show options        const action = await showKCloudFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId);        if (action) {            await performFolderDeletion(event, folderId, folderName, action);        }    } catch (error) {        console.error('Delete folder error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',            html: `                <div class="kcloud-error-content">                    <p>Network error occurred. Please try again.</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}async function showKCloudFolderDeletionOptionsDialog(folderName, fileCount, subFolderCount, parentFolderId) {    const totalItems = fileCount + subFolderCount;    const result = await KCloudModal.show({        title: '<i class="bi bi-exclamation-triangle me-2"></i>Folder Contains Items',        html: `            <div class="kcloud-delete-options">                <div class="kcloud-folder-summary">                    <div class="kcloud-folder-header">                        <i class="bi bi-folder-fill folder-color" style="font-size: 2.5rem;"></i>                        <h4>"${folderName}"</h4>                    </div>                                        <div class="kcloud-content-stats">                        <div class="kcloud-stat-item">                            <i class="bi bi-file-earmark text-primary"></i>                            <span>${fileCount} file${fileCount !== 1 ? 's' : ''}</span>                        </div>                        <div class="kcloud-stat-item">                            <i class="bi bi-folder text-warning"></i>                            <span>${subFolderCount} folder${subFolderCount !== 1 ? 's' : ''}</span>                        </div>                        <div class="kcloud-stat-total">                            <strong>Total: ${totalItems} item${totalItems !== 1 ? 's' : ''}</strong>                        </div>                    </div>                </div>                <div class="kcloud-options-container">                    <h5 class="kcloud-options-title">What would you like to do?</h5>                                        <div class="kcloud-option-card" data-action="deleteAll">                        <div class="kcloud-option-icon danger">                            <i class="bi bi-trash-fill"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Delete Everything</h6>                            <p>Permanently delete the folder and all its contents</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="deleteAll" id="deleteAll">                        </div>                    </div>                    ${parentFolderId ? `                    <div class="kcloud-option-card" data-action="moveToParent">                        <div class="kcloud-option-icon info">                            <i class="bi bi-arrow-up"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Move to Parent Folder</h6>                            <p>Move all contents to the parent folder, then delete this folder</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="moveToParent" id="moveToParent">                        </div>                    </div>                    ` : ''}                    <div class="kcloud-option-card" data-action="moveToRoot">                        <div class="kcloud-option-icon success">                            <i class="bi bi-house"></i>                        </div>                        <div class="kcloud-option-content">                            <h6>Move to Root</h6>                            <p>Move all contents to your root storage, then delete this folder</p>                        </div>                        <div class="kcloud-option-radio">                            <input type="radio" name="deleteOption" value="moveToRoot" id="moveToRoot">                        </div>                    </div>                </div>            </div>        `,        showCancelButton: true,        confirmButtonText: '<i class="bi bi-check me-1"></i> Proceed',        cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',        customClass: {            popup: 'kcloud-modal kcloud-delete-options-modal'        },        didOpen: () => {            // Add click handlers for option cards            const optionCards = document.querySelectorAll('.kcloud-option-card');            optionCards.forEach(card => {                card.addEventListener('click', () => {                    // Remove active class from all cards                    optionCards.forEach(c => c.classList.remove('active'));                    // Add active class to clicked card                    card.classList.add('active');                    // Check the radio button                    const radio = card.querySelector('input[type="radio"]');                    radio.checked = true;                });            });        },        preConfirm: () => {            const selectedOption = document.querySelector('input[name="deleteOption"]:checked');            if (!selectedOption) {                Swal.showValidationMessage('Please select an option');                return false;            }            return selectedOption.value;        }    });    return result.isConfirmed ? result.value : null;}async function performFolderDeletion(event, folderId, folderName, action) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    try {        // Show loading on card        if (folderCard) {            folderCard.style.opacity = '0.6';            folderCard.style.pointerEvents = 'none';        }        Swal.fire({            title: 'Deleting folder...',            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            didOpen: () => Swal.showLoading()        });        // Convert action to boolean flags        const deleteContents = action === 'deleteAll';        const moveContentsToParent = action === 'moveToParent';        const moveContentsToRoot = action === 'moveToRoot';        // Use standardized API handler        const result = await handleApiRequest('/Folder/delete', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                Id: folderId,                DeleteContents: deleteContents,                MoveContentsToParent: moveContentsToParent,                MoveContentsToRoot: moveContentsToRoot            })        });        if (result.success) {            await handleSuccessfulDeletion(event, folderName, result.message);        } else {            // Restore card on error            if (folderCard) {                folderCard.style.opacity = '1';                folderCard.style.pointerEvents = 'auto';            }            await Swal.fire({                icon: 'error',                title: 'Delete Failed',                text: result.message,                confirmButtonText: 'OK'            });        }    } catch (error) {        console.error('Delete folder error:', error);        // Restore card on error        if (folderCard) {            folderCard.style.opacity = '1';            folderCard.style.pointerEvents = 'auto';        }        await Swal.fire({            icon: 'error',            title: 'Error',            text: 'Network error occurred. Please try again.',            confirmButtonText: 'OK'        });    }}async function handleSuccessfulDeletion(event, folderName, message) {    const folderCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');    // Animate card removal    if (folderCard) {        folderCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';        folderCard.style.opacity = '0';        folderCard.style.transform = 'scale(0.8)';        setTimeout(() => {            folderCard.remove();        }, 300);    }    await Swal.fire({        icon: 'success',        title: 'Folder Deleted!',        text: message || `Folder "${folderName}" deleted    successfully.`,        timer: 2000,        showConfirmButton: false    });}async function shareFile(fileId, fileName) {    try {        let selectedUsers = []; // Local to this function        const { value: shareData } = await KCloudModal.show({            title: '<i class="bi bi-share me-2"></i>Share File',            html: `                <div class="kcloud-form">                    <div class="kcloud-info-badge">                        <i class="bi bi-file-earmark me-2"></i>                        <span>Sharing: <strong>${fileName}</strong></span>                    </div>                                        <!-- Quick Actions Section -->                    <div class="kcloud-form-group">                        <button type="button" class="kcloud-btn-outline w-100" id="createPublicLinkBtn">                            <i class="bi bi-link-45deg me-2"></i>Create Public Link                        </button>                    </div>                                        <div class="kcloud-divider">                        <span>or share with specific users</span>                    </div>                                        <!-- User Search Section -->                    <div class="kcloud-form-group">                        <label class="kcloud-form-label">Search Users</label>                        <div class="kcloud-search-group">                            <div class="kcloud-input-wrapper">                                <i class="bi bi-search kcloud-input-icon"></i>                                <input type="text" id="userSearchInput" class="kcloud-input"                                        placeholder="Type username to search..." autocomplete="off">                            </div>                            <button type="button" id="searchBtn" class="kcloud-search-btn">                                <i class="bi bi-search"></i>                            </button>                        </div>                        <div id="searchResults" class="kcloud-search-results"></div>                        <div class="kcloud-form-help">Search for users by username or email</div>                    </div>                                        <!-- Selected Users -->                    <div class="kcloud-form-group">                        <label class="kcloud-form-label">Selected Users</label>                        <div id="selectedUsersContainer" class="kcloud-selected-users">                            <small class="text-muted">No users selected</small>                        </div>                    </div>                                        <!-- Permission Selection -->                    <div class="kcloud-form-group">                        <label for="permissionSelect" class="kcloud-form-label">Permission Level</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-shield-lock kcloud-input-icon"></i>                            <select id="permissionSelect" class="kcloud-input kcloud-select">                                <option value="Read">Read Only - Can view and download</option>                                <option value="Write">Write - Can view, download, and upload</option>                                <option value="Delete">Delete - Can view, download, upload, and delete</option>                                <option value="FullAccess">Full Access - All permissions</option>                            </select>                        </div>                        <div class="kcloud-form-help">Choose the level of access for shared users</div>                    </div>                                        <!-- Expiration Date -->                    <div class="kcloud-form-group">                        <label for="expirationDate" class="kcloud-form-label">Expiration Date (Optional)</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-calendar-event kcloud-input-icon"></i>                            <input type="datetime-local" id="expirationDate" class="kcloud-input">                        </div>                        <div class="kcloud-form-help">Leave empty for permanent access</div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-share me-1"></i> Share with Users',            cancelButtonText: '<i class="bi bi-x-circle me-1"></i> Cancel',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-share-modal'            },            didOpen: () => {                setupKCloudShareModal(selectedUsers);                // Set minimum date to current time                const dateInput = document.getElementById('expirationDate');                const now = new Date();                const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);                dateInput.min = minDate;                // Add event listener for public link button                document.getElementById('createPublicLinkBtn').addEventListener('click', async () => {                    Swal.close();                    await createPublicLinkModal(fileId, fileName);                });            },            preConfirm: () => {                if (selectedUsers.length === 0) {                    Swal.showValidationMessage('Please select at least one user to share with');                    return false;                }                const expiresAt = document.getElementById('expirationDate').value;                // Validate expiration date if provided                if (expiresAt) {                    const expirationDate = new Date(expiresAt);                    const now = new Date();                    if (expirationDate <= now) {                        Swal.showValidationMessage('Expiration date must be in the future');                        return false;                    }                }                return {                    userIds: selectedUsers.map(u => u.id),                    permission: document.getElementById('permissionSelect').value,                    expiresAt: expiresAt || null                };            }        });        if (shareData) {            await performFileShare(fileId, shareData);        }    } catch (error) {        console.error('Share dialog error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',            html: `                <div class="kcloud-error-content">                    <p>Failed to show share dialog</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}function setupKCloudShareModal(selectedUsers) {    const searchBtn = document.getElementById('searchBtn');    const searchInput = document.getElementById('userSearchInput');    const performUserSearch = async () => {        const searchTerm = searchInput.value.trim();        const resultsDiv = document.getElementById('searchResults');        if (searchTerm.length < 2) {            resultsDiv.style.display = 'none';            return;        }        try {            // Show loading in search results            resultsDiv.innerHTML = `                <div class="kcloud-search-loading">                    <div class="kcloud-mini-spinner"></div>                    <span>Searching users...</span>                </div>            `;            resultsDiv.style.display = 'block';            // Use standardized API handler            const result = await handleApiRequest(`/User/search?term=${encodeURIComponent(searchTerm)}`, {                method: 'GET',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            });            if (result.success) {                // FIX: Users are directly in result.data, not result.data.users                displayKCloudUserSearchResults(result.data || [], selectedUsers);            } else {                resultsDiv.innerHTML = `                    <div class="kcloud-search-error">                        <i class="bi bi-exclamation-triangle me-2"></i>                        ${result.message}                    </div>                `;                resultsDiv.style.display = 'block';            }        } catch (error) {            console.error('User search error:', error);            resultsDiv.innerHTML = `                <div class="kcloud-search-error">                    <i class="bi bi-exclamation-triangle me-2"></i>                    Search failed. Please try again.                </div>            `;            resultsDiv.style.display = 'block';        }    };    // Rest of the function stays the same...    searchBtn.addEventListener('click', performUserSearch);    searchInput.addEventListener('keypress', function(e) {        if (e.key === 'Enter') {            e.preventDefault();            performUserSearch();        }    });    let searchTimeout;    searchInput.addEventListener('input', function() {        clearTimeout(searchTimeout);        searchTimeout = setTimeout(() => {            if (this.value.length >= 2) {                performUserSearch();            } else {                document.getElementById('searchResults').style.display = 'none';            }        }, 300);    });}function displayKCloudUserSearchResults(users, selectedUsers) {    const resultsDiv = document.getElementById('searchResults');    if (users.length === 0) {        resultsDiv.innerHTML = `            <div class="kcloud-search-empty">                <i class="bi bi-person-x me-2"></i>                No users found            </div>        `;        resultsDiv.style.display = 'block';        return;    }    const userList = users.map(user => `        <div class="kcloud-user-result"              data-user-id="${user.id}"              data-username="${user.username}"              data-email="${user.email || ''}">            <div class="kcloud-user-avatar">                <i class="bi bi-person-circle"></i>            </div>            <div class="kcloud-user-info">                <div class="kcloud-user-name">${user.username}</div>                ${user.email ? `<div class="kcloud-user-email">${user.email}</div>` : ''}            </div>            <div class="kcloud-user-action">                <i class="bi bi-plus-circle"></i>            </div>        </div>    `).join('');    resultsDiv.innerHTML = userList;    resultsDiv.style.display = 'block';    // Add click and hover effects    resultsDiv.querySelectorAll('.kcloud-user-result').forEach(item => {        item.addEventListener('click', () => {            const userId = item.dataset.userId;            const username = item.dataset.username;            const email = item.dataset.email;            addKCloudUserToShare(userId, username, email, selectedUsers);        });    });}function addKCloudUserToShare(userId, username, email, selectedUsers) {    // Check if user already selected    if (selectedUsers.some(u => u.id === userId)) {        Toastify({            text: "User already selected",            duration: 2000,            gravity: "top",            position: "right",            backgroundColor: "#ffc107",            style: {                color: "#212529",                fontFamily: "'Azeret Mono', monospace",                fontWeight: "600"            }        }).showToast();        return;    }    selectedUsers.push({ id: userId, username, email });    updateKCloudSelectedUsersDisplay(selectedUsers);    // Clear search and hide results    document.getElementById('userSearchInput').value = '';    document.getElementById('searchResults').style.display = 'none';    // Show success feedback    Toastify({        text: `${username} added to share`,        duration: 1500,        gravity: "top",        position: "right",        backgroundColor: "#d4ff00",        style: {            color: "#130623",            fontFamily: "'Azeret Mono', monospace",            fontWeight: "600"        }    }).showToast();}function updateKCloudSelectedUsersDisplay(selectedUsers) {    const container = document.getElementById('selectedUsersContainer');    if (selectedUsers.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';        return;    }    const userTags = selectedUsers.map((user, index) => `        <span class="kcloud-user-tag" data-index="${index}">            <div class="kcloud-tag-content">                <i class="bi bi-person me-1"></i>                <span class="kcloud-tag-name">${user.username}</span>                ${user.email ? `<small class="kcloud-tag-email">${user.email}</small>` : ''}            </div>            <button type="button" class="kcloud-tag-remove" onclick="removeKCloudUserFromShare(${index})">                <i class="bi bi-x"></i>            </button>        </span>    `).join('');    container.innerHTML = userTags;}function removeKCloudUserFromShare(userIndex) {    const container = document.getElementById('selectedUsersContainer');    const tags = container.querySelectorAll('.kcloud-user-tag');    // Remove the specific tag    if (tags[userIndex]) {        tags[userIndex].remove();    }    // Update display if no tags remain    const remainingTags = container.querySelectorAll('.kcloud-user-tag');    if (remainingTags.length === 0) {        container.innerHTML = '<small class="text-muted">No users selected</small>';    }}async function performFileShare(fileId, shareData) {    try {        // Show loading with KCloud styling        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Sharing File...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Sharing with ${shareData.userIds.length} user${shareData.userIds.length !== 1 ? 's' : ''}...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/File/share', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                fileId: fileId,                userIds: shareData.userIds,                permission: shareData.permission,                expiresAt: shareData.expiresAt            })        });        if (result.success) {            await KCloudModal.show({                title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>File Shared!',                html: `                    <div class="kcloud-success-content">                        <p>${result.message}</p>                        <div class="kcloud-share-summary">                            <small>Shared with ${shareData.userIds.length} user${shareData.userIds.length !== 1 ? 's' : ''}</small>                        </div>                    </div>                `,                timer: 2500,                showConfirmButton: false,                customClass: {                    popup: 'kcloud-modal kcloud-success-modal'                }            });        } else {            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Share Failed',                html: `                    <div class="kcloud-error-content">                        <p>${result.message}</p>                    </div>                `,                confirmButtonText: 'Try Again',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });        }    } catch (error) {        console.error('Share error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Network Error',            html: `                <div class="kcloud-error-content">                    <p>Failed to share file. Please try again.</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}async function createPublicLinkModal(fileId, fileName) {    try {        const { value: linkData } = await KCloudModal.show({            title: '<i class="bi bi-link-45deg me-2"></i>Create Public Link',            html: `                <div class="kcloud-form">                    <div class="kcloud-info-badge">                        <i class="bi bi-link me-2"></i>                        <span>Creating public link for: <strong>${fileName}</strong></span>                    </div>                                        <!-- Permission Selection -->                    <div class="kcloud-form-group">                        <label for="publicPermissionSelect" class="kcloud-form-label">Permission Level</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-shield-lock kcloud-input-icon"></i>                            <select id="publicPermissionSelect" class="kcloud-input kcloud-select">                                <option value="1">Read Only - Download access</option>                                <option value="2">Write - Download and upload access</option>                                <option value="3">Delete - Download, upload, and delete access</option>                                <option value="4">Full Access - All permissions</option>                            </select>                        </div>                        <div class="kcloud-form-help">Choose the level of access for this public link</div>                    </div>                                        <!-- Expiration Date -->                    <div class="kcloud-form-group">                        <label for="publicExpirationDate" class="kcloud-form-label">Expiration Date (Optional)</label>                        <div class="kcloud-input-wrapper">                            <i class="bi bi-calendar-event kcloud-input-icon"></i>                            <input type="datetime-local" id="publicExpirationDate" class="kcloud-input">                        </div>                        <div class="kcloud-form-help">Leave empty for permanent access</div>                    </div>                    <!-- Security Notice -->                    <div class="kcloud-security-notice">                        <div class="kcloud-notice-header">                            <i class="bi bi-shield-exclamation me-2"></i>                            <span>Security Notice</span>                        </div>                        <div class="kcloud-notice-content">                            <p>Anyone with this link will be able to access your file. Share responsibly.</p>                            <ul class="kcloud-security-tips">                                <li>Set an expiration date for temporary access</li>                                <li>Use the minimum required permission level</li>                                <li>You can revoke the link anytime from file settings</li>                            </ul>                        </div>                    </div>                </div>            `,            showCancelButton: true,            confirmButtonText: '<i class="bi bi-link-45deg me-1"></i> Create Link',            cancelButtonText: '<i class="bi bi-arrow-left me-1"></i> Back to Share Options',            focusConfirm: false,            customClass: {                popup: 'kcloud-modal kcloud-public-link-modal'            },            didOpen: () => {                // Set minimum date to current time                const dateInput = document.getElementById('publicExpirationDate');                const now = new Date();                const minDate = new Date(now.getTime() - now.getTimezoneOffset() * 60000).toISOString().slice(0, 16);                dateInput.min = minDate;                // Add visual feedback for permission selection                const permissionSelect = document.getElementById('publicPermissionSelect');                permissionSelect.addEventListener('change', function() {                    const wrapper = this.parentElement;                    const value = parseInt(this.value);                    // Remove existing permission classes                    wrapper.classList.remove('permission-read', 'permission-write', 'permission-delete', 'permission-full');                    // Add class based on permission level                    const permissionClasses = {                        1: 'permission-read',                        2: 'permission-write',                        3: 'permission-delete',                        4: 'permission-full'                    };                    wrapper.classList.add(permissionClasses[value]);                });            },            preConfirm: () => {                const permission = parseInt(document.getElementById('publicPermissionSelect').value);                const expiresAt = document.getElementById('publicExpirationDate').value || null;                // Validate expiration date if provided                if (expiresAt) {                    const expirationDate = new Date(expiresAt);                    const now = new Date();                    if (expirationDate <= now) {                        Swal.showValidationMessage('Expiration date must be in the future');                        return false;                    }                    // Warn if expiration is very far in the future (more than 1 year)                    const oneYearFromNow = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);                    if (expirationDate > oneYearFromNow) {                        Swal.showValidationMessage('Expiration date cannot be more than 1 year in the future');                        return false;                    }                }                return {                    permission: permission,                    expiresAt: expiresAt                };            }        });        if (linkData) {            await performCreatePublicLink(fileId, linkData);        } else {            // User clicked "Back to Share Options" - reopen share modal            await shareFile(fileId, fileName);        }    } catch (error) {        console.error('Create public link dialog error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',            html: `                <div class="kcloud-error-content">                    <p>Failed to show public link dialog</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}async function performCreatePublicLink(fileId, linkData) {    try {        // Show loading        KCloudModal.show({            title: '<i class="bi bi-gear-fill kcloud-spinning me-2"></i>Creating Public Link...',            html: `                <div class="kcloud-loading-content">                    <div class="kcloud-loading-spinner"></div>                    <p>Generating secure public link...</p>                </div>            `,            allowOutsideClick: false,            allowEscapeKey: false,            showConfirmButton: false,            customClass: {                popup: 'kcloud-modal kcloud-loading-modal'            }        });        // Use standardized API handler        const result = await handleApiRequest('/File/public-link', {            method: 'POST',            headers: {                'Content-Type': 'application/json',                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            },            body: JSON.stringify({                fileId: fileId,                permission: linkData.permission,                expiresAt: linkData.expiresAt            })        });        if (result.success) {            const publicUrl = `${window.location.origin}/public/${result.data.publicLinkToken}`;            await KCloudModal.show({                title: '<i class="bi bi-check-circle-fill kcloud-success-icon me-2"></i>Public Link Created!',                html: `                    <div class="kcloud-success-content">                        <p>${result.message}</p>                        <div class="kcloud-link-container">                            <label class="kcloud-form-label">Public Link:</label>                            <div class="kcloud-link-display">                                <input type="text" class="kcloud-link-input" value="${publicUrl}" readonly>                                <button type="button" class="kcloud-copy-btn" onclick="copyToClipboard('${publicUrl}')">                                    <i class="bi bi-clipboard"></i>                                </button>                            </div>                            <div class="kcloud-form-help">Anyone with this link can access the file</div>                        </div>                    </div>                `,                confirmButtonText: 'Done',                customClass: {                    popup: 'kcloud-modal kcloud-success-modal kcloud-link-modal'                }            });        } else {            await KCloudModal.show({                title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Link Creation Failed',                html: `                    <div class="kcloud-error-content">                        <p>${result.message}</p>                    </div>                `,                confirmButtonText: 'Try Again',                customClass: {                    popup: 'kcloud-modal kcloud-error-modal'                }            });        }    } catch (error) {        console.error('Create public link error:', error);        await KCloudModal.show({            title: '<i class="bi bi-exclamation-triangle-fill kcloud-error-icon me-2"></i>Error',            html: `                <div class="kcloud-error-content">                    <p>Network error occurred. Please try again.</p>                </div>            `,            confirmButtonText: 'OK',            customClass: {                popup: 'kcloud-modal kcloud-error-modal'            }        });    }}function copyToClipboard(text) {    navigator.clipboard.writeText(text).then(() => {        // Show a quick toast notification        Toastify({            text: "Link copied to clipboard!",            duration: 2000,            gravity: "top",            position: "right",            backgroundColor: "#d4ff00",            className: "success-toast",            style: {                color: "#130623",                fontFamily: "'Azeret Mono', monospace",                fontWeight: "600"            }        }).showToast();    }).catch(err => {        console.error('Failed to copy: ', err);    });}    function getPermissionName(permission) {        switch(permission) {            case 1: return 'Read Only';            case 2: return 'Write';            case 3: return 'Delete';            case 4: return 'Full Access';            default: return 'Unknown';        }    }    // Full-Width Top Banner System// Improved Banner System: attaches below navbar, smooth transitions, no white flash// Show banner above navbar, push navbar down smoothlyfunction showBanner(message, type = 'success', duration = 5000) {    const existingBanner = document.querySelector('.top-banner');    if (existingBanner) existingBanner.remove();    const bannerTypes = {        success: { bg: '#065143', text: '#F5F0F6', img: '/img/icons/success.png', border: '#0DAB8E' },        error: { bg: '#DE3C4B', text: '#F5F0F6', img: '/img/icons/error.png', border: '#D12335' },        warning: { bg: '#E4626F', text:  '#F5F0F6', img: '/img/icons/warning.png', border: '#F7A1AE' },        info: { bg: '#3A97E4', text:'#F5F0F6', img: '/img/icons/info.png', border: '#5DA9E9' }    };    const config = bannerTypes[type] || bannerTypes.success;    const banner = document.createElement('div');    banner.className = 'top-banner';    banner.innerHTML = `        <div class="banner-content" style="display:flex;align-items:center;justify-content:space-between;width:100%;">            <div class="banner-left" style="display:flex;align-items:center;">             <img src="${config.img}" class="banner-icon-img me-2" alt="${type} icon" />                <span class="banner-message">${message}</span>            </div>            <button class="banner-close" style="background:none;border:none;font-size:1.2em;cursor:pointer;" aria-label="Close banner">                <i class="bi bi-x"></i>            </button>        </div>    `;    banner.style.cssText = `        width: 100%;        background: ${config.bg};        color: ${config.text};        border-bottom: 2px solid ${config.border};        font-family: 'Azeret Mono', monospace;        font-weight: 500;        font-size: 0.95rem;        box-shadow: 0 2px 10px rgba(0,0,0,0.04);        opacity: 0;        transform: translateY(-20px);        transition: opacity 0.4s cubic-bezier(.4,0,.2,1), transform 0.4s cubic-bezier(.4,0,.2,1);        z-index: 1050;        position: relative;        height: 50px;    `;    // Insert banner before navbar    const navbar = document.querySelector('.navbar, #navbar');    if (navbar && navbar.parentNode) {        navbar.parentNode.insertBefore(banner, navbar);        // Push navbar down        navbar.style.transition = 'margin-top 0.4s cubic-bezier(.4,0,.2,1)';        navbar.style.marginTop = '50px';    } else {        document.body.insertBefore(banner, document.body.firstChild);    }    setTimeout(() => {        banner.style.opacity = '1';        banner.style.transform = 'translateY(0)';    }, 10);    banner.querySelector('.banner-close').onclick = () => closeBanner(banner, navbar);    if (duration > 0) {        setTimeout(() => {            closeBanner(banner, navbar);        }, duration);    }}function closeBanner(bannerElement = null, navbar = null) {    const banner = bannerElement || document.querySelector('.top-banner');    navbar = navbar || document.querySelector('.navbar, #navbar');    if (banner) {        banner.style.opacity = '0';        banner.style.transform = 'translateY(-20px)';        setTimeout(() => {            if (banner.parentNode) banner.parentNode.removeChild(banner);            if (navbar) navbar.style.marginTop = '0';        });    }}// Preset banner functionsfunction showSuccessBanner(message, duration = 5000) {    showBanner(message, 'success', duration);}function showErrorBanner(message, duration = 6000) {    showBanner(message, 'error', duration);}function showWarningBanner(message, duration = 5000) {    showBanner(message, 'warning', duration);}function showInfoBanner(message, duration = 5000) {    showBanner(message, 'info', duration);}function showWelcomeBanner(username) {    showSuccessBanner(`Welcome back, ${username}! You're successfully logged in to KCloud.`, 4000);}