using System.Net;using System.Net.Http.Headers;using KCloud.Web.Interfaces;namespace KCloud.Web.Interceptors;public class TokenInterceptor : DelegatingHandler{    private readonly ITokenRefreshService _tokenRefreshService;    public TokenInterceptor(ITokenRefreshService tokenRefreshService)    {        _tokenRefreshService = tokenRefreshService;    }    protected override async Task<HttpResponseMessage> SendAsync(        HttpRequestMessage request,         CancellationToken cancellationToken)    {        var jwt = _tokenRefreshService.GetJwtToken();        if (!string.IsNullOrEmpty(jwt))        {            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", jwt);        }        var response = await base.SendAsync(request, cancellationToken);                if (response.StatusCode == HttpStatusCode.Unauthorized)        {            var refreshed = await _tokenRefreshService.RefreshTokenAsync();            if (refreshed)            {                var newJwt = _tokenRefreshService.GetJwtToken();                if (!string.IsNullOrEmpty(newJwt))                {                    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", newJwt);                    response = await base.SendAsync(request, cancellationToken);                }            }        }        return response;    }}