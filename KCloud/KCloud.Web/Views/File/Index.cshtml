@using KCloud.Web.Helpers@using Microsoft.AspNetCore.Mvc.TagHelpers@model KCloud.Web.Models.ViewModel.FilesIndexViewModel@{    string pageTitle;        if (Model.IsSharedWithMeView)    {        pageTitle = "Shared with Me";    }    else if (Model.IsTrashView)    {        pageTitle = "Trash";    }    else if (!string.IsNullOrEmpty(Model.CurrentFolderPath))    {        var folderName = Model.CurrentFolderPath.Contains("/") ?             Model.CurrentFolderPath.Substring(Model.CurrentFolderPath.LastIndexOf("/") + 1) :             Model.CurrentFolderPath;                pageTitle = (string.IsNullOrEmpty(folderName) || folderName.ToLower() == "root") ?             "Storage" : folderName;    }    else    {        pageTitle = "Storage";    }        if (pageTitle.Length > 16)    {        pageTitle = pageTitle.Substring(0, 13) + "...";    }        ViewData["Title"] = pageTitle;}@section Styles {    <link rel="stylesheet" href="~/css/FileIndex.css" asp-append-version="true"/>}@Html.AntiForgeryToken()<div class="container-fluid py-4">    <div class="row">        <div class="col-12">            <div class="d-flex align-items-center w-100 mb-4">                <div class="header-section-left">                    <h2 class="mb-0 d-flex align-items-center header-title" style="white-space: nowrap; margin-top: 7px">                        @if (Model.IsTrashView)                        {                        <img src="img/ico/trash.png" style="height: 32px;" class="me-2"/>                        }                        else if (Model.IsSharedWithMeView)                        {                        <img src="img/ico/share.png" style="height: 32px;" class="me-2"/>                        }                        else                        {                        <img src="img/ico/storage.png" style="height: 40px;" class="me-2"/>                        }                        @ViewData["Title"]                    </h2>                </div>                                <div class="header-section-center">                    <ul class="nav nav-pills d-flex flex-nowrap">                        <li class="nav-item">                            <a class="nav-link custom-nav @(!Model.IsSharedWithMeView && !Model.IsTrashView ? "active" : "")"                               href="@Url.Action("Index", "File")">                                <i class="bi bi-house me-1"></i><span class="nav-text">Storage</span>                            </a>                        </li>                        <li class="nav-item">                            <a class="nav-link custom-nav @(Model.IsSharedWithMeView ? "active" : "")"                               href="@Url.Action("Index", "File", new { isSharedWithMe = true })">                                <i class="bi bi-people me-1"></i><span class="nav-text">Shared</span>                            </a>                        </li>                        <li class="nav-item">                            <a class="nav-link custom-nav @(Model.IsTrashView ? "active" : "")"                               href="@Url.Action("Index", "File", new { isTrash = true })">                                <i class="bi bi-trash me-1"></i><span class="nav-text">Trash</span>                            </a>                        </li>                    </ul>                </div>                <!-- Right Section: Action Buttons (Fixed width) -->                <div class="header-section-right">                    @if (Model.IsTrashView)                    {                    <div class="d-flex flex-nowrap">                        <button class="btn custom-btn-outline me-2" onclick="restoreAllFiles()">                            <i class="bi bi-arrow-counterclockwise me-1"></i>Restore All                        </button>                        <button class="btn custom-btn-primary" onclick="emptyTrash()">                            <i class="bi bi-trash3 me-1"></i>Empty Trash                        </button>                    </div>                    }                    else if (Model.IsSharedWithMeView)                    {                    <div class="d-flex flex-nowrap">                        <button class="btn custom-btn-outline me-2" onclick="unshareSelected()">                            <i class="bi bi-person-x me-1"></i>Unshare                        </button>                        <button class="btn custom-btn-primary" onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">                            <i class="bi bi-cloud-upload me-1"></i>Upload                        </button>                    </div>                    }                    else                    {                    <div class="d-flex flex-nowrap">                        <button class="btn custom-btn-outline me-2" onclick="showCreateFolderDialog('@(Model.CurrentFolderId)')">                            <i class="bi bi-folder-plus me-1"></i>New Folder                        </button>                        <button class="btn custom-btn-primary" onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">                            <i class="bi bi-cloud-upload me-1"></i>Upload                        </button>                    </div>                    }                </div>            </div>        </div>    </div>    <div class="row mb-4">        <div class="col-12">            <div class="d-flex align-items-center justify-content-between w-100">                <!-- Breadcrumb Path - Left (40% width) -->                <div class="flex-grow-1 me-3" style="flex-basis: 75%;">                    @if (Model.IsSharedWithMeView)                    {                    <nav aria-label="breadcrumb">                        <ol class="breadcrumb modern-breadcrumb mb-0">                            <li class="breadcrumb-item">                                <a href="@Url.Action("Index", "File")" class="breadcrumb-link">                                    <i class="bi bi-house "></i> @User.Identity.Name                                </a>                            </li>                            <li class="breadcrumb-item">                                <span class="breadcrumb-separator" style="margin-left: -15px">/</span>                                <span class="current-folder">Shared with me</span>                            </li>                        </ol>                    </nav>                    }                    else if (Model.IsTrashView)                    {                    <nav aria-label="breadcrumb">                        <ol class="breadcrumb modern-breadcrumb mb-0" style="margin: auto;">                            <li class="breadcrumb-item">                                <a href="@Url.Action("Index", "File")" class="breadcrumb-link">                                    <i class="bi bi-house "></i> @User.Identity.Name                                </a>                            </li>                            <li class="breadcrumb-item">                                <span class="breadcrumb-separator" style="margin-left: -15px">/</span>                                <span class="current-folder">Trash</span>                            </li>                        </ol>                    </nav>                    }                    else if (!string.IsNullOrEmpty(Model.CurrentFolderPath))                    {                        <nav aria-label="breadcrumb">                            <ol class="breadcrumb modern-breadcrumb mb-0">                                <!-- Home/Storage Link -->                                <li class="breadcrumb-item">                                    <a href="@Url.Action("Index", "File")" class="breadcrumb-link">                                        <i class="bi bi-house "></i> @User.Identity.Name                                    </a>                                </li>                                        @{                                    var pathParts = Model.CurrentFolderPath.Split('/', StringSplitOptions.RemoveEmptyEntries);                                    var currentPath = "";                                }                                        <!-- Build breadcrumb for each path segment -->                                @for (int i = 0; i < pathParts.Length; i++)                                {                                    currentPath += (i == 0 ? "" : "/") + pathParts[i];                                    var isLast = i == pathParts.Length - 1;                                                <li class="breadcrumb-item">                                        <span class="breadcrumb-separator">/</span>                                        @if (isLast)                                        {                                            <!-- Current folder (not clickable) -->                                            <span class="current-folder">@pathParts[i]</span>                                        }                                        else                                        {                                            <!-- Clickable parent folders -->                                            <a href="@Url.Action("Index", "File", new { folderPath = currentPath })" class="breadcrumb-link">                                                @pathParts[i]                                            </a>                                        }                                    </li>                                }                            </ol>                        </nav>                    }                    else                    {                    <nav aria-label="breadcrumb">                        <ol class="breadcrumb modern-breadcrumb mb-0" style="margin: auto;">                            <li class="breadcrumb-item">                    <span class="current-folder">                        <i class="bi bi-house me-1"></i>Storage                    </span>                            </li>                        </ol>                    </nav>                    }                </div>                <!-- Search Bar - Center (40% width) -->                <div class="flex-grow-1 " style="flex-basis: 45%;">                    <form method="get" class="search-form">                        <input type="hidden" name="folderId" value="@Model.CurrentFolderId"/>                        <input type="hidden" name="isSharedWithMe" value="@Model.IsSharedWithMeView"/>                        <input type="hidden" name="isTrash" value="@Model.IsTrashView"/>                        <input type="hidden" name="orderBy" value="@Model.OrderBy"/>                        <input type="hidden" name="descending" value="@Model.Descending"/>                        <div class="modern-search-group">                            <div class="search-input-wrapper">                                <i class="bi bi-search search-icon"></i>                                <input type="text" name="search" class="modern-search-input"                                       placeholder="Search files and folders..." value="@Model.SearchTerm"/>                                @if (!string.IsNullOrEmpty(Model.SearchTerm))                                {                                <a href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = Model.OrderBy, descending = Model.Descending })"                                   class="search-clear">                                    <i class="bi bi-x"></i>                                </a>                                }                            </div>                        </div>                    </form>                </div>                <!-- Sort Controls - Right (20% width) -->                <div class="flex-shrink-0" style="flex-basis: 25%;">                                        <div class="d-flex align-items-center justify-content-end">                        <div class="sort-controls">                            <!-- Sort Dropdown -->                            <div class="dropdown me-2">                                <button class="btn modern-sort-btn dropdown-toggle" type="button" data-bs-toggle="dropdown">                                    @switch (Model.OrderBy?.ToLower())                                    {                                    case "filename":                                    <i class="bi bi-type me-1"></i><span>Name</span>                                    break;                                    case "filesize":                                    <i class="bi bi-pie-chart me-1"></i><span>Size</span>                                    break;                                    case "contenttype":                                    <i class="bi bi-file-earmark me-1"></i><span>Type</span>                                    break;                                    default:                                    <i class="bi bi-calendar me-1"></i><span>Date</span>                                    break;                                    }                                </button>                                <ul class="dropdown-menu modern-dropdown">                                    <li><a class="dropdown-item @(Model.OrderBy?.ToLower() == "createdat" || string.IsNullOrEmpty(Model.OrderBy) ? "active" : "")"                                           href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "CreatedAt", descending = Model.Descending })">                                            <i class="bi bi-calendar me-2"></i>Date Created</a></li>                                    <li><a class="dropdown-item @(Model.OrderBy?.ToLower() == "filename" ? "active" : "")"                                           href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "FileName", descending = Model.Descending })">                                            <i class="bi bi-type me-2"></i>Name</a></li>                                    <li><a class="dropdown-item @(Model.OrderBy?.ToLower() == "filesize" ? "active" : "")"                                           href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "FileSize", descending = Model.Descending })">                                            <i class="bi bi-pie-chart me-2"></i>Size</a></li>                                    <li><a class="dropdown-item @(Model.OrderBy?.ToLower() == "contenttype" ? "active" : "")"                                           href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "ContentType", descending = Model.Descending })">                                            <i class="bi bi-file-earmark me-2"></i>Type</a></li>                                </ul>                            </div>                            <!-- Sort Direction Toggle -->                            <a href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = Model.OrderBy, descending = !Model.Descending })"                               class="btn modern-sort-direction" title="@(Model.Descending ? "Sort Ascending" : "Sort Descending")">                                <i class="bi bi-@(Model.Descending ? "sort-down" : "sort-up")"></i>                            </a>                        </div>                    </div>                </div>            </div>        </div>    </div>    @if (Model.HasItems)    {    <div class="row">        @* Display Folders First *@        @if (Model.Folders != null)        {        @foreach (var folder in Model.Folders)        {        <div class="col-md-3 col-sm-4 col-6 mb-3">            <div class="card h-100 folder-card">                <div class="card-body text-center">                    <i class="bi bi-folder-fill folder-color" style="font-size: 3rem;"></i>                    <h6 class="card-title mt-2 mb-1" title="@folder.Name">                        @(folder.Name.Length > 20 ? folder.Name.Substring(0, 17) + "..." : folder.Name)                    </h6>                    <small class="text-muted">                        Folder • @folder.CreatedAt.ToString("MMM dd, yyyy")                    </small>                </div>                <div class="card-footer bg-transparent">                    <div class="btn-group w-100" role="group">                        <a href="@Url.Action("Index", "File", new { folderId = folder.Id })"                           class="btn btn-sm custom-btn-outline">                            <i class="bi bi-folder-open me-1"></i>Open                        </a>                        <button type="button" style="" class="btn btn-sm custom-btn-outline dropdown-toggle dropdown-toggle-split"                                data-bs-toggle="dropdown">                            <span class="visually-hidden">Toggle Dropdown</span>                        </button>                        <ul class="dropdown-menu">                            <li><a class="dropdown-item" href="#" onclick="renameFolder('@folder.Id', '@folder.Name')">                                    <i class="bi bi-pencil me-2"></i>Rename                                </a></li>                            <li><hr class="dropdown-divider"></li>                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteFolder(event, '@folder.Id', '@folder.Name')">                                    <i class="bi bi-trash me-2"></i>Delete                                </a></li>                        </ul>                    </div>                </div>            </div>        </div>        }        }        @* Display Files After Folders *@        @foreach (var file in Model.Files)        {        <div class="col-md-3 col-sm-4 col-6 mb-3">            <div class="card h-100 file-card">                <div class="card-body text-center">                    @{                    var iconClass = FileHelpers.GetFileIcon(file.ContentType);                    }                    <i class="@iconClass" style="font-size: 3rem;"></i>                    <h6 class="card-title mt-2 mb-1" title="@file.FileName">                        @(file.FileName.Length > 20 ? file.FileName.Substring(0, 17) + "..." : file.FileName)                    </h6>                    <small class="text-muted">                        @FileHelpers.FormatFileSize(file.FileSizeBytes) • @file.UploadedAt.ToString("MMM dd, yyyy")                    </small>                </div>                <div class="card-footer bg-transparent">                    <div class="btn-group w-100" role="group">                        <a href="@Url.Action("Download", "File", new { id = file.Id })"                           class="btn btn-sm custom-btn-outline custom-btn">                            <i class="bi bi-download me-1"></i>Download                        </a>                        @if (file.UserPermission != KCloud.Web.Models.Enum.FilePermission.Read)                        {                            <button type="button" class="btn btn-sm custom-btn-outline dropdown-toggle dropdown-toggle-split"                                    data-bs-toggle="dropdown">                                <span class="visually-hidden">Toggle Dropdown</span>                            </button>                            <ul class="dropdown-menu">                                @if (Model.IsTrashView)                                {                                    <li>                                        <a class="dropdown-item text-success" href="#"                                           onclick="restoreFile(event, '@file.Id', '@file.FileName')">                                            <i class="bi bi-arrow-counterclockwise me-2"></i>Restore                                        </a>                                    </li>                                    <li><hr class="dropdown-divider"></li>                                    <li>                                        <a class="dropdown-item text-danger" href="#"                                           onclick="deleteFile(event, '@file.Id', '@file.FileName', true)">                                            <i class="bi bi-trash-fill me-2"></i>Delete Forever                                        </a>                                    </li>                                }                                @if (Model.IsSharedWithMeView)                                {                                    if (file.UserPermission == KCloud.Web.Models.Enum.FilePermission.Write)                                    {                                        <li>                                            <a style="margin-bottom: -25px;  " class="dropdown-item" href="#"                                               onclick="renameFile('@file.Id', '@file.FileName')">                                                <i style="padding-bottom: 10px " class="bi bi-pencil me-2"></i>Rename                                            </a>                                        </li>                                        <li><hr class="dropdown-divider"></li>                                    }                                    else if (file.UserPermission == KCloud.Web.Models.Enum.FilePermission.Delete)                                    {                                        <li>                                            <a class="dropdown-item" href="#"                                               onclick="renameFile('@file.Id', '@file.FileName')">                                                <i class="bi bi-pencil me-2"></i>Rename                                            </a>                                        </li>                                        <li><hr class="dropdown-divider"></li>                                        <li>                                            <a class="dropdown-item text-danger" href="#"                                               onclick="deleteFile(event, '@file.Id', '@file.FileName', true)">                                                <i class="bi bi-trash me-2"></i>Delete Forever                                            </a>                                        </li>                                    }                                    else if (file.UserPermission == KCloud.Web.Models.Enum.FilePermission.FullAccess)                                    {                                        <li>                                            <a class="dropdown-item" href="#"                                               onclick="renameFile('@file.Id', '@file.FileName')">                                                <i class="bi bi-pencil me-2"></i>Rename                                            </a>                                        </li>                                        <li><hr class="dropdown-divider"></li>                                        <li>                                            <a class="dropdown-item" href="#"                                               onclick="shareFile('@file.Id', '@file.FileName')">                                                <i class="bi bi-share me-2"></i>Share                                            </a>                                        </li>                                        <li><hr class="dropdown-divider"></li>                                        <li>                                            <a class="dropdown-item text-danger" href="#"                                               onclick="deleteFile(event, '@file.Id', '@file.FileName', true)">                                                <i class="bi bi-trash me-2"></i>Delete Forever                                            </a>                                        </li>                                    }        }                                else if (Model is { IsTrashView: false, IsSharedWithMeView: false })                                 {                                    <li>                                        <a class="dropdown-item" href="#"                                           onclick="renameFile('@file.Id', '@file.FileName')">                                            <i class="bi bi-pencil me-2"></i>Rename                                        </a>                                    </li>                                    <li><hr class="dropdown-divider"></li>                                    <li>                                        <a class="dropdown-item" href="#"                                           onclick="shareFile('@file.Id', '@file.FileName')">                                            <i class="bi bi-share me-2"></i>Share                                        </a>                                    </li>                                    <li><hr class="dropdown-divider"></li>                                    <li>                                        <a class="dropdown-item text-danger" href="#"                                           onclick="deleteFile(event, '@file.Id', '@file.FileName')">                                            <i class="bi bi-trash me-2"></i>Delete                                        </a>                                    </li>                                }                            </ul>                        }                    </div>                </div>            </div>        </div>        }    </div>    }    else    {    <div class="text-center py-5 empty-state">    @if (Model.IsTrashView)    {        <!-- Trash Empty State -->        <div class="empty-icon-container">            <img src="img/ico/trash-icon.png" alt="No Shared Files" class="empty-icon icon-to-yellow"/>        </div>        <h4 class="empty-title mt-4">Trash is empty</h4>        <p class="empty-description">            Items you delete will appear here. You can restore them or delete permanently.        </p>    }    else if (Model.IsSharedWithMeView)    {        <!-- Shared With Me Empty State -->        <div class="empty-icon-container">            <img src="img/ico/share-empty.png" alt="No Shared Files" class="empty-icon icon-to-yellow"/>        </div>        <h4 class="empty-title mt-4">No ideas shared with you yet, Let's change that </h4>        <p class="empty-description">            When someone shares files with you, they'll appear here.        </p>    }    else if (!string.IsNullOrEmpty(Model.SearchTerm))    {        <!-- Search Results Empty State -->        <div class="empty-icon-container">            <img src="img/ico/search-empty.png" alt="No Search Results" class="empty-icon icon-to-yellow"/>        </div>        <h4 class="empty-title mt-4">No files or folders found</h4>        <p class="empty-description">            No results for "<span class="search-term">@Model.SearchTerm</span>". Try a different search term or check your spelling.        </p>        <button type="button" class="btn custom-btn-outline mt-3" onclick="clearSearch()">            <i class="bi bi-x-circle me-1"></i>Clear Search        </button>    }    else if (Model.IsRootFolder)    {        <h4 class="empty-title mt-4">Welcome to your storage!</h4>        <p class="empty-description">            Your personal cloud storage is empty. Get started by creating your first folder or uploading files.        </p>        <div class="empty-actions mt-4">            <button type="button" class="btn custom-btn-primary me-3"                     onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">                <i class="bi bi-cloud-upload me-2"></i>Upload Your First File            </button>            <button type="button" class="btn custom-btn-outline"                     onclick="showCreateFolderDialog('@(Model.CurrentFolderId)')">                <i class="bi bi-folder-plus me-2"></i>Create Folder            </button>        </div>                <!-- Quick Start Tips -->        <div class="quick-tips mt-5">            <h6 class="tips-title">Quick Tips</h6>            <div class="row justify-content-center">                <div class="col-md-4">                    <div class="tip-card">                        <i class="bi bi-upload tip-icon"></i>                        <p>Drag & drop files to upload quickly</p>                    </div>                </div>                <div class="col-md-4">                    <div class="tip-card">                        <i class="bi bi-folder-plus tip-icon"></i>                        <p>Organize your files with folders</p>                    </div>                </div>                <div class="col-md-4">                    <div class="tip-card">                        <i class="bi bi-share tip-icon"></i>                        <p>Share files quickly with others</p>                    </div>                </div>            </div>        </div>    }        else if (!string.IsNullOrEmpty(Model.CurrentFolderPath))        {        <!-- Empty Folder State -->        <div class="empty-icon-container">            <img src="img/ico/empty-folder.png" alt="No Search Results" class="empty-icon icon-to-yellow"/>        </div>        <h4 class="empty-title mt-4">This folder is empty</h4>        <p class="empty-description">            Add files to this folder by uploading new content.        </p>        <div class="empty-actions mt-4">            <button type="button" class="btn custom-btn-primary me-3"                    onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">                <i class="bi bi-cloud-upload me-2"></i>Upload Files            </button>            <button type="button" class="btn custom-btn-outline"                    onclick="showCreateFolderDialog('@(Model.CurrentFolderId)')">                <i class="bi bi-folder-plus me-2"></i>New Folder            </button>        </div>        }</div>    }</div><style>    .folder-card:hover, .file-card:hover {        transform: translateY(-2px);        box-shadow: 0 4px 8px rgba(0,0,0,0.1);        transition: all 0.2s ease-in-out;    }    .card-title {        font-size: 0.9rem;        color: white;        line-height: 1.2;    }    .folder-card, .file-card {        border-radius: 0.5rem;        transition: transform 0.2s ease-in-out;        background-color: #292929;    }    .text-muted {        color: white !important;        color: rgba(255, 255, 255, 0.6) !important;    }</style>