@model KCloud.Web.Models.ViewModel.FilesIndexViewModel@{ViewData["Title"] = Model.IsSharedWithMeView ? "Shared with Me" : "My Files";}@Html.AntiForgeryToken()<div class="container-fluid py-4">    <div class="row mb-4">        <div class="col-md-6">            <h2><i class="bi bi-folder me-2"></i>@ViewData["Title"]</h2>            @if (!string.IsNullOrEmpty(Model.CurrentFolderPath))            {            <nav aria-label="breadcrumb">                <ol class="breadcrumb">                    <li class="breadcrumb-item">                        <a href="@Url.Action("Index", "File")">                            <i class="bi bi-house me-1"></i>Home                        </a>                    </li>                    @if (Model.IsSharedWithMeView)                    {                    <li class="breadcrumb-item active">Shared with Me</li>                    }                    else if (!string.IsNullOrEmpty(Model.CurrentFolderPath))                    {                    <li class="breadcrumb-item active">@Model.CurrentFolderPath</li>                    }                </ol>            </nav>            }        </div>        <div class="col-md-6 text-end">            <form method="get" class="d-inline-block me-3">                <input type="hidden" name="folderId" value="@Model.CurrentFolderId" />                <div class="input-group" style="width: 250px;">                    <input type="text" name="search" class="form-control" placeholder="Search files..."                           value="@Model.SearchTerm" />                    <button class="btn btn-outline-secondary" type="submit">                        <i class="bi bi-search"></i>                    </button>                </div>            </form>            <button type="button" class="btn btn-success me-2" data-bs-toggle="modal" data-bs-target="#uploadModal">                <i class="bi bi-plus-circle me-1"></i>Upload            </button>        </div>    </div>    <div class="row mb-3">        <div class="col">            <small class="text-muted">                @Model.TotalFolders folder(s), @Model.TotalFiles file(s)            </small>        </div>    </div>    @if (Model.HasItems)    {    <div class="row">        @foreach (var file in Model.Files)        {        <div class="col-md-3 col-sm-4 col-6 mb-3">            <div class="card h-100 file-card">                <div class="card-body text-center">                    @{                    var iconClass = GetFileIcon(file.ContentType);                    }                    <i class="@iconClass" style="font-size: 3rem;"></i>                    <h6 class="card-title mt-2 mb-1" title="@file.FileName">                        @(file.FileName.Length > 20 ? file.FileName.Substring(0, 17) + "..." : file.FileName)                    </h6>                    <small class="text-muted">                        @FormatFileSize(file.FileSizeBytes) â€¢ @file.UploadedAt.ToString("MMM dd, yyyy")                    </small>                </div>                <div class="card-footer bg-transparent">                    <div class="btn-group w-100" role="group">                        <a href="@Url.Action("Download", "File", new { id = file.Id })"                           class="btn btn-sm btn-outline-primary">                            <i class="bi bi-download me-1"></i>Download                        </a>                        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split"                                data-bs-toggle="dropdown">                            <span class="visually-hidden">Toggle Dropdown</span>                        </button>                        <ul class="dropdown-menu">                            <li><a class="dropdown-item" href="#" onclick="renameFile('@file.Id', '@file.FileName')">                                    <i class="bi bi-pencil me-2"></i>Rename                                </a></li>                            <li><hr class="dropdown-divider"></li>                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteFile(event, '@file.Id', '@file.FileName')">                                    <i class="bi bi-trash me-2"></i>Delete                                </a></li>                        </ul>                    </div>                </div>            </div>        </div>        }    </div>    }    else    {    <div class="text-center py-5">        <i class="bi bi-folder2-open text-muted" style="font-size: 4rem;"></i>        <h4 class="mt-3">@(string.IsNullOrEmpty(Model.SearchTerm) ? "No files yet" : "No files found")</h4>        <p class="text-muted">            @if (string.IsNullOrEmpty(Model.SearchTerm))            {            <text>Upload your first file to get started</text>            }            else            {            <text>Try a different search term</text>            }        </p>        @if (string.IsNullOrEmpty(Model.SearchTerm))        {        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#uploadModal">            <i class="bi bi-plus-circle me-1"></i>Upload File        </button>        }    </div>    }</div>@functions {private string GetFileIcon(string contentType){return contentType?.ToLower() switch{var ct when ct.StartsWith("image/") => "bi bi-image text-success",var ct when ct.StartsWith("video/") => "bi bi-play-btn text-info",var ct when ct.StartsWith("audio/") => "bi bi-music-note text-warning",var ct when ct.Contains("pdf") => "bi bi-file-pdf text-danger",var ct when ct.Contains("word") || ct.Contains("document") => "bi bi-file-word text-primary",var ct when ct.Contains("excel") || ct.Contains("spreadsheet") => "bi bi-file-excel text-success",var ct when ct.Contains("powerpoint") || ct.Contains("presentation") => "bi bi-file-ppt text-warning",var ct when ct.Contains("zip") || ct.Contains("rar") || ct.Contains("archive") => "bi bi-file-zip text-info",_ => "bi bi-file-earmark text-secondary"};}private string FormatFileSize(long bytes){string[] sizes = { "B", "KB", "MB", "GB", "TB" };double len = bytes;int order = 0;while (len >= 1024 && order < sizes.Length - 1){order++;len = len / 1024;}return $"{len:0.##} {sizes[order]}";}}<style>    .folder-card:hover, .file-card:hover {        transform: translateY(-2px);        box-shadow: 0 4px 8px rgba(0,0,0,0.1);        transition: all 0.2s ease-in-out;    }    .card-title {        font-size: 0.9rem;        line-height: 1.2;    }</style><script>    function showAlert(type, message) {        const alertHtml = `        <div class="alert alert-${type} alert-dismissible fade show" role="alert">            <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>            ${message}            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>        </div>    `;        const container = document.querySelector('.container-fluid');        container.insertAdjacentHTML('afterbegin', alertHtml);        setTimeout(() => {            const alert = container.querySelector('.alert');            if (alert) {                alert.remove();            }        }, 5000);    }    function renameFile(fileId, currentName) {        const newName = prompt('Enter new file name:', currentName);        if (newName && newName !== currentName) {            fetch('/File/update', {                method: 'POST',                headers: {                    'Content-Type': 'application/json',                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                },                body: JSON.stringify({                    id: fileId,                    fileName: newName                })            })                .then(response => response.json())                .then(data => {                    if (data.success) {                        showAlert('success', data.message);                        setTimeout(() => location.reload(), 1000);                    } else {                        showAlert('danger', data.message);                    }                })                .catch(error => {                    showAlert('danger', 'Rename failed. Please try again.');                });        }    }    function deleteFile(event, fileId, fileName) {        if (confirm('Are you sure you want to delete "' + fileName + '"?\n\nThis will move the file to trash.')) {            const fileCard = event.target.closest('.col-md-3, .col-sm-4, .col-6');            const button = fileCard.querySelector('.btn-group .btn');            const originalContent = button.innerHTML;            button.innerHTML = '<i class="bi bi-hourglass-split"></i>';            button.disabled = true;            fetch(`/File/delete/${fileId}`, {                method: 'DELETE',                headers: {                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value                }            })                .then(response => response.json())                .then(data => {                    if (data.success) {                        fileCard.style.transition = 'opacity 0.3s ease';                        fileCard.style.opacity = '0';                        setTimeout(() => {                            fileCard.remove();                            showAlert('success', data.message);                        }, 300);                    } else {                        showAlert('danger', data.message);                        button.innerHTML = originalContent;                        button.disabled = false;                    }                })                .catch(error => {                    showAlert('danger', 'Delete failed. Please try again.');                    button.innerHTML = originalContent;                    button.disabled = false;                });        }    }    function handleFileUpload() {        const form = document.getElementById('uploadForm');        const formData = new FormData(form);        fetch('/File/upload', {            method: 'POST',            body: formData,            headers: {                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value            }        })            .then(response => response.json())            .then(data => {                if (data.success) {                    showAlert('success', data.message);                    setTimeout(() => location.reload(), 1000);                } else {                    showAlert('danger', data.message);                }            })            .catch(error => {                showAlert('danger', 'Upload failed. Please try again.');            });    }</script><div class="modal fade" id="uploadModal" tabindex="-1">    <div class="modal-dialog">        <div class="modal-content">            <div class="modal-header">                <h5 class="modal-title">Upload File</h5>                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>            </div>            <form id="uploadForm" onsubmit="event.preventDefault(); handleFileUpload();">                <div class="modal-body">                    <input type="hidden" name="folderId" value="@Model.CurrentFolderId" />                    <div class="mb-3">                        <label for="file" class="form-label">Choose File</label>                        <input type="file" class="form-control" id="file" name="file" required>                    </div>                </div>                <div class="modal-footer">                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>                    <button type="submit" class="btn btn-primary">Upload</button>                </div>            </form>        </div>    </div></div>