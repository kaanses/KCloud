@model KCloud.Web.Models.ViewModel.FilesIndexViewModel@{ViewData["Title"] = Model.IsSharedWithMeView ? "Shared with Me" : "My Files";}@Html.AntiForgeryToken()<div class="container-fluid py-4">    <!-- Header Section -->    <div class="row mb-3">        <div class="col-md-8">            <div class="d-flex align-items-center">                <h2 class="mb-0 me-3">                    <i class="bi bi-folder me-2"></i>@ViewData["Title"]                </h2>                <!-- Navigation Pills -->                <ul class="nav nav-pills">                    <li class="nav-item">                        <a class="nav-link @(!Model.IsSharedWithMeView && !Model.IsTrashView ? "active" : "")"                           href="@Url.Action("Index", "File")">                            <i class="bi bi-house me-1"></i>My Files                        </a>                    </li>                    <li class="nav-item">                        <a class="nav-link @(Model.IsSharedWithMeView ? "active" : "")"                           href="@Url.Action("Index", "File", new { isSharedWithMe = true })">                            <i class="bi bi-people me-1"></i>Shared with Me                        </a>                    </li>                    <li class="nav-item">                        <a class="nav-link @(Model.IsTrashView ? "active" : "")"                           href="@Url.Action("Index", "File", new { isTrash = true })">                            <i class="bi bi-trash me-1"></i>Trash                        </a>                    </li>                </ul>            </div>            <!-- Breadcrumb -->            @if (!string.IsNullOrEmpty(Model.CurrentFolderPath) && !Model.IsSharedWithMeView && !Model.IsTrashView)            {            <nav aria-label="breadcrumb" class="mt-2">                <ol class="breadcrumb mb-0">                    <li class="breadcrumb-item">                        <a href="@Url.Action("Index", "File")">                            <i class="bi bi-house me-1"></i>Home                        </a>                    </li>                    <li class="breadcrumb-item active">@Model.CurrentFolderPath</li>                </ol>            </nav>            }        </div>        <div class="col-md-4 text-end">            <!-- Action Buttons -->            @if (!Model.IsTrashView)            {            <button class="btn btn-outline-primary me-2" onclick="showCreateFolderDialog('@(Model.CurrentFolderId)')">                <i class="bi bi-folder-plus me-1"></i>New Folder            </button>            <button class="btn btn-primary" onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">                <i class="bi bi-cloud-upload me-1"></i>Upload            </button>            }        </div>    </div>    <!-- Controls Section -->    <div class="row mb-4">        <div class="col-md-6">            <!-- Search Bar -->            <form method="get" class="d-inline-block">                <input type="hidden" name="folderId" value="@Model.CurrentFolderId"/>                <input type="hidden" name="isSharedWithMe" value="@Model.IsSharedWithMeView"/>                <input type="hidden" name="isTrash" value="@Model.IsTrashView"/>                <input type="hidden" name="orderBy" value="@Model.OrderBy"/>                <input type="hidden" name="descending" value="@Model.Descending"/>                <div class="input-group" style="max-width: 350px;">                    <input type="text" name="search" class="form-control"                           placeholder="Search files and folders..." value="@Model.SearchTerm"/>                    <button class="btn btn-outline-secondary" type="submit">                        <i class="bi bi-search"></i>                    </button>                    @if (!string.IsNullOrEmpty(Model.SearchTerm))                    {                    <a href="@Url.Action("Index", "File", new {                    folderId = Model.CurrentFolderId,                    isSharedWithMe = Model.IsSharedWithMeView,                    isTrash = Model.IsTrashView,                    orderBy = Model.OrderBy,                    descending = Model.Descending                    })" class="btn btn-outline-secondary">                        <i class="bi bi-x"></i>                    </a>                    }                </div>            </form>        </div>        <div class="col-md-6">            <div class="d-flex justify-content-between align-items-center">                <!-- File Count -->                <small class="text-muted">                    @if (Model.IsTrashView)                    {                    <text>@Model.TotalFiles deleted item(s)</text>                    }                    else                    {                    <text>@Model.TotalFolders folder(s), @Model.TotalFiles file(s)</text>                    }                </small>                @if (Model.IsTrashView && Model.TotalFiles > 0)                {                <button type="button" class="btn btn-sm btn-outline-danger"                        onclick="emptyTrash()"                        id="emptyTrashBtn">                    <i class="bi bi-trash3 me-1"></i>Empty Trash                </button>                }                @if (Model.IsTrashView && Model.TotalFiles > 0)                {                <!-- Trash action buttons -->                <div class="d-flex gap-2">                    <button type="button" class="btn btn-sm btn-outline-success"                            onclick="restoreAllFiles()"                            id="restoreAllBtn">                        <i class="bi bi-arrow-counterclockwise me-1"></i>Restore All                    </button>                    <button type="button" class="btn btn-sm btn-outline-danger"                            onclick="emptyTrash()"                            id="emptyTrashBtn">                        <i class="bi bi-trash3 me-1"></i>Empty Trash                    </button>                </div>                }                else                {                    <!-- Sort Controls -->                    <div class="d-flex align-items-center">                        <small class="text-muted me-2">Sort by:</small>                        <!-- Sort Dropdown -->                        <div class="dropdown me-2">                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button"                                    data-bs-toggle="dropdown">                                @switch (Model.OrderBy?.ToLower())                                {                                    case "FileName":                                        <i class="bi bi-type me-1"></i>                                        <text>Name</text>                                        break;                                    case "FileSize":                                        <i class="bi bi-pie-chart me-1"></i>                                        <text>Size</text>                                        break;                                    case "ContentType":                                        <i class="bi bi-file-earmark me-1"></i>                                        <text>Type</text>                                        break;                                    default:                                        <i class="bi bi-calendar me-1"></i>                                        <text>Date</text>                                        break;                                }                            </button>                            <ul class="dropdown-menu">                                <li>                                    <a class="dropdown-item @(Model.OrderBy?.ToLower() == "CreatedAt" || string.IsNullOrEmpty(Model.OrderBy) ? "active" : "")"                                       href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "CreatedAt", descending = Model.Descending })">                                        <i class="bi bi-calendar me-2"></i>Date Created                                    </a>                                </li>                                <li>                                    <a class="dropdown-item @(Model.OrderBy?.ToLower() == "FileName" ? "active" : "")"                                       href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "FileName", descending = Model.Descending })">                                        <i class="bi bi-type me-2"></i>Name                                    </a>                                </li>                                <li>                                    <a class="dropdown-item @(Model.OrderBy?.ToLower() == "FileSize" ? "active" : "")"                                       href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "FileSize", descending = Model.Descending })">                                        <i class="bi bi-pie-chart me-2"></i>Size                                    </a>                                </li>                                <li>                                    <a class="dropdown-item @(Model.OrderBy?.ToLower() == "ContentType" ? "active" : "")"                                       href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = "ContentType", descending = Model.Descending })">                                        <i class="bi bi-file-earmark me-2"></i>Type                                    </a>                                </li>                            </ul>                        </div>                        <!-- Sort Direction Toggle -->                        <a href="@Url.Action("Index", "File", new { folderId = Model.CurrentFolderId, search = Model.SearchTerm, isSharedWithMe = Model.IsSharedWithMeView, isTrash = Model.IsTrashView, orderBy = Model.OrderBy, descending = !Model.Descending })" class="btn btn-sm btn-outline-secondary"                           title="@(Model.Descending ? "Sort Ascending" : "Sort Descending")">                            <i class="bi bi-@(Model.Descending ? "sort-down" : "sort-up")"></i>                        </a>                    </div>                }            </div>        </div>    </div>    <div class="row mb-3">        <div class="col">            <small class="text-muted">                @Model.TotalFolders folder(s), @Model.TotalFiles file(s)            </small>        </div>    </div>    @if (Model.HasItems)    {    <div class="row">        @* Display Folders First *@        @if (Model.Folders != null)        {        @foreach (var folder in Model.Folders)        {        <div class="col-md-3 col-sm-4 col-6 mb-3">            <div class="card h-100 folder-card">                <div class="card-body text-center">                    <i class="bi bi-folder-fill text-primary" style="font-size: 3rem;"></i>                    <h6 class="card-title mt-2 mb-1" title="@folder.Name">                        @(folder.Name.Length > 20 ? folder.Name.Substring(0, 17) + "..." : folder.Name)                    </h6>                    <small class="text-muted">                        Folder • @folder.CreatedAt.ToString("MMM dd, yyyy")                    </small>                </div>                <div class="card-footer bg-transparent">                    <div class="btn-group w-100" role="group">                        <a href="@Url.Action("Index", "File", new { folderId = folder.Id })"                           class="btn btn-sm btn-outline-primary">                            <i class="bi bi-folder-open me-1"></i>Open                        </a>                        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split"                                data-bs-toggle="dropdown">                            <span class="visually-hidden">Toggle Dropdown</span>                        </button>                        <ul class="dropdown-menu">                            <li><a class="dropdown-item" href="#" onclick="renameFolder('@folder.Id', '@folder.Name')">                                    <i class="bi bi-pencil me-2"></i>Rename                                </a></li>                            <li><hr class="dropdown-divider"></li>                            <li><a class="dropdown-item text-danger" href="#" onclick="deleteFolder(event, '@folder.Id', '@folder.Name')">                                    <i class="bi bi-trash me-2"></i>Delete                                </a></li>                        </ul>                    </div>                </div>            </div>        </div>        }        }        @* Display Files After Folders *@        @foreach (var file in Model.Files)        {        <div class="col-md-3 col-sm-4 col-6 mb-3">            <div class="card h-100 file-card">                <div class="card-body text-center">                    @{                    var iconClass = GetFileIcon(file.ContentType);                    }                    <i class="@iconClass" style="font-size: 3rem;"></i>                    <h6 class="card-title mt-2 mb-1" title="@file.FileName">                        @(file.FileName.Length > 20 ? file.FileName.Substring(0, 17) + "..." : file.FileName)                    </h6>                    <small class="text-muted">                        @FormatFileSize(file.FileSizeBytes) • @file.UploadedAt.ToString("MMM dd, yyyy")                    </small>                </div>                <div class="card-footer bg-transparent">                    <div class="btn-group w-100" role="group">                        <a href="@Url.Action("Download", "File", new { id = file.Id })"                           class="btn btn-sm btn-outline-primary">                            <i class="bi bi-download me-1"></i>Download                        </a>                        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle dropdown-toggle-split"                                data-bs-toggle="dropdown">                            <span class="visually-hidden">Toggle Dropdown</span>                        </button>                        <ul class="dropdown-menu">                            @if (Model.IsTrashView)                            {                                <li>                                    <a class="dropdown-item text-success" href="#"                                       onclick="restoreFile(event, '@file.Id', '@file.FileName')">                                        <i class="bi bi-arrow-counterclockwise me-2"></i>Restore                                    </a>                                </li>                                <li><hr class="dropdown-divider"></li>                                <li>                                    <a class="dropdown-item text-danger" href="#"                                       onclick="deleteFile(event, '@file.Id', '@file.FileName', true)">                                        <i class="bi bi-trash-fill me-2"></i>Delete Forever                                    </a>                                </li>                            }                            else                            {                                <li>                                    <a class="dropdown-item" href="#"                                       onclick="renameFile('@file.Id', '@file.FileName')">                                        <i class="bi bi-pencil me-2"></i>Rename                                    </a>                                </li>                                <li><hr class="dropdown-divider"></li>                                <li>                                    <a class="dropdown-item" href="#"                                        onclick="shareFile('@file.Id', '@file.FileName')">                                        <i class="bi bi-share me-2"></i>Share                                    </a>                                </li>                                <li><hr class="dropdown-divider"></li>                                <li>                                    <a class="dropdown-item text-danger" href="#"                                       onclick="deleteFile(event, '@file.Id', '@file.FileName')">                                        <i class="bi bi-trash me-2"></i>Delete                                    </a>                                </li>                            }                        </ul>                    </div>                </div>            </div>        </div>        }    </div>    }    else    {    <div class="text-center py-5">        <i class="bi bi-folder2-open text-muted" style="font-size: 4rem;"></i>        <h4 class="mt-3">@(string.IsNullOrEmpty(Model.SearchTerm) ? "No files or folders yet" : "No files or folders found")</h4>        <p class="text-muted">            @if (string.IsNullOrEmpty(Model.SearchTerm))            {            <text>Create a folder or upload your first file to get started</text>            }            else            {            <text>Try a different search term</text>            }        </p>        @if (string.IsNullOrEmpty(Model.SearchTerm))        {        <button type="button" class="btn btn-primary me-2" onclick="createFolder('@Model.CurrentFolderId')">            <i class="bi bi-folder-plus me-1"></i>Create Folder        </button>        <button type="button" class="btn btn-success" data-bs-toggle="modal" onclick="showUploadDialog('@(Model.CurrentFolderId)', '@(Model.CurrentFolderPath)')">            <i class="bi bi-plus-circle me-1"></i>Upload File        </button>        }    </div>    }</div>@functions {private string GetFileIcon(string contentType){return contentType?.ToLower() switch{var ct when ct.StartsWith("image/") => "bi bi-image text-success",var ct when ct.StartsWith("video/") => "bi bi-play-btn text-info",var ct when ct.StartsWith("audio/") => "bi bi-music-note text-warning",var ct when ct.Contains("pdf") => "bi bi-file-pdf text-danger",var ct when ct.Contains("word") || ct.Contains("document") => "bi bi-file-word text-primary",var ct when ct.Contains("excel") || ct.Contains("spreadsheet") => "bi bi-file-excel text-success",var ct when ct.Contains("powerpoint") || ct.Contains("presentation") => "bi bi-file-ppt text-warning",var ct when ct.Contains("zip") || ct.Contains("rar") || ct.Contains("archive") => "bi bi-file-zip text-info",_ => "bi bi-file-earmark text-secondary"};}private string FormatFileSize(long bytes){string[] sizes = { "B", "KB", "MB", "GB", "TB" };double len = bytes;int order = 0;while (len >= 1024 && order < sizes.Length - 1){order++;len = len / 1024;}return $"{len:0.##} {sizes[order]}";}}<style>    .folder-card:hover, .file-card:hover {        transform: translateY(-2px);        box-shadow: 0 4px 8px rgba(0,0,0,0.1);        transition: all 0.2s ease-in-out;    }    .card-title {        font-size: 0.9rem;        line-height: 1.2;    }</style>