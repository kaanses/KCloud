using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.IdentityModel.Tokens;using System.Text;using Serilog;Log.Logger = new LoggerConfiguration()    .MinimumLevel.Information()    .WriteTo.Console()    .CreateLogger();var builder = WebApplication.CreateBuilder(args);builder.Services.AddControllers();builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)    .AddJwtBearer(options =>    {        var jwtKey = builder.Configuration["Jwt:Key"];        var key = Encoding.UTF8.GetBytes(jwtKey);            options.TokenValidationParameters = new TokenValidationParameters        {            ValidateIssuerSigningKey = true,            IssuerSigningKey = new SymmetricSecurityKey(key),            ValidateIssuer = true,            ValidIssuer = builder.Configuration["Jwt:Issuer"],            ValidateAudience = true,            ValidAudience = builder.Configuration["Jwt:Audience"],            ValidateLifetime = true,            ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetValue<double>("Jwt:ClockSkew"))        };    });builder.Services.AddReverseProxy()    .LoadFromConfig(builder.Configuration.GetSection("ReverseProxy"));builder.Services.AddHttpClient("AuthService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:Auth:BaseUrl"]!);});builder.Services.AddHttpClient("FileMetadataService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:FileMetadata:BaseUrl"]!);});builder.Services.AddHttpClient("FileStorageService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:FileStorage:BaseUrl"]!);});var app = builder.Build();// Configure the HTTP request pipelineif (app.Environment.IsDevelopment()){    app.UseSwagger();    app.UseSwaggerUI();}app.UseHttpsRedirection();app.UseAuthentication();app.UseAuthorization();// Map controllersapp.MapControllers();// Map reverse proxy routesapp.MapReverseProxy();app.Run();