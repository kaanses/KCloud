using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.IdentityModel.Tokens;using System.Text;var builder = WebApplication.CreateBuilder(args);builder.Logging.AddConsole();builder.Logging.SetMinimumLevel(LogLevel.Debug);// Add services to the containerbuilder.Services.AddControllers();builder.Services.AddEndpointsApiExplorer();builder.Services.AddSwaggerGen();// Add CORSbuilder.Services.AddCors(options =>{    options.AddPolicy("AllowAll", policy =>    {        policy.AllowAnyOrigin()              .AllowAnyMethod()              .AllowAnyHeader();    });});// Add JWT Authentication// Add YARP Reverse Proxybuilder.Services.AddReverseProxy()    .LoadFromConfig(builder.Configuration.GetSection("ReverseProxy"));// Add HTTP Clients for service-to-service communicationbuilder.Services.AddHttpClient("AuthService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:Auth:BaseUrl"]!);});builder.Services.AddHttpClient("FileMetadataService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:FileMetadata:BaseUrl"]!);});builder.Services.AddHttpClient("FileStorageService", client =>{    client.BaseAddress = new Uri(builder.Configuration["Services:FileStorage:BaseUrl"]!);});var app = builder.Build();// Configure the HTTP request pipelineif (app.Environment.IsDevelopment()){    app.UseSwagger();    app.UseSwaggerUI();}app.UseHttpsRedirection();app.UseCors("AllowAll");app.UseAuthentication();app.UseAuthorization();app.MapGet("/test", () => "Gateway is working!");// Map controllersapp.MapControllers();// Map reverse proxy routesapp.MapReverseProxy();app.Run();