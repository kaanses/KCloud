// KCloud.Auth/Services/TokenService.csusing System.IdentityModel.Tokens.Jwt;using System.Security.Claims;using System.Security.Cryptography;using System.Text;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using Microsoft.IdentityModel.Tokens;namespace KCloud.Auth.Services;public class TokenService(IConfiguration configuration) : ITokenService{    public string GenerateJwtToken(UserDTO user)    {        var key = Encoding.ASCII.GetBytes(configuration["Jwt:Key"] ??                                           throw new InvalidOperationException("JWT Key is missing in configuration"));                var tokenHandler = new JwtSecurityTokenHandler();                var tokenDurationInMinutes = configuration.GetValue<int>("Jwt:DurationInMinutes", 15);            var tokenDescriptor = new SecurityTokenDescriptor        {            Subject = new ClaimsIdentity(new[]            {                new Claim("userId", user.Id.ToString()),                           new Claim("username", user.Username),                              new Claim("email", user.Email),                                   new Claim("role", user.Role)                                  }),            Expires = DateTime.UtcNow.AddMinutes(tokenDurationInMinutes),            Issuer = configuration["Jwt:Issuer"],            Audience = configuration["Jwt:Audience"],            SigningCredentials = new SigningCredentials(                new SymmetricSecurityKey(key),                SecurityAlgorithms.HmacSha256Signature)        };            var token = tokenHandler.CreateToken(tokenDescriptor);        return tokenHandler.WriteToken(token);    }    public string GenerateRefreshToken()    {        var randomNumber = new byte[32];        using var rng = RandomNumberGenerator.Create();        rng.GetBytes(randomNumber);        return Convert.ToBase64String(randomNumber);    }        public ClaimsPrincipal ValidateToken(string token)    {        if (string.IsNullOrEmpty(token))        {            throw new ArgumentNullException(nameof(token));        }                var key = Encoding.ASCII.GetBytes(configuration["Jwt:Key"] ??             throw new InvalidOperationException("JWT Key is missing in configuration"));                    var tokenValidationParameters = new TokenValidationParameters        {            ValidateIssuer = true,            ValidIssuer = configuration["Jwt:Issuer"],            ValidateAudience = true,            ValidAudience = configuration["Jwt:Audience"],            ValidateIssuerSigningKey = true,            IssuerSigningKey = new SymmetricSecurityKey(key),            ValidateLifetime = false // Don't validate lifetime for expired tokens        };        var tokenHandler = new JwtSecurityTokenHandler();        var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out var securityToken);                if (securityToken is not JwtSecurityToken jwtSecurityToken ||             !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))        {            throw new SecurityTokenException("Invalid token");        }                return principal;    }    public Guid? GetUserId(ClaimsPrincipal principal)    {        if (principal == null)            return null;            var userIdClaim = principal.FindFirstValue("userId");            if (string.IsNullOrEmpty(userIdClaim))            return null;            return Guid.TryParse(userIdClaim, out var userId) ? userId : null;    }}