using System.IdentityModel.Tokens.Jwt;using System.Security.Claims;using System.Text;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using Microsoft.IdentityModel.Tokens;public class TokenService : ITokenService{    private readonly IConfiguration _configuration;    private readonly ILogger<TokenService> _logger;    public TokenService(IConfiguration configuration, ILogger<TokenService> logger)    {        _configuration = configuration;        _logger = logger;    }    public string GenerateJwtToken(UserDTO user)    {        var jwtKey = _configuration["Jwt:Key"] ??             throw new InvalidOperationException("JWT Key is missing");                var key = Encoding.UTF8.GetBytes(jwtKey);                var tokenHandler = new JwtSecurityTokenHandler();        var tokenDurationInMinutes = _configuration.GetValue<int>("Jwt:DurationInMinutes", 15);                var now = DateTime.UtcNow;                var tokenDescriptor = new SecurityTokenDescriptor        {            Subject = new ClaimsIdentity(new[]            {                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),                new Claim(ClaimTypes.Name, user.Username),                new Claim(ClaimTypes.Email, user.Email),                new Claim(ClaimTypes.Role, user.Role),                                // ✅ SECURITY: Add issued at claim                new Claim(JwtRegisteredClaimNames.Iat,                     new DateTimeOffset(now).ToUnixTimeSeconds().ToString(),                     ClaimValueTypes.Integer64),                                    // ✅ SECURITY: Add JWT ID for tracking                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())            }),                        IssuedAt = now,            NotBefore = now.AddMinutes(-1),             Expires = now.AddMinutes(tokenDurationInMinutes),                        Issuer = _configuration["Jwt:Issuer"],            Audience = _configuration["Jwt:Audience"],                        SigningCredentials = new SigningCredentials(                new SymmetricSecurityKey(key),                SecurityAlgorithms.HmacSha256Signature)        };        var token = tokenHandler.CreateToken(tokenDescriptor);        var tokenString = tokenHandler.WriteToken(token);                _logger.LogInformation("JWT token created for user {UserId}, expires at {ExpiresAt}",             user.Id, tokenDescriptor.Expires);                    return tokenString;    }}