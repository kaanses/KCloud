// KCloud.Auth/Services/TokenService.csusing System.IdentityModel.Tokens.Jwt;using System.Security.Claims;using System.Security.Cryptography;using System.Text;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using Microsoft.IdentityModel.Tokens;namespace KCloud.Auth.Services;public class TokenService : ITokenService{    private readonly IConfiguration _configuration;    private readonly ILogger<TokenService> _logger;    public TokenService(IConfiguration configuration, ILogger<TokenService> logger)    {        _configuration = configuration;        _logger = logger;    }    public string GenerateJwtToken(UserDTO user)    {        var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"] ??             throw new InvalidOperationException("JWT Key is missing in configuration"));                    var tokenHandler = new JwtSecurityTokenHandler();                // Get token duration from configuration or default to 15 minutes        var tokenDurationInMinutes = _configuration.GetValue<int>("Jwt:DurationInMinutes", 15);                var tokenDescriptor = new SecurityTokenDescriptor        {            Subject = new ClaimsIdentity(new[]            {                new Claim(ClaimTypes.NameIdentifier, user.Id.ToString()),                new Claim(ClaimTypes.Name, user.Username),                new Claim(ClaimTypes.Email, user.Email),                new Claim(ClaimTypes.Role, user.Role)            }),            Expires = DateTime.UtcNow.AddMinutes(tokenDurationInMinutes),            Issuer = _configuration["Jwt:Issuer"],            Audience = _configuration["Jwt:Audience"],            SigningCredentials = new SigningCredentials(                new SymmetricSecurityKey(key),                SecurityAlgorithms.HmacSha256Signature)        };                var token = tokenHandler.CreateToken(tokenDescriptor);        return tokenHandler.WriteToken(token);    }    public string GenerateRefreshToken()    {        var randomNumber = new byte[32];        using var rng = RandomNumberGenerator.Create();        rng.GetBytes(randomNumber);        return Convert.ToBase64String(randomNumber);    }        public ClaimsPrincipal ValidateToken(string token)    {        if (string.IsNullOrEmpty(token))        {            throw new ArgumentNullException(nameof(token));        }                var key = Encoding.ASCII.GetBytes(_configuration["Jwt:Key"] ??             throw new InvalidOperationException("JWT Key is missing in configuration"));                    var tokenValidationParameters = new TokenValidationParameters        {            ValidateIssuer = true,            ValidIssuer = _configuration["Jwt:Issuer"],            ValidateAudience = true,            ValidAudience = _configuration["Jwt:Audience"],            ValidateIssuerSigningKey = true,            IssuerSigningKey = new SymmetricSecurityKey(key),            ValidateLifetime = false // Don't validate lifetime for expired tokens        };        var tokenHandler = new JwtSecurityTokenHandler();        var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out var securityToken);                if (securityToken is not JwtSecurityToken jwtSecurityToken ||             !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))        {            throw new SecurityTokenException("Invalid token");        }                return principal;    }    public bool TryGetUserId(ClaimsPrincipal principal, out Guid userId)    {        userId = Guid.Empty;                if (principal == null)        {            return false;        }                var userIdClaim = principal.FindFirstValue(ClaimTypes.NameIdentifier);                if (string.IsNullOrEmpty(userIdClaim))        {            return false;        }                if (Guid.TryParse(userIdClaim, out userId))        {            return true;        }                return false;    }    public bool TryGetUserIdFromToken(string token, out Guid userId)    {        userId = Guid.Empty;                if (string.IsNullOrEmpty(token))        {            return false;        }                try        {            var principal = ValidateToken(token);            return TryGetUserId(principal, out userId);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error extracting user ID from token");            return false;        }    }}