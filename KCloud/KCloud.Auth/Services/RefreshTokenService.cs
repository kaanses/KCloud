using KCloud.Auth.Interfaces;using KCloud.Auth.Models.Entity;using Microsoft.EntityFrameworkCore;namespace KCloud.Auth.Services;public class RefreshTokenService(    IUnitOfWork unitOfWork,    ITokenService tokenService,    IConfiguration configuration,    ILogger<RefreshTokenService> logger)    : IRefreshTokenService{    private readonly int _refreshTokenExpiryDays = configuration.GetValue("Jwt:RefreshTokenExpiryDays", 7);    public async Task<string> GenerateRefreshTokenAsync(Guid userId, CancellationToken cancellationToken = default)    {        var refreshTokens = await unitOfWork.Repository<RefreshToken>().GetAllAsync();        var existingRefreshToken = refreshTokens.FirstOrDefault(rt => rt.UserId == userId);                if (existingRefreshToken != null)        {            unitOfWork.Repository<RefreshToken>().Delete(existingRefreshToken);        }        // Create new refresh token        var refreshToken = new RefreshToken        {            Token = tokenService.GenerateRefreshToken(),            ExpiryTime = DateTime.UtcNow.AddDays(_refreshTokenExpiryDays),            UserId = userId        };                await unitOfWork.Repository<RefreshToken>().AddAsync(refreshToken, cancellationToken);                      await unitOfWork.CommitAsync(cancellationToken);        return refreshToken.Token;    }    public async Task<bool> ValidateRefreshTokenAsync(Guid userId, string token, CancellationToken cancellationToken = default)    {        var refreshToken = await unitOfWork.Repository<RefreshToken>()            .Query()            .FirstOrDefaultAsync(rt => rt.UserId == userId && rt.Token == token, cancellationToken);        if (refreshToken == null)        {            logger.LogWarning("No refresh token found for user {UserId}", userId);            return false;        }        if (refreshToken.ExpiryTime <= DateTime.UtcNow)        {            logger.LogWarning("Refresh token expired for user {UserId}", userId);            return false;        }        return true;    }    public async Task<bool> RevokeRefreshTokenAsync(Guid userId, CancellationToken cancellationToken = default)    {        var refreshTokens = await unitOfWork.Repository<RefreshToken>().GetAllAsync();        var refreshToken = refreshTokens.FirstOrDefault(rt => rt.UserId == userId);        if (refreshToken == null)        {            return false;        }        unitOfWork.Repository<RefreshToken>().Delete(refreshToken);        await unitOfWork.CommitAsync(cancellationToken);        return true;    }}