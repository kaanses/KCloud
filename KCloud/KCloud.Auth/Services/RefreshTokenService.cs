using System.Security.Cryptography;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.Entity;using Microsoft.EntityFrameworkCore;namespace KCloud.Auth.Services;public class RefreshTokenService(    IUnitOfWork unitOfWork,    IConfiguration configuration,    ILogger<RefreshTokenService> logger)    : IRefreshTokenService{    private readonly IConfiguration _configuration = configuration;    private readonly int _refreshTokenExpiryDays = configuration.GetValue("Jwt:RefreshTokenExpiryDays", 7);    public async Task<string> GenerateRefreshTokenAsync(Guid userId, CancellationToken cancellationToken = default)    {        var existingToken = await unitOfWork.Repository<RefreshToken>()            .Query()            .FirstOrDefaultAsync(rt => rt.UserId == userId, cancellationToken);                if (existingToken != null)        {            unitOfWork.Repository<RefreshToken>().Delete(existingToken);        }        var newToken = new RefreshToken        {            Token = GenerateSecureToken(),            ExpiryTime = DateTime.UtcNow.AddDays(_refreshTokenExpiryDays),            UserId = userId        };                await unitOfWork.Repository<RefreshToken>().AddAsync(newToken, cancellationToken);        await unitOfWork.CommitAsync(cancellationToken);        return newToken.Token;    }        public async Task<User?> GetUserByRefreshTokenAsync(string token, CancellationToken cancellationToken = default)    {        try        {            var refreshToken = await unitOfWork.Repository<RefreshToken>()                .Query()                .Include(rt => rt.User)                .FirstOrDefaultAsync(rt => rt.Token == token, cancellationToken);            if (refreshToken == null)            {                logger.LogWarning("No refresh token found");                return null;            }            if (refreshToken.ExpiryTime <= DateTime.UtcNow)            {                logger.LogWarning("Refresh token expired for user {UserId}", refreshToken.UserId);                            unitOfWork.Repository<RefreshToken>().Delete(refreshToken);                await unitOfWork.CommitAsync(cancellationToken);                            return null;            }            return refreshToken.User;        }        catch (Exception ex)        {            logger.LogError(ex, "Error validating refresh token");            return null;        }    }        public async Task<bool> RevokeRefreshTokenAsync(Guid userId, CancellationToken cancellationToken = default)    {        var refreshToken = await unitOfWork.Repository<RefreshToken>()            .Query()            .FirstOrDefaultAsync(rt => rt.UserId == userId, cancellationToken);        if (refreshToken == null)            return false;        unitOfWork.Repository<RefreshToken>().Delete(refreshToken);        await unitOfWork.CommitAsync(cancellationToken);        return true;    }    private string GenerateSecureToken()    {        var randomBytes = new byte[64];        using var rng = RandomNumberGenerator.Create();        rng.GetBytes(randomBytes);        return Convert.ToBase64String(randomBytes);    }}