using Ardalis.Result;using AutoMapper;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using KCloud.Common.Helpers;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Queries;public class SearchUsersQueryHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    ILogger<SearchUsersQueryHandler> logger,    IStringLocalizer localizer,     IHttpContextAccessor httpContextAccessor)    : IRequestHandler<SearchUsersQuery, Result<List<UserSearchResultDTO>>>{    public async Task<Result<List<UserSearchResultDTO>>> Handle(SearchUsersQuery request, CancellationToken cancellationToken)    {        try        {            var currrentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currrentUserId == null)            {                return Result.Unauthorized(localizer["Unauthorized"].Value);            }            if (string.IsNullOrWhiteSpace(request.SearchTerm) || request.SearchTerm.Length < 2)            {                return Result.Success(new List<UserSearchResultDTO>());            }            var searchTerm = request.SearchTerm.Trim().ToLower();                        logger.LogInformation("Searching users with term: {SearchTerm}", searchTerm);                                    var users = await unitOfWork.Repository<User>()                .Query()                .Where(u => u.Username.ToLower().Contains(searchTerm) && u.Id != currrentUserId)                .OrderBy(u => u.Username)                .Take(10)                .Select(u => new UserSearchResultDTO                {                    Id = u.Id,                    Username = u.Username                })                .ToListAsync(cancellationToken);            logger.LogInformation("Found {Count} users matching search term: {SearchTerm}",                 users.Count, searchTerm);            return Result.Success(users);        }        catch (Exception ex)        {            logger.LogError(ex, "Error searching users with term: {SearchTerm}", request.SearchTerm);            return Result.Error(localizer["UserSearchFailed"].Value);        }    }}