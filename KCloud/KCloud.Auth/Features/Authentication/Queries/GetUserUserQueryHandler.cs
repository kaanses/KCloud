// KCloud.Auth/Features/Authentication/Queries/GetCurrentUserQueryHandler.csusing Ardalis.Result;using AutoMapper;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Queries;public class GetCurrentUserQueryHandler : IRequestHandler<GetCurrentUserQuery, Result<UserDTO>>{    private readonly IUnitOfWork _unitOfWork;    private readonly IMapper _mapper;    private readonly ILogger<GetCurrentUserQueryHandler> _logger;    private readonly IStringLocalizer _localizer;    public GetCurrentUserQueryHandler(        IUnitOfWork unitOfWork,        IMapper mapper,        ILogger<GetCurrentUserQueryHandler> logger,        IStringLocalizer localizer)    {        _unitOfWork = unitOfWork;        _mapper = mapper;        _logger = logger;        _localizer = localizer;    }    public async Task<Result<UserDTO>> Handle(GetCurrentUserQuery request, CancellationToken cancellationToken)    {        var user = await _unitOfWork.Repository<User>().GetByIdAsync(request.UserId, cancellationToken);        if (user == null)        {            _logger.LogWarning("User not found with ID: {UserId}", request.UserId);            return Result<UserDTO>.Error(_localizer["UserNotFound"].ToString());        }        _logger.LogInformation("Retrieved user with ID: {UserId}", request.UserId);        var userDto = _mapper.Map<UserDTO>(user);        return Result<UserDTO>.Success(userDto);    }}