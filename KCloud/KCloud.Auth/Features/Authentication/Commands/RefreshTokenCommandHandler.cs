using Ardalis.Result;using AutoMapper;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class RefreshTokenCommandHandler(    IUnitOfWork unitOfWork,    ITokenService tokenService,    IRefreshTokenService refreshTokenService,    IMapper mapper,    ILogger<RefreshTokenCommandHandler> logger,    IStringLocalizer localizer)    : IRequestHandler<RefreshTokenCommand, Result<AuthResult>>{    private readonly IUnitOfWork _unitOfWork = unitOfWork;    public async Task<Result<AuthResult>> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)    {        try        {            var user = await refreshTokenService.GetUserByRefreshTokenAsync(                request.RefreshToken,                 cancellationToken);            if (user == null)            {                return Result<AuthResult>.Error(localizer["InvalidOrExpiredRefreshToken"]);            }                        var userDto = mapper.Map<UserDTO>(user);            var newAccessToken = tokenService.GenerateJwtToken(userDto);            var newRefreshToken = await refreshTokenService.GenerateRefreshTokenAsync(user.Id, cancellationToken);            var authResult = new AuthResult            {                Token = newAccessToken,                RefreshToken = newRefreshToken,                Message = localizer["TokenRefreshed"]            };            return Result<AuthResult>.Success(authResult);        }        catch (Exception ex)        {            logger.LogError(ex, "Error during token refresh");            return Result<AuthResult>.Error(localizer["UnexpectedError"]);        }    }}