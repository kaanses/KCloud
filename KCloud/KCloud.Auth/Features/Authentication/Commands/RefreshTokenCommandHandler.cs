// RefreshTokenCommandHandler.csusing Ardalis.Result;using AutoMapper;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using KCloud.Auth.Services;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class RefreshTokenCommandHandler : IRequestHandler<RefreshTokenCommand, Result<AuthResult>>{    private readonly IUnitOfWork _unitOfWork;    private readonly ITokenService _tokenService;    private readonly IRefreshTokenService _refreshTokenService;    private readonly IMapper _mapper;    private readonly ILogger<RefreshTokenCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    public RefreshTokenCommandHandler(        IUnitOfWork unitOfWork,        ITokenService tokenService,        IRefreshTokenService refreshTokenService,        IMapper mapper,        ILogger<RefreshTokenCommandHandler> logger,        IStringLocalizer localizer)    {        _unitOfWork = unitOfWork;        _tokenService = tokenService;        _refreshTokenService = refreshTokenService;        _mapper = mapper;        _logger = logger;        _localizer = localizer;    }    public async Task<Result<AuthResult>> Handle(RefreshTokenCommand request, CancellationToken cancellationToken)    {        try        {            // Extract user ID from token            if (!_tokenService.TryGetUserIdFromToken(request.AccessToken, out var userGuid))            {                return Result<AuthResult>.Error(_localizer["InvalidToken"].ToString());            }            // Get user            var user = await _unitOfWork.Repository<User>().GetByIdAsync(userGuid, cancellationToken);            if (user == null)            {                return Result<AuthResult>.Error(_localizer["UserNotFound"].ToString());            }            // Generate new refresh token            var newRefreshToken = await _refreshTokenService.GenerateRefreshTokenAsync(userGuid, cancellationToken);            // Generate new access token            var userDto = _mapper.Map<UserDTO>(user);            var newAccessToken = _tokenService.GenerateJwtToken(userDto);            // Create result            var authResult = _mapper.Map<AuthResult>(user);            authResult.Token = newAccessToken;            authResult.RefreshToken = newRefreshToken;            authResult.Message = _localizer["TokenRefreshed"].ToString();            return Result<AuthResult>.Success(authResult);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error during token refresh");            return Result<AuthResult>.Error(_localizer["UnexpectedError"].ToString());        }    }}