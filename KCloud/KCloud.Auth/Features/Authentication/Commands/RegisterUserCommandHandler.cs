using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Auth.Helpers;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using KCloud.Common.Helpers;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class RegisterUserCommandHandler(    IUnitOfWork unitOfWork,    ITokenService tokenService,    IValidator<RegisterUserCommand> validator,    ILogger<RegisterUserCommandHandler> logger,    IStringLocalizer localizer,    IMapper mapper)    : IRequestHandler<RegisterUserCommand, Result<AuthResult>>{    public async Task<Result<AuthResult>> Handle(RegisterUserCommand request, CancellationToken cancellationToken)    {        var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);        if (!validationResult.IsSuccess)        {            return Result<AuthResult>.Invalid(validationResult.ValidationErrors);        }                var user = new User        {            Id = Guid.NewGuid(),            Username = request.Username,            Email = request.Email,            PasswordHash = PasswordHasher.HashPassword(request.Password),            Role = "User"        };                await unitOfWork.Repository<User>().AddAsync(user, cancellationToken);                var refreshToken = new RefreshToken        {            Token ="",            ExpiryTime = DateTime.UtcNow.AddDays(7),            UserId = user.Id        };                await unitOfWork.Repository<RefreshToken>().AddAsync(refreshToken, cancellationToken);                await unitOfWork.CommitAsync(cancellationToken);                        var userDto = mapper.Map<UserDTO>(user);                var token = tokenService.GenerateJwtToken(userDto);        logger.LogInformation("Registration completed for user: {UserId}", user.Id);                return Result<AuthResult>.Success(new AuthResult        {            UserId = user.Id,            Username = user.Username,            Token = token,            RefreshToken = refreshToken.Token,            Message = localizer["RegistrationSuccess"].Value        });    }}