// KCloud.Auth/Features/Authentication/Commands/RegisterUserCommandHandler.csusing Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Auth.Helpers;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using KCloud.Common.Helpers;using MediatR;using Microsoft.Extensions.Localization;using Microsoft.Extensions.Logging;namespace KCloud.Auth.Features.Authentication.Commands;public class RegisterUserCommandHandler : IRequestHandler<RegisterUserCommand, Result<AuthResult>>{    private readonly IUnitOfWork _unitOfWork;    private readonly ITokenService _tokenService;    private readonly IValidator<RegisterUserCommand> _validator;    private readonly ILogger<RegisterUserCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IMapper _mapper;    public RegisterUserCommandHandler(        IUnitOfWork unitOfWork,         ITokenService tokenService,        IValidator<RegisterUserCommand> validator,        ILogger<RegisterUserCommandHandler> logger,        IStringLocalizer localizer, IMapper mapper)    {        _unitOfWork = unitOfWork;        _tokenService = tokenService;        _validator = validator;        _logger = logger;        _localizer = localizer;        _mapper = mapper;    }    public async Task<Result<AuthResult>> Handle(RegisterUserCommand request, CancellationToken cancellationToken)    {        // Validate the request        var validationResult = await ValidationHelper.ValidateAsync(_validator, request, _logger);        if (!validationResult.IsSuccess)        {            return Result<AuthResult>.Error(validationResult.Errors.FirstOrDefault());        }                var user = new User        {            Id = Guid.NewGuid(),            Username = request.Username,            Email = request.Email,            PasswordHash = PasswordHasher.HashPassword(request.Password),            Role = "User"        };                // Add user to repository        await _unitOfWork.Repository<User>().AddAsync(user, cancellationToken);                // Create refresh token        var refreshToken = new RefreshToken        {            Token = _tokenService.GenerateRefreshToken(),            ExpiryTime = DateTime.UtcNow.AddDays(7),            UserId = user.Id        };                // Add refresh token to repository        await _unitOfWork.Repository<RefreshToken>().AddAsync(refreshToken, cancellationToken);                // Save changes to database        await _unitOfWork.CommitAsync(cancellationToken);                // Generate JWT token                var userDto = _mapper.Map<UserDTO>(user);                var token = _tokenService.GenerateJwtToken(userDto);        _logger.LogInformation("Registration completed for user: {UserId}", user.Id);                return Result<AuthResult>.Success(new AuthResult        {            UserId = user.Id,            Username = user.Username,            Token = token,            RefreshToken = refreshToken.Token,            Message = "User registered successfully"        });    }}