using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Auth.Helpers;using KCloud.Auth.Interfaces;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using KCloud.Common.Helpers;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class RegisterUserCommandHandler(    IUnitOfWork unitOfWork,    IValidator<RegisterUserCommand> validator,    IMediator mediator,      ILogger<RegisterUserCommandHandler> logger,    IStringLocalizer localizer)    : IRequestHandler<RegisterUserCommand, Result<AuthResult>>{    public async Task<Result<AuthResult>> Handle(RegisterUserCommand request, CancellationToken cancellationToken)    {        var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);        if (!validationResult.IsSuccess)        {            return Result<AuthResult>.Invalid(validationResult.ValidationErrors);        }                // Create user        var user = new User        {            Id = Guid.NewGuid(),            Username = request.Username,            Email = request.Email,            PasswordHash = PasswordHasher.HashPassword(request.Password),            Role = "User"        };                await unitOfWork.Repository<User>().AddAsync(user, cancellationToken);        await unitOfWork.CommitAsync(cancellationToken);        var loginCommand = new LoginUserCommand(request.Email, request.Password);                var loginResult = await mediator.Send(loginCommand, cancellationToken);                if (loginResult.IsSuccess)        {            loginResult.Value.Message = localizer["RegistrationSuccess"].Value;        }                logger.LogInformation("Registration completed for user: {UserId}", user.Id);        return loginResult;    }}