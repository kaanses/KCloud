// KCloud.Auth/Features/Authentication/Commands/LoginUserCommandHandler.csusing Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Auth.Helpers;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using KCloud.Common.Resources; using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class LoginUserCommandHandler : IRequestHandler<LoginUserCommand, Result<AuthResult>>{    private readonly IUnitOfWork _unitOfWork;    private readonly ITokenService _tokenService;    private readonly IRefreshTokenService _refreshTokenService;    private readonly ILogger<LoginUserCommandHandler> _logger;    private readonly IMapper _mapper;    private readonly IStringLocalizer<SharedResource> _localizer;    public LoginUserCommandHandler(        IUnitOfWork unitOfWork,        ITokenService tokenService,        IRefreshTokenService refreshTokenService,        ILogger<LoginUserCommandHandler> logger,        IMapper mapper,        IStringLocalizer<SharedResource> localizer)    {        _unitOfWork = unitOfWork;        _tokenService = tokenService;        _refreshTokenService = refreshTokenService;        _logger = logger;        _mapper = mapper;        _localizer = localizer;    }    public async Task<Result<AuthResult>> Handle(LoginUserCommand request, CancellationToken cancellationToken)    {            var user = await _unitOfWork.Repository<User>()            .Query()            .FirstOrDefaultAsync(u => u.Email.ToLower() == request.Email.ToLower(), cancellationToken);            if (user == null)        {            _logger.LogInformation("Login failed - user not found for email: {Email}", request.Email);            return Result<AuthResult>.Error(_localizer["InvalidEmail"].Value);        }            if (!PasswordHasher.VerifyPassword(request.Password, user.PasswordHash))        {            _logger.LogInformation("Login failed - invalid password for user: {Email}", request.Email);            return Result<AuthResult>.Error(_localizer["InvalidPassword"].Value);        }                var refreshToken = await _refreshTokenService.GenerateRefreshTokenAsync(user.Id, cancellationToken);            var userDto = _mapper.Map<UserDTO>(user);        var token = _tokenService.GenerateJwtToken(userDto);        var authResult = _mapper.Map<AuthResult>(user);        authResult.Token = token;        authResult.RefreshToken = refreshToken;        authResult.Message = _localizer["LoginSuccess"].Value;        _logger.LogInformation("Login successful for user: {UserId}", user.Id);        return Result<AuthResult>.Success(authResult);    }}