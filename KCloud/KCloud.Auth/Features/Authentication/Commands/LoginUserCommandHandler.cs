using Ardalis.Result;using AutoMapper;using KCloud.Auth.Helpers;using KCloud.Auth.Interfaces;using KCloud.Auth.Models;using KCloud.Auth.Models.DTO;using KCloud.Auth.Models.Entity;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Features.Authentication.Commands;public class LoginUserCommandHandler(    IUnitOfWork unitOfWork,    ITokenService tokenService,    IRefreshTokenService refreshTokenService,    ILogger<LoginUserCommandHandler> logger,    IMapper mapper,    IStringLocalizer localizer)    : IRequestHandler<LoginUserCommand, Result<AuthResult>>{    public async Task<Result<AuthResult>> Handle(LoginUserCommand request, CancellationToken cancellationToken)    {            var user = await unitOfWork.Repository<User>()            .Query()            .FirstOrDefaultAsync(u => u.Email.ToLower() == request.Email.ToLower(), cancellationToken);            if (user == null)        {            logger.LogInformation("Login failed - user not found for email: {Email}", request.Email);            return Result<AuthResult>.Invalid(new ValidationError             {                 Identifier = "Email",                 ErrorMessage = localizer["InvalidEmail"].Value             });        }            if (!PasswordHasher.VerifyPassword(request.Password, user.PasswordHash))        {            logger.LogInformation("Login failed - invalid password for user: {Email}", request.Email);            return Result<AuthResult>.Invalid(new ValidationError             {                 Identifier = "Password",                 ErrorMessage = localizer["InvalidPassword"].Value             });        }                var refreshToken = await refreshTokenService.GenerateRefreshTokenAsync(user.Id, cancellationToken);            var userDto = mapper.Map<UserDTO>(user);        var token = tokenService.GenerateJwtToken(userDto);        var authResult = mapper.Map<AuthResult>(user);        authResult.Token = token;        authResult.RefreshToken = refreshToken;        authResult.Message = localizer["LoginSuccess"].Value;        logger.LogInformation("Login successful for user: {UserId}", user.Id);        return Result<AuthResult>.Success(authResult);    }}