using FluentValidation;using KCloud.Auth.Features.Authentication.Commands;using KCloud.Auth.Interfaces;using KCloud.Auth.Helpers;using Microsoft.Extensions.Localization;namespace KCloud.Auth.Validators;public class RegisterUserCommandValidator : AbstractValidator<RegisterUserCommand>{    private readonly IUnitOfWork _unitOfWork;    private readonly IStringLocalizer _localizer;        public RegisterUserCommandValidator(IUnitOfWork unitOfWork, IStringLocalizer localizer)    {        _unitOfWork = unitOfWork;        _localizer = localizer;                        RuleFor(x => x.Username)            .NotEmpty().WithMessage(_localizer["UsernameRequired"].Value)            .MinimumLength(3).WithMessage(_localizer["UsernameMinLength"].Value)            .MaximumLength(50).WithMessage(_localizer["UsernameMaxLength"].Value)            .MustAsync(async (username, cancellationToken) =>                 await RegisterHelper.BeUniqueUsername(_unitOfWork, username, cancellationToken))            .WithMessage(_localizer["UsernameAlreadyTaken"]);        RuleFor(x => x.Email)            .NotEmpty().WithMessage(_localizer["EmailRequired"].Value)            .EmailAddress().WithMessage(_localizer["EmailInvalidFormat"].Value)            .MustAsync(async (email, cancellationToken) =>                 await RegisterHelper.BeUniqueEmail(_unitOfWork, email, cancellationToken))            .WithMessage(_localizer["EmailAlreadyRegistered"].Value);        RuleFor(x => x.Password)            .NotEmpty().WithMessage(_localizer["PasswordRequired"].Value)            .MinimumLength(6).WithMessage(_localizer["PasswordMinLength"].Value)            .Matches("[A-Z]").WithMessage(_localizer["PasswordRequiresUppercase"].Value)            .Matches("[0-9]").WithMessage(_localizer["PasswordRequiresNumber"].Value);    }}