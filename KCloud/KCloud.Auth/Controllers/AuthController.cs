// KCloud.Auth/Controllers/AuthController.csusing Ardalis.Result;using KCloud.Auth.Features.Authentication.Commands;using KCloud.Auth.Features.Authentication.Queries;using KCloud.Auth.Helpers;using KCloud.Auth.Models.DTO;using MediatR;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Localization;using System.Security.Claims;namespace KCloud.Auth.Controllers;[ApiController][Route("api/auth")]public class AuthController : ControllerBase{    private readonly IMediator _mediator;    private readonly ILogger<AuthController> _logger;    private readonly IStringLocalizer _localizer;    private readonly IConfiguration _configuration;    public AuthController(        IMediator mediator,        ILogger<AuthController> logger,        IStringLocalizer localizer,        IConfiguration configuration)    {        _mediator = mediator;        _logger = logger;        _localizer = localizer;        _configuration = configuration;    }    /// <summary>    /// Register a new user    /// </summary>    [HttpPost("register")]    public async Task<ActionResult<AuthResult>> Register([FromBody] RegisterUserCommand command)    {        _logger.LogInformation("Registration attempt for email: {Email}", command.Email);                var result = await _mediator.Send(command);                if (!result.IsSuccess)        {            var errorMessage = string.Join(", ", result.Errors);            _logger.LogWarning("Registration failed: {Errors}", errorMessage);            return BadRequest(errorMessage);        }        // Set refresh token in cookie        CookieHelper.SetRefreshTokenCookie(Response, result.Value.RefreshToken, _configuration);                _logger.LogInformation("Registration successful for user ID: {UserId}", result.Value.UserId);        return Ok(result.Value);    }    /// <summary>    /// Login a user    /// </summary>    [HttpPost("login")]    public async Task<ActionResult<AuthResult>> Login([FromBody] LoginUserCommand command)    {        _logger.LogInformation("Login attempt for email: {Email}", command.Email);                var result = await _mediator.Send(command);                if (!result.IsSuccess)        {            _logger.LogWarning("Login failed: {Errors}", string.Join(", ", result.Errors));            return BadRequest(new { message = string.Join(", ", result.Errors) });        }        // Set refresh token in cookie        CookieHelper.SetRefreshTokenCookie(Response, result.Value.RefreshToken, _configuration);                _logger.LogInformation("Login successful for user ID: {UserId}", result.Value.UserId);        return Ok(result.Value);    }        /// <summary>    /// Refresh the authentication token    /// </summary>    [HttpPost("refresh")]    public async Task<ActionResult<AuthResult>> RefreshToken()    {        var accessToken = Request.Headers["Authorization"].ToString().Replace("Bearer ", "");        var refreshToken = Request.Cookies["refreshToken"];            if (string.IsNullOrEmpty(refreshToken))        {            _logger.LogWarning("Refresh token attempt failed: No refresh token in cookies");            return BadRequest(new { message = _localizer["RefreshTokenRequired"] });        }            _logger.LogInformation("Token refresh attempt");                var command = new RefreshTokenCommand        {            AccessToken = accessToken,            RefreshToken = refreshToken        };            var result = await _mediator.Send(command);            if (!result.IsSuccess)        {            _logger.LogWarning("Token refresh failed: {Errors}", string.Join(", ", result.Errors));            return BadRequest(new { message = string.Join(", ", result.Errors) });        }                CookieHelper.SetRefreshTokenCookie(Response, result.Value.RefreshToken, _configuration);                _logger.LogInformation("Token refresh successful for user ID: {UserId}", result.Value.UserId);        return Ok(result.Value);    }        /// <summary>    /// Log out a user by invalidating their refresh token    /// </summary>    [HttpPost("logout")]    [Authorize]    public async Task<IActionResult> Logout()    {        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);                if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out var userGuid))        {            _logger.LogWarning("Logout attempt with invalid token");            return Unauthorized(new { message = _localizer["InvalidToken"] });        }                _logger.LogInformation("Logout attempt for user ID: {UserId}", userId);                var command = new LogoutCommand { UserId = userGuid };        var result = await _mediator.Send(command);        // Remove the refresh token cookie        CookieHelper.RemoveRefreshTokenCookie(Response);                if (!result.IsSuccess)        {            _logger.LogWarning("Logout encountered issues: {Errors}", string.Join(", ", result.Errors));            // Still return OK since we've deleted the cookie        }                _logger.LogInformation("Logout successful for user ID: {UserId}", userId);        return Ok(new { message = _localizer["LogoutSuccess"] });    }        /// <summary>    /// Get the current authenticated user's information    /// </summary>    [HttpGet("current")]    [Authorize]    public async Task<ActionResult<UserDTO>> GetCurrentUser()    {        var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);                if (string.IsNullOrEmpty(userId) || !Guid.TryParse(userId, out var userGuid))        {            _logger.LogWarning("Get current user attempt with invalid token");            return Unauthorized(new { message = _localizer["InvalidToken"] });        }                _logger.LogInformation("Get current user request for user ID: {UserId}", userId);                var query = new GetCurrentUserQuery { UserId = userGuid };        var result = await _mediator.Send(query);                if (!result.IsSuccess)        {            _logger.LogWarning("Get current user failed: {Errors}", string.Join(", ", result.Errors));            return BadRequest(new { message = string.Join(", ", result.Errors) });        }                return Ok(result.Value);    }}