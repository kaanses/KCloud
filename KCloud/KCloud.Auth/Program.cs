using System.Globalization;using System.Reflection;using System.Text;using AutoMapper;using FluentValidation;using KCloud.Auth.Data;using KCloud.Auth.Features.Authentication.Commands;using KCloud.Auth.Features.Authentication.Queries;using KCloud.Auth.Interfaces;using KCloud.Auth.Mappings;using KCloud.Auth.Services;using KCloud.Auth.Validators;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.EntityFrameworkCore;using Microsoft.IdentityModel.Tokens;using Serilog;using KCloud.Common.Resources;using Microsoft.AspNetCore.Localization;using Microsoft.Extensions.Localization;using MediatR;using Ardalis.Result;using KCloud.Common.Interfaces;using KCloud.Common.Services;using Microsoft.AspNetCore.Mvc;Log.Logger = new LoggerConfiguration()    .MinimumLevel.Information()    .WriteTo.Console()    .CreateLogger();try{    Log.Information("Starting KCloud Auth API");    var builder = WebApplication.CreateBuilder(args);    builder.Host.UseSerilog((context, services, configuration) => configuration        .MinimumLevel.Information()        .WriteTo.Console()        .ReadFrom.Configuration(context.Configuration)        .ReadFrom.Services(services));    builder.Services.AddLocalization(options => options.ResourcesPath = "");    builder.Services.AddEndpointsApiExplorer();    builder.Services.AddSwaggerGen();    builder.Services.Configure<RequestLocalizationOptions>(options =>    {        var supportedCultures = new[]        {            new CultureInfo("en-US"),            new CultureInfo("tr-TR")        };        options.DefaultRequestCulture = new RequestCulture("en-US");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;    });    builder.Services.AddDbContext<AuthDbContext>(options =>        options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));    builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();    builder.Services.AddHttpContextAccessor();    builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)        .AddJwtBearer(options =>        {            var jwtKey = builder.Configuration["Jwt:Key"];            var key = Encoding.UTF8.GetBytes(jwtKey);            options.TokenValidationParameters = new TokenValidationParameters            {                ValidateIssuerSigningKey = true,                IssuerSigningKey = new SymmetricSecurityKey(key),                ValidateIssuer = true,                ValidIssuer = builder.Configuration["Jwt:Issuer"],                ValidateAudience = true,                ValidAudience = builder.Configuration["Jwt:Audience"],                ValidateLifetime = true,                ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetValue<double>("Jwt:ClockSkew"))            };        });    builder.Services.AddAuthorization();    builder.Services.AddScoped<IValidator<RegisterUserCommand>, RegisterUserCommandValidator>();    var mapperConfig = new MapperConfiguration(cfg => { cfg.AddProfile<MappingProfile>(); });    IMapper mapper = mapperConfig.CreateMapper();    builder.Services.AddSingleton(mapper);    builder.Services.AddScoped<ITokenService, TokenService>();    builder.Services.AddScoped<IRefreshTokenService, RefreshTokenService>();    builder.Services.AddScoped<IResultHandler, ResultHandler>();    builder.Services.AddTransient<IStringLocalizer>(sp =>        sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));    var app = builder.Build();    using (var scope = app.Services.CreateScope())    {        var dbContext = scope.ServiceProvider.GetRequiredService<AuthDbContext>();        dbContext.Database.Migrate();    }    // Configure the HTTP request pipeline    if (app.Environment.IsDevelopment())    {        app.UseSwagger();        app.UseSwaggerUI();    }    app.UseRequestLocalization();    app.UseSerilogRequestLogging();    app.UseHttpsRedirection();    app.UseAuthentication();    app.UseAuthorization();    var authGroup = app.MapGroup("/auth").WithTags("Authentication");    authGroup.MapPost("/register",            async (RegisterUserCommand command, IMediator mediator, IResultHandler resultHandler) =>            {                var result = await mediator.Send(command);                return resultHandler.HandleResult(result);            })        .WithName("Register")        .WithSummary("Register a new user");    authGroup.MapPost("/login", async (LoginUserCommand command, IMediator mediator, IResultHandler resultHandler) =>        {            var result = await mediator.Send(command);            return resultHandler.HandleResult(result);        })        .WithName("Login")        .WithSummary("User login");    authGroup.MapPost("/refresh",            async (RefreshTokenCommand command, IMediator mediator, IResultHandler resultHandler) =>            {                var result = await mediator.Send(command);                return resultHandler.HandleResult(result);            })        .WithName("RefreshToken")        .WithSummary("Refresh access token");    authGroup.MapPost("/logout",            async ([FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>            {                var command = new LogoutCommand();                var result = await mediator.Send(command);                return resultHandler.HandleResult(result);            })        .WithName("Logout")        .WithSummary("User logout");    authGroup.MapGet("/me",            async ([FromBody] GetCurrentUserQuery query, IMediator mediator, IResultHandler resultHandler) =>            {                var result = await mediator.Send(query);                return resultHandler.HandleResult(result);            })        .WithName("GetCurrentUser")        .WithSummary("Get current user information")        .RequireAuthorization();        authGroup.MapGet("/users/search",            async (string term, IMediator mediator, IResultHandler resultHandler) =>            {                var query = new SearchUsersQuery(term ?? string.Empty);                var result = await mediator.Send(query);                return resultHandler.HandleResult(result);            })        .WithName("SearchUsers")        .WithSummary("Search users by term")        .RequireAuthorization();    app.Run();}catch (Exception ex){    Log.Fatal(ex, "Application terminated unexpectedly");}finally{    Log.CloseAndFlush();}