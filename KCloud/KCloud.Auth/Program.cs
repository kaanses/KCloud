    using System.Globalization;    using System.Reflection;    using System.Text;    using AutoMapper;    using FluentValidation;    using FluentValidation.AspNetCore;    using KCloud.Auth.Data;    using KCloud.Auth.Features.Authentication.Commands;    using KCloud.Auth.Interfaces;    using KCloud.Auth.Mappings;    using KCloud.Auth.Services;    using KCloud.Auth.Validators;    using Microsoft.AspNetCore.Authentication.JwtBearer;    using Microsoft.EntityFrameworkCore;    using Microsoft.IdentityModel.Tokens;    using Serilog;    using KCloud.Common.Resources;    using Microsoft.AspNetCore.Localization;    using Microsoft.Extensions.Localization;    // Create a simple console logger    Log.Logger = new LoggerConfiguration()        .MinimumLevel.Information()        .WriteTo.Console()        .CreateLogger();    try    {        Log.Information("Starting KCloud Auth API");        var builder = WebApplication.CreateBuilder(args);                // Configure Serilog with minimal settings        builder.Host.UseSerilog((context, services, configuration) => configuration            .MinimumLevel.Information()            .WriteTo.Console()            .ReadFrom.Configuration(context.Configuration)            .ReadFrom.Services(services));        // Add services to the container        // Set up localization - make sure the ResourcesPath points to where your resources are        builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");                builder.Services.AddControllers();        builder.Services.AddEndpointsApiExplorer();        builder.Services.AddSwaggerGen();        builder.Services.Configure<RequestLocalizationOptions>(options =>        {            var supportedCultures = new[]            {                new CultureInfo("en-US"),                 new CultureInfo("tr-TR")              };                    options.DefaultRequestCulture = new RequestCulture("en-US");            options.SupportedCultures = supportedCultures;            options.SupportedUICultures = supportedCultures;        });                // Add SQLite database        builder.Services.AddDbContext<AuthDbContext>(options =>            options.UseSqlite(builder.Configuration.GetConnectionString("DefaultConnection")));        // Register Repository and UnitOfWork        builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();                builder.Services.AddHttpContextAccessor();        // Add MediatR        builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));        // Add JWT Authentication        builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)            .AddJwtBearer(options =>            {                options.TokenValidationParameters = new TokenValidationParameters                {                    ValidateIssuer = true,                    ValidateAudience = true,                    ValidateLifetime = true,                    ValidateIssuerSigningKey = true,                    ValidIssuer = builder.Configuration["Jwt:Issuer"],                    ValidAudience = builder.Configuration["Jwt:Audience"],                    IssuerSigningKey = new SymmetricSecurityKey(                        Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ??                            throw new InvalidOperationException("JWT Key is missing in configuration")))                };            });        // Add FluentValidation        builder.Services.AddScoped<IValidator<RegisterUserCommand>, RegisterUserCommandValidator>();        // Register services        var mapperConfig = new MapperConfiguration(cfg =>        {            cfg.AddProfile<MappingProfile>();        });                IMapper mapper = mapperConfig.CreateMapper();                builder.Services.AddSingleton(mapper);                // Register token and refresh token services        builder.Services.AddScoped<ITokenService, TokenService>();        builder.Services.AddScoped<IRefreshTokenService, RefreshTokenService>();                        // Register non-generic StringLocalizer for backward compatibility        builder.Services.AddTransient<IStringLocalizer>(sp =>             sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));                var app = builder.Build();        // Configure the HTTP request pipeline        if (app.Environment.IsDevelopment())        {            app.UseSwagger();            app.UseSwaggerUI();        }        app.UseRequestLocalization();                app.UseSerilogRequestLogging();        app.UseHttpsRedirection();        app.UseAuthentication();        app.UseAuthorization();        app.MapControllers();        // Apply migrations if available        using (var scope = app.Services.CreateScope())        {            var dbContext = scope.ServiceProvider.GetRequiredService<AuthDbContext>();            dbContext.Database.Migrate();        }        Log.Information("Application started");        app.Run();        Log.Information("Application stopped");    }    catch (Exception ex)    {        Log.Fatal(ex, "Application terminated unexpectedly");    }    finally    {        Log.CloseAndFlush();    }