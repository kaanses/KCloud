// KCloud.Common/Helpers/FilePermissionHelper.csusing System.Security.Cryptography;using KCloud.FileMetadata.Models.Entity;using KCloud.FileMetadata.Models.Enum;using FileShare = KCloud.FileMetadata.Models.Entity.FileShare;namespace KCloud.FileMetadata.Helpers;public static class FilePermissionHelper{    public static bool CanUserReadFile(FileMetadata.Models.Entity.FileMetadata file, Guid? userId)    {        if (file.Shares.Any(s => s is { IsPublic: true, IsActive: true } && IsNotExpired(s) && userId == Guid.Empty))            return true;                if (file.UserId == userId)            return true;                return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            IsNotExpired(s));    }        public static bool CanUserModifyFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        if (file.UserId == userId)            return true;                return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            (s.Permission == FilePermission.Write || s.Permission == FilePermission.FullAccess) &&            IsNotExpired(s));    }    public static bool CanUserDeleteFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {                if (file.UserId == userId)            return true;                return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            (s.Permission == FilePermission.Delete || s.Permission == FilePermission.FullAccess) &&            IsNotExpired(s));    }    public static bool CanUserShareFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {                if (file.UserId == userId)            return true;                return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            s.Permission == FilePermission.FullAccess &&            IsNotExpired(s));    }    public static bool CanUserAccessFolder(Folder folder, Guid userId)    {        if (folder.UserId == userId)            return true;                // TODO: extend this for shared folders        return false;    }    public static FilePermission GetUserPermissionLevel(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        if (file.UserId == userId)            return FilePermission.FullAccess;                var userShares = file.Shares            .Where(s => s.SharedWithUserId == userId && s.IsActive && IsNotExpired(s))            .ToList();        if (!userShares.Any())            return FilePermission.Read;                return userShares.Max(s => s.Permission);    }    private static bool IsNotExpired(FileShare share)    {        return share.ExpiresAt == null || share.ExpiresAt > DateTime.UtcNow;    }    public static FilePermission GetFilePermission(string permission)    {        return permission.ToLower() switch        {            "read" => FilePermission.Read,            "write" => FilePermission.Write,            "delete" => FilePermission.Delete,            "fullaccess" => FilePermission.FullAccess,            _ => FilePermission.Read // Default to Read if invalid        };    }    public static string GeneratePublicLinkToken()    {        using var rng = RandomNumberGenerator.Create();        var bytes = new byte[12];        rng.GetBytes(bytes);        return Convert.ToBase64String(bytes).Replace("+", "0").Replace("/", "1")[..16];    }}