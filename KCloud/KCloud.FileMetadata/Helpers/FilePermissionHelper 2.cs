// KCloud.Common/Helpers/FilePermissionHelper.csusing KCloud.FileMetadata.Models.Entity;using KCloud.FileMetadata.Models.Enum;using FileShare = KCloud.FileMetadata.Models.Entity.FileShare;namespace KCloud.FileMetadata.Helpers;public static class FilePermissionHelper{    public static bool CanUserReadFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        // Owner can always read        if (file.UserId == userId)            return true;        // Check if user has any permission (all permissions include read)        return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            IsNotExpired(s));    }    public static bool CanUserModifyFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        // Owner can always modify        if (file.UserId == userId)            return true;        // Check if user has Write or FullAccess permission        return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            (s.Permission == FilePermission.Write || s.Permission == FilePermission.FullAccess) &&            IsNotExpired(s));    }    public static bool CanUserDeleteFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        // Owner can always delete        if (file.UserId == userId)            return true;        // Check if user has Delete or FullAccess permission        return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            (s.Permission == FilePermission.Delete || s.Permission == FilePermission.FullAccess) &&            IsNotExpired(s));    }    public static bool CanUserShareFile(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        // Owner can always share        if (file.UserId == userId)            return true;        // Check if user has FullAccess permission        return file.Shares.Any(s =>             s.SharedWithUserId == userId &&            s.IsActive &&            s.Permission == FilePermission.FullAccess &&            IsNotExpired(s));    }    public static bool CanUserAccessFolder(Folder folder, Guid userId)    {        // Owner can always access        if (folder.UserId == userId)            return true;        // For now, only owners can access folders        // This can be extended later for shared folders        return false;    }    public static FilePermission GetUserPermissionLevel(FileMetadata.Models.Entity.FileMetadata file, Guid userId)    {        if (file.UserId == userId)            return FilePermission.FullAccess;                var userShares = file.Shares            .Where(s => s.SharedWithUserId == userId && s.IsActive && IsNotExpired(s))            .ToList();        if (!userShares.Any())            return FilePermission.Read;        // Return the highest permission level        return userShares.Max(s => s.Permission);    }    private static bool IsNotExpired(FileShare share)    {        return share.ExpiresAt == null || share.ExpiresAt > DateTime.UtcNow;    }}