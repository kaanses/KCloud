using KCloud.FileMetadata.Models.Entity;namespace KCloud.FileMetadata.Helpers;public static class QueryHelper{    public static IQueryable<Models.Entity.FileMetadata> ApplyOrdering(        this IQueryable<Models.Entity.FileMetadata> query,        string? orderBy,        bool descending = true)    {        if (string.IsNullOrWhiteSpace(orderBy) || orderBy.Equals("CreatedAt", StringComparison.OrdinalIgnoreCase))        {            return descending ? query.OrderByDescending(f => f.UploadedAt) : query.OrderBy(f => f.UploadedAt);        }                return orderBy switch        {            "FileName" => descending ? query.OrderByDescending(f => f.FileName) : query.OrderBy(f => f.FileName),            "FileSize" => descending ? query.OrderByDescending(f => f.FileSizeBytes) : query.OrderBy(f => f.FileSizeBytes),            "ContentType" => descending ? query.OrderByDescending(f => f.ContentType) : query.OrderBy(f => f.ContentType),            _ => descending ? query.OrderByDescending(f => f.UploadedAt) : query.OrderBy(f => f.UploadedAt)        };    }    public static IQueryable<Models.Entity.FileMetadata> ApplySearchFilter(        this IQueryable<Models.Entity.FileMetadata> query,        string? searchTerm)    {        if (string.IsNullOrWhiteSpace(searchTerm))            return query;        var term = searchTerm.ToLower();        return query.Where(f =>             f.FileName.ToLower().Contains(term) ||            f.ContentType.ToLower().Contains(term));    }            public static IQueryable<Folder> ApplyOrdering(        this IQueryable<Folder> query,        string? orderBy,        bool descending = true)    {        return (orderBy ?? "CreatedAt") switch        {            "FileName" => descending ? query.OrderByDescending(f => f.Name) : query.OrderBy(f => f.Name),            _ => descending ? query.OrderByDescending(f => f.CreatedAt) : query.OrderBy(f => f.CreatedAt)        };    }}