// KCloud.Common/Helpers/StoragePathHelper.csusing System.Text;namespace KCloud.FileMetadata.Helpers;public static class StoragePathHelper{    public static async Task<string> GenerateStoragePathAsync<T>(        Guid userId,         string fileName,         Guid? folderId,         Func<Guid, Task<T>> getFolderById,        Func<T, Guid> getFolderId,        Func<T, string> getFolderName,        Func<T, Guid?> getParentFolderId)        where T : class    {        var pathBuilder = new StringBuilder();                pathBuilder.Append($"users/{userId}");        if (folderId.HasValue)        {            var folderPath = await BuildFolderPathAsync(                folderId.Value,                 getFolderById,                 getFolderId,                 getFolderName,                 getParentFolderId);                        if (!string.IsNullOrEmpty(folderPath))            {                pathBuilder.Append($"/{folderPath}");            }        }        else        {            pathBuilder.Append("/root");        }                var uniquePrefix = Guid.NewGuid().ToString("N")[..8];        pathBuilder.Append($"/{uniquePrefix}_{SanitizeFileName(fileName)}");                return pathBuilder.ToString();    }        public static async Task<string> BuildFolderPathAsync<T>(        Guid folderId,        Func<Guid, Task<T>> getFolderById,        Func<T, Guid> getFolderId,        Func<T, string> getFolderName,        Func<T, Guid?> getParentFolderId)        where T : class    {        var folderNames = new List<string>();        var currentFolderId = (Guid?)folderId;         var visitedFolders = new HashSet<Guid>();                    while (currentFolderId.HasValue)        {            if (visitedFolders.Contains(currentFolderId.Value))            {                break;            }            visitedFolders.Add(currentFolderId.Value);                    var folder = await getFolderById(currentFolderId.Value);            if (folder == null)            {                break;            }                    folderNames.Insert(0, SanitizeFileName(getFolderName(folder)));                        var parentId = getParentFolderId(folder);            if (!parentId.HasValue)            {                break;            }            currentFolderId = parentId.Value;        }                return string.Join("/", folderNames);    }        private static string SanitizeFileName(string fileName)    {        if (string.IsNullOrEmpty(fileName))            return "unnamed";                var invalidChars = Path.GetInvalidFileNameChars()            .Concat(new[] { '/', '\\', ':', '*', '?', '"', '<', '>', '|' })            .ToArray();                var sanitized = fileName;        foreach (var invalidChar in invalidChars)        {            sanitized = sanitized.Replace(invalidChar, '_');        }                sanitized = sanitized.Trim().Trim('.');                        return string.IsNullOrEmpty(sanitized) ? "unnamed" : sanitized;    }    }