// KCloud.FileMetadata/Program.csusing System.Globalization;using System.Reflection;using System.Text;using AutoMapper;using FluentValidation;using KCloud.Common.Resources;using KCloud.FileMetadata.Data;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Mappings;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Localization;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;using Microsoft.IdentityModel.Tokens;using Serilog;// Create a simple console loggerLog.Logger = new LoggerConfiguration()    .MinimumLevel.Information()    .WriteTo.Console()    .CreateLogger();try{    Log.Information("Starting KCloud FileMetadata API");    var builder = WebApplication.CreateBuilder(args);        builder.Host.UseSerilog((context, services, configuration) => configuration        .MinimumLevel.Information()        .WriteTo.Console()        .ReadFrom.Configuration(context.Configuration)        .ReadFrom.Services(services));    builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");    // Add services to the container    builder.Services.AddControllers();    builder.Services.AddEndpointsApiExplorer();    builder.Services.AddSwaggerGen();    // Add localization    builder.Services.Configure<RequestLocalizationOptions>(options =>    {        var supportedCultures = new[]        {            new CultureInfo("en-US"),             new CultureInfo("tr-TR")          };                options.DefaultRequestCulture = new RequestCulture("en-US");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;    });        // Add PostgreSQL database    builder.Services.AddDbContext<FileMetadataDbContext>(options =>        options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));    // Register Repository and UnitOfWork    builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();    // Add HttpContextAccessor for getting current user    builder.Services.AddHttpContextAccessor();    // Add MediatR    builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));    // Add JWT Authentication (same config as Auth service)    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)        .AddJwtBearer(options =>        {            options.TokenValidationParameters = new TokenValidationParameters            {                ValidateIssuer = true,                ValidateAudience = true,                ValidateLifetime = true,                ValidateIssuerSigningKey = true,                ValidIssuer = builder.Configuration["Jwt:Issuer"],                ValidAudience = builder.Configuration["Jwt:Audience"],                IssuerSigningKey = new SymmetricSecurityKey(                    Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ??                        throw new InvalidOperationException("JWT Key is missing in configuration")))            };        });    // Add FluentValidation    builder.Services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());    // Register AutoMapper    var mapperConfig = new MapperConfiguration(cfg =>    {        cfg.AddProfile<MappingProfile>();    });            IMapper mapper = mapperConfig.CreateMapper();            builder.Services.AddSingleton(mapper);    // Register services    builder.Services.AddTransient<IStringLocalizer>(sp =>         sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));        var app = builder.Build();    // Configure the HTTP request pipeline    if (app.Environment.IsDevelopment())    {        app.UseSwagger();        app.UseSwaggerUI();    }    app.UseRequestLocalization();    app.UseSerilogRequestLogging();    app.UseHttpsRedirection();    app.UseAuthentication();    app.UseAuthorization();    app.MapControllers();    // Apply migrations if available    using (var scope = app.Services.CreateScope())    {        var dbContext = scope.ServiceProvider.GetRequiredService<FileMetadataDbContext>();        await dbContext.Database.MigrateAsync();    }    Log.Information("Application started");    app.Run();    Log.Information("Application stopped");}catch (Exception ex){    Log.Fatal(ex, "Application terminated unexpectedly");}finally{    Log.CloseAndFlush();}