using System.Globalization;using System.Reflection;using System.Text;using AutoMapper;using FluentValidation;using KCloud.Common.Resources;using KCloud.Common.Interfaces;using KCloud.Common.Services;using KCloud.FileMetadata.Data;using KCloud.FileMetadata.Features.Files.Commands;using KCloud.FileMetadata.Features.Files.Queries;using KCloud.FileMetadata.Features.Folders.Commands;using KCloud.FileMetadata.Features.Folders.Queries;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Mappings;using KCloud.FileMetadata.Models;using KCloud.FileMetadata.Services;using Microsoft.AspNetCore.Authentication.JwtBearer;using Microsoft.AspNetCore.Localization;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;using Microsoft.IdentityModel.Tokens;using Serilog;using MediatR;using Microsoft.AspNetCore.Mvc;var builder = WebApplication.CreateBuilder(args);Log.Logger = new LoggerConfiguration()    .ReadFrom.Configuration(builder.Configuration)    .CreateLogger();builder.Host.UseSerilog();try{    Log.Information("Starting KCloud FileMetadata API");        builder.Services.AddLocalization(options => options.ResourcesPath = "");    builder.Services.AddControllers();    builder.Services.AddEndpointsApiExplorer();    builder.Services.AddSwaggerGen();        builder.Services.Configure<RequestLocalizationOptions>(options =>    {        var supportedCultures = new[]        {            new CultureInfo("en-US"),             new CultureInfo("tr-TR")          };                options.DefaultRequestCulture = new RequestCulture("en-US");        options.SupportedCultures = supportedCultures;        options.SupportedUICultures = supportedCultures;    });        builder.Services.AddDbContext<FileMetadataDbContext>(options =>        options.UseNpgsql(builder.Configuration.GetConnectionString("DefaultConnection")));        builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();    builder.Services.AddScoped<IStorageService, StorageService>();    builder.Services.AddScoped<ILimitService, LimitService>();        builder.Services.AddHttpContextAccessor();        builder.Services.AddMediatR(cfg => cfg.RegisterServicesFromAssembly(Assembly.GetExecutingAssembly()));    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)        .AddJwtBearer(options =>        {            var jwtKey = builder.Configuration["Jwt:Key"];            var key = Encoding.UTF8.GetBytes(jwtKey);                options.TokenValidationParameters = new TokenValidationParameters            {                ValidateIssuerSigningKey = true,                IssuerSigningKey = new SymmetricSecurityKey(key),                ValidateIssuer = true,                ValidIssuer = builder.Configuration["Jwt:Issuer"],                ValidateAudience = true,                ValidAudience = builder.Configuration["Jwt:Audience"],                ValidateLifetime = true,                ClockSkew = TimeSpan.FromMinutes(builder.Configuration.GetValue<double>("Jwt:ClockSkew"))            };                    });        builder.Services.AddAuthorization();    builder.Services.AddMemoryCache();        builder.Services.AddValidatorsFromAssembly(Assembly.GetExecutingAssembly());        builder.Services.AddAutoMapper(typeof(MappingProfile));                builder.Services.AddScoped<IFolderDeleteService, FolderDeleteService>();    builder.Services.AddScoped<IResultHandler, ResultHandler>();        builder.Services.AddTransient<IStringLocalizer>(sp =>         sp.GetRequiredService<IStringLocalizerFactory>().Create(typeof(SharedResource)));        var app = builder.Build();        using (var scope = app.Services.CreateScope())    {        var dbContext = scope.ServiceProvider.GetRequiredService<FileMetadataDbContext>();        dbContext.Database.Migrate();      }    if (app.Environment.IsDevelopment())    {        app.UseSwagger();        app.UseSwaggerUI();    }    app.UseRequestLocalization();    app.UseSerilogRequestLogging();    app.UseHttpsRedirection();    app.UseAuthentication();    app.UseAuthorization();        var fileGroup = app.MapGroup("/file")        .WithTags("Files")        .RequireAuthorization();        fileGroup.MapGet("/get-files", async ([AsParameters] GetUserFilesQuery query, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(query);        return resultHandler.HandleResult(result);    })    .WithName("GetFiles")    .WithSummary("Get user's files and folders in a specific location");        fileGroup.MapPost("/details", async ([FromBody] GetFileDetailsQuery query, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(query);        return resultHandler.HandleResult(result);    })    .AllowAnonymous()    .WithName("GetFileDetails")    .WithSummary("Get file details by ID");        fileGroup.MapPost("/create-file", async ([FromBody] CreateFileMetadataCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("CreateFile")    .WithSummary("Create file metadata (called after file upload to storage)");        fileGroup.MapPut("/update-file", async ([FromBody] UpdateFileMetadataCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("UpdateFile")    .WithSummary("Update file (rename or move)");        fileGroup.MapDelete("/delete-file", async ([FromBody] DeleteFileMetadataCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);                if (result.IsSuccess)        {            var message = "File permanently deleted" ;            return Results.Ok(new { message });        }                return resultHandler.HandleResult(result);    })    .WithName("DeleteFile")    .WithSummary("Soft Delete file");        fileGroup.MapDelete("/hard-delete-file", async (          [FromBody]HardDeleteFileCommand command,            IMediator mediator) =>        {            var result = await mediator.Send(command);            return result.IsSuccess                 ? Results.Ok()                 : Results.BadRequest(result.Errors);        })        .WithName("HardDeleteFile")        .WithSummary("Hard delete file");;        fileGroup.MapPost("/share-with-users", async ([FromBody] ShareFileWithUsersCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        Log.Information("Sharing file {FileId} with {UserCount} users - Permission: {Permission}, ExpiresAt: {ExpiresAt}",             command.FileId, command.UserIds.Count, command.Permission, command.ExpiresAt);        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("ShareFile")    .WithSummary("Share file with specific users");        fileGroup.MapPost("/public-link", async ([FromBody] CreatePublicLinkCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("CreatePublicLink")    .WithSummary("Create public link for file");    fileGroup.MapPost("/restore/{id?}", async (            Guid? id,            bool restoreAll,            [FromServices] IMediator mediator,            [FromServices] IResultHandler resultHandler) =>        {            var command = new RestoreFileCommand(id, restoreAll);            var result = await mediator.Send(command);            return resultHandler.HandleResult(result);        })        .WithName("RestoreFile")        .WithSummary("Restore file from trash");        fileGroup.MapGet("/public/{token}", async (            string token,            [FromServices] IMediator mediator,            [FromServices] IResultHandler resultHandler) =>        {            var query = new GetFileByPublicLinkQuery(token);            var result = await mediator.Send(query);            return resultHandler.HandleResult(result);        })        .AllowAnonymous()        .WithName("GetFileByPublicLink")        .WithSummary("Get file metadata via public link");    var folderGroup = app.MapGroup("/folder")        .WithTags("Folders")        .RequireAuthorization();    folderGroup.MapPost("/create-folder", async ([FromBody] CreateFolderCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        Log.Information("Creating folder with name: {FolderName} and parent ID: {ParentFolderId}",             command.Name, command.ParentFolderId);        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("CreateFolder")    .WithSummary("Create a new folder");        folderGroup.MapPut("/update-folder", async ([FromBody] UpdateFolderCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("UpdateFolder")    .WithSummary("Update folder (rename or move)");        folderGroup.MapPost("/delete-folder", async ([FromBody] DeleteFolderCommand command, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(command);        return resultHandler.HandleResult(result);    })    .WithName("DeleteFolder")    .WithSummary("Delete folder");        folderGroup.MapPost("/details", async ([FromBody] GetFolderDetailsQuery query, [FromServices] IMediator mediator, [FromServices] IResultHandler resultHandler) =>    {        var result = await mediator.Send(query);        return resultHandler.HandleResult(result);    })    .WithName("GetFolderDetails")    .WithSummary("Get folder details");                app.Run();    Log.Information("Application stopped");}catch (Exception ex){    Log.Fatal(ex, "Application terminated unexpectedly");}finally{    Log.CloseAndFlush();}