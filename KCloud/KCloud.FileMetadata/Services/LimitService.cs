using System.Security.Claims;using Ardalis.Result;using KCloud.FileMetadata.Interfaces;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Caching.Memory;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Services;public class LimitService(    IUnitOfWork unitOfWork,    IHttpContextAccessor httpContextAccessor,    IMemoryCache cache,    IConfiguration configuration,    IStringLocalizer localizer,    ILogger<LimitService> logger)    : ILimitService{    public async Task<Result<bool>> ValidateUploadLimitsAsync(Guid userId, long newFileSizeBytes, CancellationToken cancellationToken)    {        try        {            var userRole = httpContextAccessor.HttpContext?.User?.FindFirst(ClaimTypes.Role)?.Value;            if (string.IsNullOrEmpty(userRole))            {                return Result<bool>.Error(localizer["UnauthorizedAccess"]);            }            var maxStorageBytes = configuration.GetValue<long>($"UserLimits:{userRole}:MaxStorageBytes");            var maxFileCount = configuration.GetValue<int>($"UserLimits:{userRole}:MaxFileCount");            var cacheKey = $"user_usage_{userId}";            var (currentFileCount, currentStorageBytes) = cache.TryGetValue(cacheKey, out (int, long) cachedUsage)                 ? cachedUsage                 : await CalculateAndCacheUsageAsync(userId, cacheKey, cancellationToken);            // Check storage limit            var totalAfterUpload = currentStorageBytes + newFileSizeBytes;            if (totalAfterUpload > maxStorageBytes)            {                var currentStorageGB = Math.Round(currentStorageBytes / (1024.0 * 1024.0 * 1024.0), 2);                var maxStorageGB = Math.Round(maxStorageBytes / (1024.0 * 1024.0 * 1024.0), 2);                var newFileMB = Math.Round(newFileSizeBytes / (1024.0 * 1024.0), 2);                                return Result<bool>.Error(localizer["StorageLimitExceeded", currentStorageGB, maxStorageGB, newFileMB]);            }            // Check file count limit            if (currentFileCount >= maxFileCount)            {                return Result<bool>.Error(localizer["FileCountLimitExceeded", currentFileCount, maxFileCount]);            }            return Result<bool>.Success(true);        }        catch (Exception ex)        {            logger.LogError(ex, "Error validating upload limits for user {UserId}", userId);            return Result<bool>.Error(localizer["LimitValidationFailed"]);        }    }    private async Task<(int fileCount, long storageBytes)> CalculateAndCacheUsageAsync(Guid userId, string cacheKey, CancellationToken cancellationToken)    {        var files = await unitOfWork.Repository<Models.Entity.FileMetadata>()            .Query()            .Where(f => f.UserId == userId && !f.IsDeleted)            .Select(f => f.FileSizeBytes)            .ToListAsync(cancellationToken);        var fileCount = files.Count;        var storageBytes = files.Sum();                cache.Set(cacheKey, (fileCount, storageBytes), TimeSpan.FromMinutes(3));                return (fileCount, storageBytes);    }}