using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Features.Files.Commands;using KCloud.FileMetadata.Helpers;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Validators;public class CreateFileMetadataCommandValidator : AbstractValidator<CreateFileMetadataCommand>{    private readonly IStringLocalizer<CreateFileMetadataCommandValidator> _localizer;    public CreateFileMetadataCommandValidator(IStringLocalizer<CreateFileMetadataCommandValidator> localizer)    {        _localizer = localizer;        RuleFor(x => x.FileName)            .NotEmpty().WithMessage(_localizer["FileNameRequired"])            .MaximumLength(36).WithMessage(_localizer["FileNameMaxLength"])            .Must(ValidationHelper.BeValidName).WithMessage(_localizer["FileNameInvalidCharacters"]);        RuleFor(x => x.ContentType)            .MaximumLength(50).WithMessage(_localizer["ContentTypeMaxLength"]);        RuleFor(x => x.FileSizeBytes)            .GreaterThan(0).WithMessage(_localizer["FileSizeGreaterThanZero"])            .LessThanOrEqualTo(50_000_000).WithMessage(_localizer["FileSizeMaxLimit"]);        RuleFor(x => x.StoragePath)            .NotEmpty().WithMessage(_localizer["StoragePathRequired"])            .MaximumLength(500).WithMessage(_localizer["StoragePathMaxLength"]);    }}