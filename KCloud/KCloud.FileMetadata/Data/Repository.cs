using KCloud.FileMetadata.Interfaces;using Microsoft.EntityFrameworkCore;namespace KCloud.FileMetadata.Data;public class Repository<T> : IRepository<T> where T : class{    protected readonly FileMetadataDbContext _context;    private readonly DbSet<T> _dbSet;    public Repository(FileMetadataDbContext context)    {        _context = context;        _dbSet = context.Set<T>();    }    public async Task<IEnumerable<T>> GetAllAsync(CancellationToken cancellationToken = default)    {        return await _dbSet.ToListAsync(cancellationToken);    }    public async Task<T?> GetByIdAsync(object id, CancellationToken cancellationToken = default)    {        return await _dbSet.FindAsync(new[] { id }, cancellationToken);    }        public IQueryable<T> Query()    {        return _dbSet.AsQueryable();    }        public async Task AddAsync(T entity, CancellationToken cancellationToken = default)    {        await _dbSet.AddAsync(entity, cancellationToken);    }    public void Update(T entity)    {        _dbSet.Update(entity);    }    public void Delete(T entity)    {        _dbSet.Remove(entity);    }}