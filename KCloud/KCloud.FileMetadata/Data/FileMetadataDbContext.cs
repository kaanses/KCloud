using Microsoft.EntityFrameworkCore;using FileMetadataEntity = KCloud.FileMetadata.Models.Entity.FileMetadata;using FolderEntity = KCloud.FileMetadata.Models.Entity.Folder;using FileShareEntity = KCloud.FileMetadata.Models.Entity.FileShare;namespace KCloud.FileMetadata.Data;public class FileMetadataDbContext : DbContext{    public FileMetadataDbContext(DbContextOptions<FileMetadataDbContext> options) : base(options)    {    }    public DbSet<FileMetadataEntity> Files { get; set; }    public DbSet<FolderEntity> Folders { get; set; }    public DbSet<FileShareEntity> FileShares { get; set; }    protected override void OnModelCreating(ModelBuilder modelBuilder)    {        base.OnModelCreating(modelBuilder);                modelBuilder.Entity<FileMetadataEntity>(entity =>        {            entity.HasKey(e => e.Id);                                    entity.Property(e => e.FileName).IsRequired().HasMaxLength(75);            entity.Property(e => e.UserId).IsRequired();            entity.Property(e => e.UploadedAt).IsRequired();            entity.Property(e => e.LastAccessedAt).IsRequired();            entity.Property(e => e.IsDeleted).IsRequired().HasDefaultValue(false);                                    entity.Property(e => e.ContentType).HasMaxLength(20);            entity.Property(e => e.StoragePath).HasMaxLength(500);            entity.Property(e => e.FolderId).IsRequired(false);            entity.Property(e => e.DeletedAt).IsRequired(false);                                    entity.HasOne(e => e.Folder)                  .WithMany(f => f.Files)                  .HasForeignKey(e => e.FolderId)                  .OnDelete(DeleteBehavior.SetNull)                  .IsRequired(false);            entity.HasMany(e => e.Shares)                  .WithOne(s => s.File)                  .HasForeignKey(s => s.FileId)                  .OnDelete(DeleteBehavior.Cascade);                        entity.HasIndex(e => e.UserId);            entity.HasIndex(e => e.FolderId);            entity.HasIndex(e => e.IsDeleted);        });                modelBuilder.Entity<FolderEntity>(entity =>        {            entity.HasKey(e => e.Id);                        entity.Property(e => e.Name).IsRequired().HasMaxLength(50);            entity.Property(e => e.UserId).IsRequired();            entity.Property(e => e.CreatedAt).IsRequired();            entity.Property(e => e.LastAccessedAt).IsRequired();            entity.Property(e => e.IsDeleted).IsRequired().HasDefaultValue(false);                        entity.Property(e => e.ParentFolderId).IsRequired(false);            entity.Property(e => e.DeletedTime).IsRequired(false);                        entity.HasOne(e => e.ParentFolder)                  .WithMany(f => f.SubFolders)                  .HasForeignKey(e => e.ParentFolderId)                  .OnDelete(DeleteBehavior.Restrict)                  .IsRequired(false);                        entity.HasIndex(e => e.UserId);            entity.HasIndex(e => e.ParentFolderId);            entity.HasIndex(e => e.IsDeleted);                        entity.HasIndex(e => new { e.UserId, e.ParentFolderId, e.Name })                  .IsUnique()                  .HasDatabaseName("IX_Folders_Unique_Name_Per_User_Parent")                  .HasFilter("\"IsDeleted\" = false");         });                modelBuilder.Entity<FileShareEntity>(entity =>        {            entity.HasKey(e => e.Id);                        entity.Property(e => e.FileId).IsRequired();            entity.Property(e => e.FileOwnerId).IsRequired();            entity.Property(e => e.SharedByUserId).IsRequired();            entity.Property(e => e.SharedAt).IsRequired();            entity.Property(e => e.IsActive).IsRequired().HasDefaultValue(true);            entity.Property(e => e.IsPublic).IsRequired().HasDefaultValue(false);            entity.Property(e => e.Permission).IsRequired();                        entity.Property(e => e.SharedWithUserId).IsRequired(false);            entity.Property(e => e.ExpiresAt).IsRequired(false);            entity.Property(e => e.PublicLinkToken).HasMaxLength(16).IsRequired(false);                        entity.HasOne(e => e.File)                  .WithMany(f => f.Shares)                  .HasForeignKey(e => e.FileId)                  .OnDelete(DeleteBehavior.Cascade);                        entity.HasIndex(e => e.FileId);            entity.HasIndex(e => e.SharedWithUserId);            entity.HasIndex(e => e.IsActive);            entity.HasIndex(e => e.ExpiresAt);                        entity.HasIndex(e => e.PublicLinkToken)                  .IsUnique()                  .HasDatabaseName("IX_FileShares_PublicLinkToken_Unique")                  .HasFilter("\"PublicLinkToken\" IS NOT NULL");        });    }}