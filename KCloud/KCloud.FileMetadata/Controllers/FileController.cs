// KCloud.FileMetadata/Controllers/FilesController.csusing KCloud.Common.Controllers;using KCloud.FileMetadata.Features.Files.Commands;using KCloud.FileMetadata.Features.Files.Queries;using MediatR;using Microsoft.AspNetCore.Authorization;using Microsoft.AspNetCore.Mvc;namespace KCloud.FileMetadata.Controllers;[ApiController][Route("api/[controller]")]public class FileController : BaseController{    private readonly IMediator _mediator;    public FileController(IMediator mediator)    {        _mediator = mediator;    }    /// <summary>    /// Get user's files and folders in a specific location    /// </summary>    [HttpGet]    public async Task<IActionResult> GetFiles(        [FromQuery] Guid? folderId,        [FromQuery] string? searchTerm,        [FromQuery] bool includeSharedFiles = true,        [FromQuery] bool IsSharedWithMeFolder = false)    {        var query = new GetUserFilesQuery         {             FolderId = folderId,            SearchTerm = searchTerm,            IncludeSharedFiles = includeSharedFiles,            IsSharedWithMeFolder = IsSharedWithMeFolder        };                var result = await _mediator.Send(query);                return HandleResult(result);    }    [HttpGet("{id}")]    public async Task<IActionResult> GetFileById(Guid id)    {        var query = new GetFileDetailsQuery { Id = id };        var result = await _mediator.Send(query);        return HandleResult(result);    }    /// <summary>    /// Create file metadata (called after file upload to storage)    /// </summary>    [HttpPost]    public async Task<IActionResult> CreateFile([FromBody] CreateFileMetadataCommand command)    {        var result = await _mediator.Send(command);                return HandleResult(result);    }    /// <summary>    /// Update file (rename or move)    /// </summary>    [HttpPut("{id}")]    public async Task<IActionResult> UpdateFile(Guid id, [FromBody] UpdateFileMetadataCommand command)    {        command.Id = id;        var result = await _mediator.Send(command);                return HandleResult(result);    }    /// <summary>    /// Delete file (soft delete by default)    /// </summary>    [HttpDelete("{id}")]    public async Task<IActionResult> DeleteFile(Guid id, [FromBody] DeleteFileMetadataCommand command)    {        command.Id = id; // Override the ID from the route        var result = await _mediator.Send(command);        if (result.IsSuccess)        {            var message = command.HardDelete ? "File permanently deleted" : "File moved to trash";            return Ok(new { message });        }        return HandleResult(result);    }    /// <summary>    /// Share file with specific users    /// </summary>    [HttpPost("{id}/share")]    public async Task<IActionResult> ShareFile(Guid id, [FromBody] ShareFileWithUsersCommand command)    {        command.FileId = id;        var result = await _mediator.Send(command);                return HandleResult(result);    }    /// <summary>    /// Create public link for file    /// </summary>    [HttpPost("{id}/public-link")]    public async Task<IActionResult> CreatePublicLink(Guid id, [FromBody] CreatePublicLinkCommand command)    {        command.FileId = id;        var result = await _mediator.Send(command);                return HandleResult(result);    }    [HttpPost("{id}/restore")]    public async Task<IActionResult> RestoreFile(Guid id)    {        var command = new RestoreFileCommand { Id = id };        var result = await _mediator.Send(command);        return HandleResult(result);    }    [HttpGet("trash")]    public async Task<IActionResult> GetDeletedFiles()    {        var query = new GetDeletedFilesQuery();        var result = await _mediator.Send(query);        return HandleResult(result);    }    }