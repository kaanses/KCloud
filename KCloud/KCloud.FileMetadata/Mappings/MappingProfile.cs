using AutoMapper;using KCloud.FileMetadata.Models.DTO;using KCloud.FileMetadata.Models.Entity;using KCloud.FileMetadata.Models.Enum;namespace KCloud.FileMetadata.Mappings;public class MappingProfile : Profile{    public MappingProfile()    {        CreateMap<Folder, FolderDetailsDTO>()            .ForMember(dest => dest.FileCount, opt => opt.MapFrom(src => src.Files.Count(f => !f.IsDeleted)))            .ForMember(dest => dest.SubFolderCount, opt => opt.MapFrom(src => src.SubFolders.Count(f => !f.IsDeleted)))            .ForMember(dest => dest.BreadcrumbPath, opt => opt.Ignore()) // Set manually in handler            .ForMember(dest => dest.TotalSizeBytes, opt => opt.Ignore());        CreateMap<Models.Entity.FileMetadata, FileMetadataDTO>()            .ForMember(dest => dest.IsOwner, opt => opt.MapFrom((src, dest, destMember, context) =>            {                if (context.Items.TryGetValue("CurrentUserId", out var userIdObj) && userIdObj is Guid userId)                {                    return src.UserId == userId;                }                return false;            }))            .ForMember(dest => dest.UserPermission, opt => opt.MapFrom((src, dest, destMember, context) =>            {                if (context.Items.TryGetValue("CurrentUserId", out var userIdObj) && userIdObj is Guid userId)                {                    // Owner gets full access                    if (src.UserId == userId)                        return FilePermission.FullAccess;                                        // Find active share                    var activeShare = src.Shares?                        .Where(s => s.SharedWithUserId == userId && s.IsActive &&                                     (s.ExpiresAt == null || s.ExpiresAt > DateTime.UtcNow))                        .OrderByDescending(s => s.SharedAt)                        .FirstOrDefault();                                        return activeShare?.Permission;                }                return null;            }));                CreateMap<Folder, FolderDTO>().ReverseMap();                CreateMap<Models.Entity.FileMetadata, FileMetadataDTO>().ReverseMap();    }}