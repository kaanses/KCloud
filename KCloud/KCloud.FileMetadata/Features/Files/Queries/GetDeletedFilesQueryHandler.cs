using Ardalis.Result;using Microsoft.EntityFrameworkCore;using AutoMapper;using KCloud.Common.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Queries;public class GetDeletedFilesQueryHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    ILogger<GetDeletedFilesQueryHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<GetDeletedFilesQuery, Result<List<FileMetadataDTO>>>{    public async Task<Result<List<FileMetadataDTO>>> Handle(GetDeletedFilesQuery request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(localizer["Unauthorized"].Value);            }            var deletedFilesQuery = unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Folder)                .Where(f => f.UserId == currentUserId.Value && f.IsDeleted);                        if (!string.IsNullOrWhiteSpace(request.SearchTerm))            {                var searchTerm = request.SearchTerm.ToLower();                deletedFilesQuery = deletedFilesQuery.Where(f =>                     f.FileName.ToLower().Contains(searchTerm) ||                    f.ContentType.ToLower().Contains(searchTerm)                );            }            var deletedFiles = await deletedFilesQuery                .OrderByDescending(f => f.DeletedAt)                .ToListAsync(cancellationToken);            var result = mapper.Map<List<FileMetadataDTO>>(deletedFiles);            logger.LogInformation("Retrieved {Count} deleted files for user {UserId}",                 deletedFiles.Count, currentUserId);            return Result<List<FileMetadataDTO>>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error getting deleted files");            return Result<List<FileMetadataDTO>>.Error(localizer["FailedToRetrieveDeletedFiles"].Value);        }    }}