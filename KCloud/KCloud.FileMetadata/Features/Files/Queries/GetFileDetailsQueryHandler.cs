// KCloud.FileMetadata/Features/Files/Queries/GetFileByIdQuery.csusing Ardalis.Result;using KCloud.FileMetadata.Models.DTO;using MediatR;using AutoMapper;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Queries;public class GetFileByIdQueryHandler : IRequestHandler<GetFileDetailsQuery, Result<FileMetadataDTO>>{    private readonly IUnitOfWork _unitOfWork;    private readonly IMapper _mapper;    private readonly ILogger<GetFileByIdQueryHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public GetFileByIdQueryHandler(        IUnitOfWork unitOfWork,        IMapper mapper,        ILogger<GetFileByIdQueryHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _unitOfWork = unitOfWork;        _mapper = mapper;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result<FileMetadataDTO>> Handle(GetFileDetailsQuery request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result<FileMetadataDTO>.Unauthorized();            }            var file = await _unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Folder)                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.Id && !f.IsDeleted, cancellationToken);            if (file == null)            {                return Result<FileMetadataDTO>.NotFound();            }            // Check if user can read this file            var canRead = FilePermissionHelper.CanUserReadFile(file, currentUserId.Value);            if (!canRead)            {                return Result<FileMetadataDTO>.Forbidden();            }            // Update last accessed time            file.LastAccessedAt = DateTime.UtcNow;            _unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            await _unitOfWork.CommitAsync(cancellationToken);            var result = _mapper.Map<FileMetadataDTO>(file);            _logger.LogInformation("File details retrieved: {FileId} by user {UserId}", file.Id, currentUserId);            return Result<FileMetadataDTO>.Success(result);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error getting file details for {FileId}", request.Id);            return Result<FileMetadataDTO>.Error(_localizer["FailedToRetrieveFileDetails"]);        }    }} 