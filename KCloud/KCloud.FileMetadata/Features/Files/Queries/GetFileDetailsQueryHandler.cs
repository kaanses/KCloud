using Ardalis.Result;using KCloud.FileMetadata.Models.DTO;using MediatR;using AutoMapper;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Queries;public class GetFileByIdQueryHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    ILogger<GetFileByIdQueryHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<GetFileDetailsQuery, Result<FileMetadataDTO>>{    public async Task<Result<FileMetadataDTO>> Handle(GetFileDetailsQuery request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result<FileMetadataDTO>.Unauthorized();            }            var file = await unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Folder)                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.Id && !f.IsDeleted, cancellationToken);            if (file == null)            {                return Result<FileMetadataDTO>.NotFound();            }                        var canRead = FilePermissionHelper.CanUserReadFile(file, currentUserId.Value);            if (!canRead)            {                return Result<FileMetadataDTO>.Forbidden();            }                        file.LastAccessedAt = DateTime.UtcNow;            unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FileMetadataDTO>(file);            logger.LogInformation("File details retrieved: {FileId} by user {UserId}", file.Id, currentUserId);            return Result<FileMetadataDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error getting file details for {FileId}", request.Id);            return Result<FileMetadataDTO>.Error(localizer["FailedToRetrieveFileDetails"].Value);        }    }} 