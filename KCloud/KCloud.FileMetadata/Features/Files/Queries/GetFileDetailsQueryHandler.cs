using Ardalis.Result;using KCloud.FileMetadata.Models.DTO;using MediatR;using AutoMapper;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Queries;public class GetFileByIdQueryHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    ILogger<GetFileByIdQueryHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<GetFileDetailsQuery, Result<FileMetadataDTO>>{    public async Task<Result<FileMetadataDTO>> Handle(GetFileDetailsQuery request, CancellationToken cancellationToken)    {        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);                try        {            logger.LogInformation("Retrieving file details for {FileId} by user {UserId}",                 request.Id, currentUserId?.ToString() ?? "Anonymous");            var file = await unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Folder)                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.Id && !f.IsDeleted, cancellationToken);                        if (file == null)            {                logger.LogWarning("File {FileId} not found for details retrieval by user {UserId}",                     request.Id, currentUserId?.ToString() ?? "Anonymous");                return Result<FileMetadataDTO>.Error(localizer["FileNotFoundForDetails"]);            }            var userId = currentUserId ?? Guid.Empty;            var canRead = FilePermissionHelper.CanUserReadFile(file, userId);                        if (!canRead)            {                logger.LogWarning("User {UserId} attempted to access file {FileId} without permission",                     currentUserId?.ToString() ?? "Anonymous", request.Id);                return Result<FileMetadataDTO>.Error(localizer["InsufficientPermissionsViewFile"]);            }                        // Update last accessed time            file.LastAccessedAt = DateTime.UtcNow;            unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FileMetadataDTO>(file);            logger.LogInformation("File details retrieved: {FileId} by user {UserId}",                 file.Id, currentUserId?.ToString() ?? "Anonymous");            return Result<FileMetadataDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error getting file details for {FileId} by user {UserId}",                 request.Id, currentUserId?.ToString() ?? "Unknown");            return Result<FileMetadataDTO>.Error(localizer["FailedToRetrieveFileDetails"]);        }    }} 