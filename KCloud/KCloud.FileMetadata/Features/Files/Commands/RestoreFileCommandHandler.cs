// KCloud.FileMetadata/Features/Files/Commands/RestoreFileCommand.csusing Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Commands;// Handlerpublic class RestoreFileCommandHandler : IRequestHandler<RestoreFileCommand, Result>{    private readonly IUnitOfWork _unitOfWork;    private readonly ILogger<RestoreFileCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public RestoreFileCommandHandler(        IUnitOfWork unitOfWork,        ILogger<RestoreFileCommandHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _unitOfWork = unitOfWork;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result> Handle(RestoreFileCommand request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(_localizer["Unauthorized"]);            }            var file = await _unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .FirstOrDefaultAsync(f => f.Id == request.Id && f.IsDeleted, cancellationToken);            if (file == null)            {                return Result.NotFound();            }            if (file.UserId != currentUserId.Value)            {                return Result.Forbidden();            }            file.IsDeleted = false;            file.DeletedAt = null;            _unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            await _unitOfWork.CommitAsync(cancellationToken);            _logger.LogInformation("File restored: {FileId} by user {UserId}", file.Id, currentUserId);            return Result.Success();        }        catch (Exception ex)        {            _logger.LogError(ex, "Error restoring file {FileId}", request.Id);            return Result.Error(_localizer["FileRestoreFailed"]);        }    }}