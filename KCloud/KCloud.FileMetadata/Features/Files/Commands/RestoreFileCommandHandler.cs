using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileMetadata.Interfaces;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Commands;public class RestoreFileCommandHandler(    IUnitOfWork unitOfWork,    ILogger<RestoreFileCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<RestoreFileCommand, Result>{   public async Task<Result> Handle(RestoreFileCommand request, CancellationToken cancellationToken){    try    {        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);        if (currentUserId == null)        {            return Result.Unauthorized(localizer["Unauthorized"].Value);        }        if (request.RestoreAll)        {            var deletedFiles = await unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Where(f => f.UserId == currentUserId.Value && f.IsDeleted)                .ToListAsync(cancellationToken);            if (!deletedFiles.Any())            {                return Result.Success(); // No files to restore            }            foreach (var item in deletedFiles)            {                item.IsDeleted = false;                item.DeletedAt = null;                unitOfWork.Repository<Models.Entity.FileMetadata>().Update(item); // Individual updates            }            await unitOfWork.CommitAsync(cancellationToken);            logger.LogInformation("Restored {Count} files for user {UserId}", deletedFiles.Count, currentUserId);            return Result.Success();        }                var file = await unitOfWork.Repository<Models.Entity.FileMetadata>()            .Query()            .FirstOrDefaultAsync(f => f.Id == request.Id && f.IsDeleted, cancellationToken);        if (file == null)        {            return Result.NotFound();        }        if (file.UserId != currentUserId.Value)        {            return Result.Forbidden();        }        file.IsDeleted = false;        file.DeletedAt = null;        unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);        await unitOfWork.CommitAsync(cancellationToken);        logger.LogInformation("File restored: {FileId} by user {UserId}", file.Id, currentUserId);        return Result.Success();            }    catch (Exception ex)    {        logger.LogError(ex, "Error restoring file {FileId}", request.Id);        return Result.Error(localizer["FileRestoreFailed"].Value);    }}}