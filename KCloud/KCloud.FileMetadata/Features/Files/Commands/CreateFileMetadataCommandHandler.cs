using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using KCloud.FileMetadata.Models.Entity;using MediatR;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Commands;public class CreateFileMetadataCommandHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    IValidator<CreateFileMetadataCommand> validator,    ILogger<CreateFileMetadataCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<CreateFileMetadataCommand, Result<FileMetadataDTO>>{    public async Task<Result<FileMetadataDTO>> Handle(CreateFileMetadataCommand request, CancellationToken cancellationToken)    {        try        {            var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);            if (!validationResult.IsSuccess)            {                return Result<FileMetadataDTO>.Invalid(validationResult.ValidationErrors);            }                        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(localizer["Unauthorized"].Value);            }            if (request.FolderId.HasValue)            {                var folder = await unitOfWork.Repository<Folder>().GetByIdAsync(request.FolderId.Value, cancellationToken);                if (folder == null || folder.IsDeleted || folder.UserId != currentUserId.Value)                {                    return Result<FileMetadataDTO>.Error(localizer["FolderNotFoundOrAccessDenied"].Value);                }            }                        var storagePath = await StoragePathHelper.GenerateStoragePathAsync(                currentUserId.Value,                request.FileName,                request.FolderId,                async (id) => await unitOfWork.Repository<Folder>().GetByIdAsync(id, cancellationToken),                folder => folder.Id,                folder => folder.Name,                folder => folder.ParentFolderId            );            var fileMetadata = new Models.Entity.FileMetadata            {                Id = request.Id,                FileName = request.FileName,                ContentType = request.ContentType,                   FileSizeBytes = request.FileSizeBytes,                 UserId = currentUserId.Value,                FolderId = request.FolderId,                StoragePath = storagePath,                            UploadedAt = request.UploadedAt,                LastAccessedAt = DateTime.UtcNow,                IsDeleted = false            };            await unitOfWork.Repository<Models.Entity.FileMetadata>().AddAsync(fileMetadata, cancellationToken);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FileMetadataDTO>(fileMetadata);            logger.LogInformation("File metadata created: {FileId} with path {StoragePath} by user {UserId}",                 fileMetadata.Id, storagePath, currentUserId);            return Result<FileMetadataDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error creating file metadata");            return Result<FileMetadataDTO>.Error(localizer["FileCreationFailed"].Value);        }    }}