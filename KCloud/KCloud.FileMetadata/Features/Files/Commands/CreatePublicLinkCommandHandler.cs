using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;using FileShare = KCloud.FileMetadata.Models.Entity.FileShare;namespace KCloud.FileMetadata.Features.Files.Commands;public class CreatePublicLinkCommandHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    IValidator<CreatePublicLinkCommand> validator,    ILogger<CreatePublicLinkCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<CreatePublicLinkCommand, Result<FileShareDTO>>{    private readonly IValidator<CreatePublicLinkCommand> _validator = validator;    public async Task<Result<FileShareDTO>> Handle(CreatePublicLinkCommand request, CancellationToken cancellationToken)    {        try        {                        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                logger.LogInformation("File viewed by unauthenticated user");            }                        var file = await unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.FileId && !f.IsDeleted, cancellationToken);            if (file == null)            {                return Result<FileShareDTO>.Error(localizer["FileNotFound"].Value);            }                        var canShare = FilePermissionHelper.CanUserShareFile(file, currentUserId.Value);            if (!canShare)            {                return Result<FileShareDTO>.Error(localizer["InsufficientPermissions"].Value);            }                        var existingPublicShare = file.Shares                .FirstOrDefault(s => s.IsPublic && s.IsActive);            if (existingPublicShare != null)            {                unitOfWork.Repository<FileShare>().Delete(existingPublicShare);                await unitOfWork.CommitAsync(cancellationToken);            }                        var publicShare = new FileShare            {                Id = Guid.NewGuid(),                FileId = request.FileId,                FileOwnerId = file.UserId,                SharedByUserId = currentUserId.Value,                SharedWithUserId = null,                 Permission = request.Permission,                SharedAt = DateTime.UtcNow,                ExpiresAt = request.ExpiresAt,                IsActive = true,                IsPublic = true,                PublicLinkToken = FilePermissionHelper.GeneratePublicLinkToken()            };            await unitOfWork.Repository<FileShare>().AddAsync(publicShare, cancellationToken);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FileShareDTO>(publicShare);            logger.LogInformation("Public link created for file {FileId} by user {UserId}",                request.FileId, currentUserId);            return Result<FileShareDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error creating public link for file {FileId}", request.FileId);            return Result<FileShareDTO>.Error(localizer["PublicLinkCreationFailed"].Value);        }    }    }