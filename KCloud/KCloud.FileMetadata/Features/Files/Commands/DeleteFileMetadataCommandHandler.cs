// KCloud.FileMetadata/Features/Files/Commands/DeleteFileCommandHandler.csusing Ardalis.Result;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Commands;public class DeleteFileMetadataCommandHandler : IRequestHandler<DeleteFileMetadataCommand, Result>{    private readonly IUnitOfWork _unitOfWork;    private readonly ILogger<DeleteFileMetadataCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public DeleteFileMetadataCommandHandler(        IUnitOfWork unitOfWork,        ILogger<DeleteFileMetadataCommandHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _unitOfWork = unitOfWork;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result> Handle(DeleteFileMetadataCommand request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(_localizer["Unauthorized"]);            }            // Get file with shares to check permissions            var file = await _unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.Id && !f.IsDeleted, cancellationToken);            if (file == null)            {                return Result.Error(_localizer["FileNotFound"]);            }            // Check if user can delete this file            var canDelete = FilePermissionHelper.CanUserDeleteFile(file, currentUserId.Value);            if (!canDelete)            {                return Result.Error(_localizer["InsufficientPermissions"]);            }            if (request.HardDelete)            {                _unitOfWork.Repository<Models.Entity.FileMetadata>().Delete(file);            }            else            {                // Soft delete - mark as deleted                file.IsDeleted = true;                file.DeletedAt = DateTime.UtcNow;                 _unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            }            await _unitOfWork.CommitAsync(cancellationToken);            _logger.LogInformation("File {DeleteType} deleted: {FileId} by user {UserId}",                 request.HardDelete ? "hard" : "soft", file.Id, currentUserId);            return Result.Success();        }        catch (Exception ex)        {            _logger.LogError(ex, "Error deleting file {FileId}", request.Id);            return Result.Error(_localizer["FileDeletionFailed"]);        }    }    }