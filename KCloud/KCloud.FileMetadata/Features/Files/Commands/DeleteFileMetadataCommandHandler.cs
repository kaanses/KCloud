using Ardalis.Result;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Files.Commands;public class DeleteFileMetadataCommandHandler(    IUnitOfWork unitOfWork,    ILogger<DeleteFileMetadataCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<DeleteFileMetadataCommand, Result>{    public async Task<Result> Handle(DeleteFileMetadataCommand request, CancellationToken cancellationToken)    {        try        {            var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(localizer["Unauthorized"].Value);            }                        var file = await unitOfWork.Repository<Models.Entity.FileMetadata>()                .Query()                .Include(f => f.Shares)                .FirstOrDefaultAsync(f => f.Id == request.Id && !f.IsDeleted, cancellationToken);            if (file == null)            {                return Result.Error(localizer["FileNotFound"].Value);            }                        var canDelete = FilePermissionHelper.CanUserDeleteFile(file, currentUserId.Value);            if (!canDelete)            {                return Result.Error(localizer["InsufficientPermissions"]);            }            file.IsDeleted = true;            file.DeletedAt = DateTime.UtcNow;             unitOfWork.Repository<Models.Entity.FileMetadata>().Update(file);            await unitOfWork.CommitAsync(cancellationToken);            logger.LogInformation("deleted: {FileId} by user {UserId}", file.Id, currentUserId);            return Result.Success();        }        catch (Exception ex)        {            logger.LogError(ex, "Error deleting file {FileId}", request.Id);            return Result.Error(localizer["FileDeletionFailed"].Value);        }    }    }