using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using KCloud.FileMetadata.Models.Entity;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Folders.Commands;public class CreateFolderCommandHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    IValidator<CreateFolderCommand> validator,    ILogger<CreateFolderCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<CreateFolderCommand, Result<FolderDTO>>{      public async Task<Result<FolderDTO>> Handle(CreateFolderCommand request, CancellationToken cancellationToken)    {        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);                try        {            // Validation errors should return Invalid (400 Bad Request)            var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);            if (!validationResult.IsSuccess)            {                return Result<FolderDTO>.Invalid(validationResult.ValidationErrors);            }                        if (currentUserId == null)            {                logger.LogWarning("Unauthenticated user attempted to create folder '{FolderName}'", request.Name);                return Result<FolderDTO>.Unauthorized();            }                        // Parent folder validation - specific error for parent folder issues            if (request.ParentFolderId.HasValue)            {                var parentFolder = await unitOfWork.Repository<Folder>()                    .GetByIdAsync(request.ParentFolderId.Value, cancellationToken);                                    if (parentFolder == null || parentFolder.IsDeleted)                {                    logger.LogWarning("User {UserId} attempted to create folder '{FolderName}' in non-existent parent {ParentId}",                         currentUserId, request.Name, request.ParentFolderId);                    return Result<FolderDTO>.Error(localizer["ParentFolderNotFound"]);                }                                if (parentFolder.UserId != currentUserId.Value)                {                    logger.LogWarning("User {UserId} attempted to create folder '{FolderName}' in unauthorized parent {ParentId}",                         currentUserId, request.Name, request.ParentFolderId);                    return Result<FolderDTO>.Error(localizer["ParentFolderAccessDenied"]);                }            }                        // Check for duplicate folder names - Conflict for business rule violation            var existingFolder = await unitOfWork.Repository<Folder>()                .Query()                .FirstOrDefaultAsync(f => f.Name == request.Name &&                                          f.UserId == currentUserId.Value &&                                          f.ParentFolderId == request.ParentFolderId &&                                         !f.IsDeleted, cancellationToken);            if (existingFolder != null)            {                logger.LogWarning("User {UserId} attempted to create duplicate folder '{FolderName}' in parent {ParentId}",                     currentUserId, request.Name, request.ParentFolderId);                                return Result<FolderDTO>.Error(localizer["FolderAlreadyExistsInLocation"]);            }            var folder = new Folder            {                Id = Guid.NewGuid(),                Name = request.Name,                UserId = currentUserId.Value,                ParentFolderId = request.ParentFolderId,                CreatedAt = DateTime.UtcNow,                LastAccessedAt = DateTime.UtcNow,                IsDeleted = false            };            await unitOfWork.Repository<Folder>().AddAsync(folder, cancellationToken);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FolderDTO>(folder);            logger.LogInformation("Folder '{FolderName}' created successfully: {FolderId} by user {UserId} in parent {ParentId}",                 folder.Name, folder.Id, currentUserId, request.ParentFolderId);            return Result<FolderDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Unexpected error creating folder '{FolderName}' for user {UserId} in parent {ParentId}",                 request.Name, currentUserId?.ToString() ?? "Unknown", request.ParentFolderId);                        return Result<FolderDTO>.Error(localizer["FolderCreationFailed"]);        }    }}