// KCloud.FileMetadata/Features/Folders/Commands/CreateFolderCommandHandler.csusing Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using KCloud.FileMetadata.Models.Entity;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Folders.Commands;public class CreateFolderCommandHandler : IRequestHandler<CreateFolderCommand, Result<FolderDTO>>{    private readonly IUnitOfWork _unitOfWork;    private readonly IMapper _mapper;    private readonly IValidator<CreateFolderCommand> _validator;    private readonly ILogger<CreateFolderCommandHandler> _logger;    private readonly IStringLocalizer _localizer;    private readonly IHttpContextAccessor _httpContextAccessor;    public CreateFolderCommandHandler(        IUnitOfWork unitOfWork,        IMapper mapper,        IValidator<CreateFolderCommand> validator,        ILogger<CreateFolderCommandHandler> logger,        IStringLocalizer localizer,        IHttpContextAccessor httpContextAccessor)    {        _unitOfWork = unitOfWork;        _mapper = mapper;        _validator = validator;        _logger = logger;        _localizer = localizer;        _httpContextAccessor = httpContextAccessor;    }    public async Task<Result<FolderDTO>> Handle(CreateFolderCommand request, CancellationToken cancellationToken)    {        try        {            // Validate the request            var validationResult = await ValidationHelper.ValidateAsync(_validator, request, _logger);            if (!validationResult.IsSuccess)            {                return Result<FolderDTO>.Error(validationResult.Errors.FirstOrDefault());            }            // Get current user            var currentUserId = CurrentUserHelper.GetUserId(_httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(_localizer["Unauthorized"]);            }            // Validate parent folder exists if specified            if (request.ParentFolderId.HasValue)            {                var parentFolder = await _unitOfWork.Repository<Folder>().GetByIdAsync(request.ParentFolderId.Value, cancellationToken);                if (parentFolder == null || parentFolder.IsDeleted || parentFolder.UserId != currentUserId.Value)                {                    return Result<FolderDTO>.Error(_localizer["ParentFolderNotFound"]);                }            }            // Check if folder with same name already exists in the same location            var existingFolder = await _unitOfWork.Repository<Folder>()                .Query()                .FirstOrDefaultAsync(f => f.Name == request.Name &&                                          f.UserId == currentUserId.Value &&                                          f.ParentFolderId == request.ParentFolderId &&                                         !f.IsDeleted, cancellationToken);            if (existingFolder != null)            {                return Result<FolderDTO>.Error(_localizer["FolderAlreadyExists"]);            }            var folder = new Folder            {                Id = Guid.NewGuid(),                Name = request.Name,                UserId = currentUserId.Value,                ParentFolderId = request.ParentFolderId,                CreatedAt = DateTime.UtcNow,                LastAccessedAt = DateTime.UtcNow,                IsDeleted = false            };            await _unitOfWork.Repository<Folder>().AddAsync(folder, cancellationToken);            await _unitOfWork.CommitAsync(cancellationToken);            var result = _mapper.Map<FolderDTO>(folder);            _logger.LogInformation("Folder created: {FolderId} by user {UserId}", folder.Id, currentUserId);            return Result<FolderDTO>.Success(result);        }        catch (Exception ex)        {            _logger.LogError(ex, "Error creating folder");            return Result<FolderDTO>.Error(_localizer["FolderCreationFailed"]);        }    }}