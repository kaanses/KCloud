using Ardalis.Result;using AutoMapper;using FluentValidation;using KCloud.Common.Helpers;using KCloud.FileMetadata.Interfaces;using KCloud.FileMetadata.Models.DTO;using KCloud.FileMetadata.Models.Entity;using MediatR;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Localization;namespace KCloud.FileMetadata.Features.Folders.Commands;public class CreateFolderCommandHandler(    IUnitOfWork unitOfWork,    IMapper mapper,    IValidator<CreateFolderCommand> validator,    ILogger<CreateFolderCommandHandler> logger,    IStringLocalizer localizer,    IHttpContextAccessor httpContextAccessor)    : IRequestHandler<CreateFolderCommand, Result<FolderDTO>>{    public async Task<Result<FolderDTO>> Handle(CreateFolderCommand request, CancellationToken cancellationToken)    {        try        {            var validationResult = await ValidationHelper.ValidateAsync(validator, request, logger);            if (!validationResult.IsSuccess)            {                return Result<FolderDTO>.Error(validationResult.Errors.FirstOrDefault());            }                        var currentUserId = CurrentUserHelper.GetUserId(httpContextAccessor);            if (currentUserId == null)            {                return Result.Unauthorized(localizer["Unauthorized"].Value);            }                        if (request.ParentFolderId.HasValue)            {                var parentFolder = await unitOfWork.Repository<Folder>().GetByIdAsync(request.ParentFolderId.Value, cancellationToken);                if (parentFolder == null || parentFolder.IsDeleted || parentFolder.UserId != currentUserId.Value)                {                    return Result<FolderDTO>.Error(localizer["ParentFolderNotFound"].Value);                }            }                        var existingFolder = await unitOfWork.Repository<Folder>()                .Query()                .FirstOrDefaultAsync(f => f.Name == request.Name &&                                          f.UserId == currentUserId.Value &&                                          f.ParentFolderId == request.ParentFolderId &&                                         !f.IsDeleted, cancellationToken);            if (existingFolder != null)            {                return Result<FolderDTO>.Error(localizer["FolderAlreadyExists"].Value);            }            var folder = new Folder            {                Id = Guid.NewGuid(),                Name = request.Name,                UserId = currentUserId.Value,                ParentFolderId = request.ParentFolderId,                CreatedAt = DateTime.UtcNow,                LastAccessedAt = DateTime.UtcNow,                IsDeleted = false            };            await unitOfWork.Repository<Folder>().AddAsync(folder, cancellationToken);            await unitOfWork.CommitAsync(cancellationToken);            var result = mapper.Map<FolderDTO>(folder);            logger.LogInformation("Folder created: {FolderId} by user {UserId}", folder.Id, currentUserId);            return Result<FolderDTO>.Success(result);        }        catch (Exception ex)        {            logger.LogError(ex, "Error creating folder");            return Result<FolderDTO>.Error(localizer["FolderCreationFailed"].Value);        }    }}