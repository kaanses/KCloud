using Ardalis.Result;using KCloud.Common.Interfaces;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.Logging;namespace KCloud.Common.Services;public class ResultHandler : IResultHandler{    private readonly ILogger<ResultHandler> _logger;    public ResultHandler(ILogger<ResultHandler> logger)    {        _logger = logger;    }    public Microsoft.AspNetCore.Http.IResult HandleResult<T>(Result<T> result)    {        if (result.IsSuccess)        {            return Results.Ok(result.Value);        }        return HandleFailureGeneric(result);    }    public Microsoft.AspNetCore.Http.IResult HandleResult(Result result)    {        if (result.IsSuccess)        {            return Results.Ok();        }        return HandleFailureNonGeneric(result);    }    private Microsoft.AspNetCore.Http.IResult HandleFailureGeneric<T>(Result<T> result)    {        switch (result.Status)        {            case ResultStatus.NotFound:                _logger.LogWarning("Resource not found: {Message}",                     result.Errors?.FirstOrDefault() ?? "No specific error message");                return Results.NotFound(new {                     message = "Resource not found",                    errors = result.Errors                 });            case ResultStatus.Invalid:                _logger.LogWarning("Validation failed: {ValidationErrors}",                    string.Join(", ", result.ValidationErrors.Select(e => $"{e.Identifier}: {e.ErrorMessage}")));                                return Results.BadRequest(new {                     message = "Validation failed",                    errors = result.Errors,                    validationErrors = result.ValidationErrors.Select(e => new {                        field = e.Identifier,                        message = e.ErrorMessage                    })                });            case ResultStatus.Unauthorized:                _logger.LogWarning("Unauthorized access attempt");                return Results.Unauthorized();            case ResultStatus.Forbidden:                _logger.LogWarning("Forbidden access attempt");                return Results.Forbid();            case ResultStatus.Conflict:                _logger.LogWarning("Conflict: {Message}",                     result.Errors?.FirstOrDefault() ?? "Resource conflict");                return Results.Conflict(new {                     message = "Resource conflict",                    errors = result.Errors                 });            case ResultStatus.Error:            default:                _logger.LogError("Error in operation: {Errors}",                    string.Join(", ", result.Errors ?? new List<string> { "Unknown error" }));                                return Results.Problem(                    detail: "An error occurred while processing your request",                    statusCode: 500                );        }    }    private Microsoft.AspNetCore.Http.IResult HandleFailureNonGeneric(Result result)    {        switch (result.Status)        {            case ResultStatus.NotFound:                _logger.LogWarning("Resource not found: {Message}",                     result.Errors?.FirstOrDefault() ?? "No specific error message");                return Results.NotFound(new {                     message = "Resource not found",                    errors = result.Errors                 });            case ResultStatus.Invalid:                _logger.LogWarning("Validation failed: {ValidationErrors}",                    string.Join(", ", result.ValidationErrors.Select(e => $"{e.Identifier}: {e.ErrorMessage}")));                                return Results.BadRequest(new {                     message = "Validation failed",                    errors = result.Errors,                    validationErrors = result.ValidationErrors.Select(e => new {                        field = e.Identifier,                        message = e.ErrorMessage                    })                });            case ResultStatus.Unauthorized:                _logger.LogWarning("Unauthorized access attempt");                return Results.Unauthorized();            case ResultStatus.Forbidden:                _logger.LogWarning("Forbidden access attempt");                return Results.Forbid();            case ResultStatus.Conflict:                _logger.LogWarning("Conflict: {Message}",                     result.Errors?.FirstOrDefault() ?? "Resource conflict");                return Results.Conflict(new {                     message = "Resource conflict",                    errors = result.Errors                 });            case ResultStatus.Error:            default:                _logger.LogError("Error in operation: {Errors}",                    string.Join(", ", result.Errors ?? new List<string> { "Unknown error" }));                                return Results.Problem(                    detail: "An error occurred while processing your request",                    statusCode: 500                );        }    }}